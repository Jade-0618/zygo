
\n\n--- 项目文件结构 ---\n```\nzygo/\n    ├── .vscode/\n    ├── API_Package/\n    ├── app/\n    └── .gitignore\n    └── api_test_script.py\n    └── config.py\n    └── create_handover_file.py\n    └── e2e_test_script.py\n    └── example.py\n    └── python_bridge.py\n    └── run.py\n    └── workflow_test_script.py\n    └── zygo.zip\n        └── c_cpp_properties.json\n        └── settings.json\n        └── 50101BS_API_Package.json\n        └── ADS9960_API_Package.json\n        └── ADT7410_API_Package.json\n        └── ADXL345_API_Package.json\n        └── AMG8833_API_Package.json\n        └── APDS-9960_API_Package.json\n        └── AT89C52LED_API_Package.json\n        └── BH1750_API_Package.json\n        └── BMI280_API_Package.json\n        └── BMP280_API_Package.json\n        └── BNO055_API_Package.json\n        └── BSR2046K_API_Package.json\n        └── DHT11_API_Package.json\n        └── DHT22_API_Package.json\n        └── DS1624_API_Package.json\n        └── DS18B20_API_Package.json\n        └── FBG100_API_Package.json\n        └── GDM12864K_API_Package.json\n        └── HC-SR501_API_Package.json\n        └── JHD2004A_API_Package.json\n        └── LED_API_Package.json\n        └── LIGHT_SENSOR_API_Package.json\n        └── LM35_API_Package.json\n        └── LSM303C_API_Package.json\n        └── MLX90610_API_Package.json\n        └── MPU6020_API_Package.json\n        └── MPU9250_API_Package.json\n        └── MPX5700AP_API_Package.json\n        └── MS5611_API_Package.json\n        └── PT100_API_Package.json\n        └── SM4205_API_Package.json\n        └── SPL0611_API_Package.json\n        └── SSD1306_API_Package.json\n        └── SSD1327_API_Package.json\n        └── TC1602EL_API_Package.json\n        └── WSS411_API_Package.json\n        └── WZP01_API_Package.json\n        └── WZPK431_API_Package.json\n        ├── api/\n        ├── langgraph_def/\n        ├── services/\n        ├── static/\n        ├── temp_workspaces/\n        ├── templates/\n        └── __init__.py\n        └── analyzer_test_script.py\n        └── models.py\n            └── __init__.py\n            └── auth_routes.py\n            └── device_routes.py\n            └── log_stream_routes.py\n            └── project_routes.py\n            └── user_routes.py\n            └── workflow_routes.py\n            └── __init__.py\n            └── agent_state.py\n            └── graph_builder.py\n            └── __init__.py\n            └── auth_service.py\n            └── device_service.py\n            └── project_analyzer_service.py\n            └── syntax_analyzer_service.py\n            └── user_service.py\n            └── workflow_service.py\n            └── index.html\n            ├── .build_cache/\n            ├── .single_file_analyzer/\n            ├── wf-1d25784f-b1a8-43fe-ad4d-d02c59404768/\n            ├── wf-378fc056-82bb-4a0c-846b-db270771f17c/\n            ├── wf-3e4f1fec-5fb8-42da-ada6-685bf6018b58/\n            ├── wf-5b1de918-07eb-49c2-ba61-921d3eb30d5f/\n            ├── wf-63b0e328-240a-4b9b-b4e2-3c516be56db6/\n            ├── wf-7085efb4-5310-4ac3-ab2d-bfb128b55c87/\n            ├── wf-731eba90-d655-4f5e-843c-d81b1fd03273/\n            ├── wf-87d81077-baaf-42f7-af7c-a4080e00b577/\n            ├── wf-c71d857d-e468-49fe-bc15-a608f13441a5/\n            ├── wf-e96b892c-9337-4339-a7bf-a84dff6e2102/\n                ├── 00/\n                ├── 01/\n                ├── 02/\n                ├── 03/\n                ├── 04/\n                ├── 05/\n                ├── 06/\n                ├── 07/\n                ├── 08/\n                ├── 09/\n                ├── 0A/\n                ├── 0B/\n                ├── 0C/\n                ├── 0E/\n                ├── 0F/\n                ├── 10/\n                ├── 12/\n                ├── 13/\n                ├── 14/\n                ├── 15/\n                ├── 16/\n                ├── 18/\n                ├── 19/\n                ├── 1B/\n                ├── 1D/\n                ├── 1E/\n                ├── 1F/\n                ├── 20/\n                ├── 21/\n                ├── 22/\n                ├── 23/\n                ├── 24/\n                ├── 25/\n                ├── 26/\n                ├── 27/\n                ├── 28/\n                ├── 29/\n                ├── 2A/\n                ├── 2B/\n                ├── 2C/\n                ├── 2E/\n                ├── 2F/\n                ├── 30/\n                ├── 31/\n                ├── 32/\n                ├── 33/\n                ├── 34/\n                ├── 35/\n                ├── 36/\n                ├── 37/\n                ├── 38/\n                ├── 39/\n                ├── 3A/\n                ├── 3B/\n                ├── 3D/\n                ├── 3E/\n                ├── 3F/\n                ├── 41/\n                ├── 43/\n                ├── 44/\n                ├── 45/\n                ├── 46/\n                ├── 47/\n                ├── 48/\n                ├── 49/\n                ├── 4A/\n                ├── 4B/\n                ├── 4C/\n                ├── 4D/\n                ├── 4E/\n                ├── 4F/\n                ├── 50/\n                ├── 51/\n                ├── 52/\n                ├── 53/\n                ├── 54/\n                ├── 55/\n                ├── 56/\n                ├── 57/\n                ├── 58/\n                ├── 59/\n                ├── 5A/\n                ├── 5B/\n                ├── 5C/\n                ├── 5D/\n                ├── 5E/\n                ├── 5F/\n                ├── 60/\n                ├── 61/\n                ├── 62/\n                ├── 63/\n                ├── 64/\n                ├── 65/\n                ├── 66/\n                ├── 67/\n                ├── 68/\n                ├── 69/\n                ├── 6A/\n                ├── 6B/\n                ├── 6C/\n                ├── 6E/\n                ├── 6F/\n                ├── 70/\n                ├── 71/\n                ├── 72/\n                ├── 73/\n                ├── 74/\n                ├── 75/\n                ├── 76/\n                ├── 77/\n                ├── 78/\n                ├── 79/\n                ├── 7A/\n                ├── 7B/\n                ├── 7C/\n                ├── 7E/\n                ├── 7F/\n                ├── 80/\n                ├── 81/\n                ├── 82/\n                ├── 83/\n                ├── 84/\n                ├── 85/\n                ├── 86/\n                ├── 87/\n                ├── 88/\n                ├── 89/\n                ├── 8A/\n                ├── 8B/\n                ├── 8C/\n                ├── 8D/\n                ├── 8E/\n                ├── 8F/\n                ├── 90/\n                ├── 91/\n                ├── 93/\n                ├── 94/\n                ├── 96/\n                ├── 97/\n                ├── 98/\n                ├── 99/\n                ├── 9A/\n                ├── 9B/\n                ├── 9C/\n                ├── 9D/\n                ├── 9E/\n                ├── 9F/\n                ├── A1/\n                ├── A2/\n                ├── A3/\n                ├── A4/\n                ├── A5/\n                ├── A6/\n                ├── A7/\n                ├── A8/\n                ├── A9/\n                ├── AA/\n                ├── AB/\n                ├── AC/\n                ├── AD/\n                ├── AE/\n                ├── AF/\n                ├── B0/\n                ├── B1/\n                ├── B2/\n                ├── B3/\n                ├── B4/\n                ├── B5/\n                ├── B6/\n                ├── B7/\n                ├── B8/\n                ├── B9/\n                ├── BA/\n                ├── BB/\n                ├── BC/\n                ├── BD/\n                ├── BE/\n                ├── BF/\n                ├── C0/\n                ├── C1/\n                ├── C2/\n                ├── C3/\n                ├── C4/\n                ├── C5/\n                ├── C6/\n                ├── C7/\n                ├── C8/\n                ├── C9/\n                ├── CA/\n                ├── CB/\n                ├── CC/\n                ├── CD/\n                ├── CE/\n                ├── CF/\n                ├── D0/\n                ├── D1/\n                ├── D2/\n                ├── D3/\n                ├── D4/\n                ├── D5/\n                ├── D6/\n                ├── D7/\n                ├── D8/\n                ├── D9/\n                ├── DA/\n                ├── DB/\n                ├── DC/\n                ├── DD/\n                ├── DE/\n                ├── DF/\n                ├── E0/\n                ├── E1/\n                ├── E2/\n                ├── E3/\n                ├── E4/\n                ├── E5/\n                ├── E6/\n                ├── E7/\n                ├── E8/\n                ├── E9/\n                ├── EA/\n                ├── EB/\n                ├── EC/\n                ├── ED/\n                ├── EE/\n                ├── EF/\n                ├── F0/\n                ├── F1/\n                ├── F2/\n                ├── F3/\n                ├── F4/\n                ├── F5/\n                ├── F6/\n                ├── F7/\n                ├── F9/\n                ├── FA/\n                ├── FB/\n                ├── FC/\n                ├── FD/\n                ├── FE/\n                ├── FF/\n                └── .sconsign311.dblite\n                └── config\n                    └── 002bd6523a16484aeccaecce88e84f14\n                    └── 00735f82cedbd615948618965c3a5a72\n                    └── 00e9827d7c5674c47790a3321216a96d\n                    └── 013c296c5e137d8f33117a3265ac9fd3\n                    └── 016f2c7b796aa3855ee8a0d4f2c15ff5\n                    └── 029840e22dedc8e48419183fd68a9dc5\n                    └── 02b72e3dbb04385f4a795c5c1bcc6ef0\n                    └── 030d5289c64e529e04822ddb44295a45\n                    └── 0371be67ed24be8163324cb8951d9d03\n                    └── 0496a53608bab54bfe9fc9509f2703f1\n                    └── 04b1fbb78da318c168ff32833793b56e\n                    └── 052c371c5aab64683ca21e399a37d796\n                    └── 05417d702e06fcc6a0d0564ccffe3f90\n                    └── 05910be8aa711341c23931616cf335d0\n                    └── 069416367a09a9ae90291a9ba8cef3db\n                    └── 06c4c7df68f0f69ba4cb3f2932a5a421\n                    └── 06d128d00feab74ce81eca42949f79dc\n                    └── 076d080d92d7b0cd2cdd385c9b87bb64\n                    └── 0854fd92573aa90128811526ef4c932c\n                    └── 086d2a01c5fa5b67d3b8fc7307d1ac62\n                    └── 08dc1d839e5a172ca074b8946524aa8a\n                    └── 08df13bbb2485a71a838c95c7e6812de\n                    └── 08f59f86c9973ca259e438979a039d3f\n                    └── 099231d7bfcacb1bb839b68f91e78aa1\n                    └── 0a6393d631db191bef5ac216ccc1d6b5\n                    └── 0a8c0302954fc4655f498a62756d336c\n                    └── 0ae0566abeda846411033a54f2f4ef46\n                    └── 0b44ba37417a053079e6f0d3c8344fa8\n                    └── 0b9e51ba01680b9cc9339871eaef4986\n                    └── 0be96989bf844e230a69ae48267fb739\n                    └── 0c1ba7d088c71483cc06b1259a4fda1b\n                    └── 0c1c6bf43979173a730dee6e723e5d0d\n                    └── 0c8907a2742e58f99f345d4fa4b6dd82\n                    └── 0cd52af845b588569bb6ca7293d009f2\n                    └── 0e112d1e5a9e6a1b60ed22eace678004\n                    └── 0e729345cf4993d315b80b78682a5f23\n                    └── 0ecb37e0cd46a719a83902f9ec1cea41\n                    └── 0ef6941427a016ccc152392da1be5f81\n                    └── 0f2e12f9b0b1835a4af58edbbc56951d\n                    └── 0f68ab35def3aada05e0807a5e388c7e\n                    └── 0f86b606bf3e583680fae148de0389b4\n                    └── 0fbd9b7dbdb1c32bd2c20234bb8357aa\n                    └── 0fea3d74b29092072de4e4b7e930ace2\n                    └── 10685324e400f3129129f16ec04e81c2\n                    └── 10b9fdd50f7b58ef63dd6c34e77b71e6\n                    └── 123e25dcb67ba3dcf8f8061e97128569\n                    └── 125c79c1e86dc511f4b0d6b8a920ec07\n                    └── 1274689ace4e1d8ab771ac1a1fc42381\n                    └── 12bfe0ca48be9973470d2e5f1f6bd493\n                    └── 1318984a43f93ea093bec1de95f37b20\n                    └── 136fbc038759e70706e1739b113c6249\n                    └── 142bc6a41cab3d6185493b36f752eb67\n                    └── 148478287c3cce3b86b44d643b91a52a\n                    └── 14a1593b2f3adf81612e1d2669b161f2\n                    └── 150d9311390c49bdce2d0228f614a7c3\n                    └── 15a246477f32abca5b8f6c80635a2ce7\n                    └── 15c3f8078cc5ff94a141cd826c9c9d29\n                    └── 15e843206f60cf1921389ffd8e3fd072\n                    └── 15f04671b3b12c8530744f80f313cc7b\n                    └── 15fd148b1f1687abee4ee923ae138c11\n                    └── 162c78d1ebfee5560618221deeef0e11\n                    └── 169132fb58f45a9dc3a09abafc742e75\n                    └── 16cd83b302dfab8b02d35f7cfe6e9af7\n                    └── 16e0e28561e2b8d4f851bc27518052b7\n                    └── 185ece858f2719759decc443ae6a8dbc\n                    └── 18b58e07e6747b7212b0355a4b5331e5\n                    └── 18de4d3038f416bff84aa0e5e5563520\n                    └── 19374ed5509401bd949d794feefd1158\n                    └── 19c62939ab56ac95c282bbb213c8baa9\n                    └── 19d22aeff776aab031906fe039323339\n                    └── 1b30f853b0c64bd1c6cb97753cf434d5\n                    └── 1b320d94e80eec7955edf2f19638c249\n                    └── 1bc71dea8bbb3f4c76ca2071e9f9cd20\n                    └── 1d0de2a455fe7e816d4060475827bf8a\n                    └── 1e5d81078cef1cd3fb4c8b904f5a3c3f\n                    └── 1ea7ea536aac0a3b2c29e79b999c1171\n                    └── 1ece934b72970e2a05602b1682735cf7\n                    └── 1f697fad17e31e9ff2ccf55750f4f06a\n                    └── 1ff63f01a7f0528fcfd3266143aa2c76\n                    └── 2010417d9d3b2ae1ba8df2126d967267\n                    └── 20401215603f34dd0e0ef5e4f72a6cce\n                    └── 20698c0e37b616c1725c0ca7212ff29c\n                    └── 20752a72d08c233876312938863c7e6c\n                    └── 2133d58c36dd7f26d6e78ef598dd7133\n                    └── 215c110d0c39ef94a7c62ccfa2a54fac\n                    └── 2195c6c09265f4581f9f4693c7bb2443\n                    └── 21e64c3c03b303a5a6e756167376aa49\n                    └── 2283776827f8e85e9614b2ec61c5b056\n                    └── 22daee00da7a6738539dae1de1ac08e8\n                    └── 23626b5e6d1ea9cbe456284e86915fb9\n                    └── 238fdf4454e59c6b179ac45cd809b57c\n                    └── 23c9f01af38ed9b3f1fe4da3cfd8b683\n                    └── 23cd4de30c87eb1682545c2c1ca05de0\n                    └── 24c8b3fa87b93ef0ecbca503a5f4ae5a\n                    └── 25976ccf676a05c56258ea100b91ac08\n                    └── 25d3d054f21405b1459351090e58dec0\n                    └── 25d63e6925eecacafd01b20dec8e5f76\n                    └── 26557dd11088ac559491c8330826c355\n                    └── 26db0a0706c379bd3c497c06742afd43\n                    └── 27ddebab915c5c2f31ef7db59a86c8b6\n                    └── 28af79d426e11ffc93ff812fa4bdef3c\n                    └── 291590e9150f1aa2398e29c0ba204459\n                    └── 2924f129da08857ca629ad006b0eb7fc\n                    └── 29c6442c6c9dd68c5b7360bdf41337a2\n                    └── 29ec43f0994d5aa3c7023bdbe709e1f6\n                    └── 2a0ae733d9f80e5f4bd0d5f955578e5b\n                    └── 2a3143857b569733fd40ff2c08b47876\n                    └── 2a9b92105cb4e9b0886cb3c9e229ddcc\n                    └── 2b2ea503bff5d5b19bf47a4d3b28c75c\n                    └── 2b4aac724aff8cb6f30ed56fa17c5fd0\n                    └── 2ccbdbe00282275754cbcd0cb905d1da\n                    └── 2ea7917d88770da802f125e6a8584ae3\n                    └── 2f01b9c220530bae136b9108fe5e5c87\n                    └── 2f8622b035262bcca687c7d34ed27404\n                    └── 2fa49397160edccf2333579a4369de13\n                    └── 3001fa974f87e87baf05b6003f32e100\n                    └── 30ece0910ed73391510d3758066453ce\n                    └── 310af557beb8612d99b1446e8ec92634\n                    └── 31211d296896186d24679215c9941701\n                    └── 315e2a145817a9a731337c692fc6579f\n                    └── 329a5b08271bacf5716732939b3cd44d\n                    └── 33007f6f001c220be070c1ddc20027d1\n                    └── 33ae2dc9c4487b35e8901a1c0706a02e\n                    └── 3437ae487f62c53f60fe4c1d711aa514\n                    └── 34d93a85c3eed648d20691b04b5de6eb\n                    └── 3526c767319fea292345d604d8da1c22\n                    └── 35556b6ce72173a6a85bf1d763aa3776\n                    └── 356a4aba9d88ed34296821cd30a65fa9\n                    └── 359eca203016ff102817b7708b0d310f\n                    └── 361605f203c60de02c18585ef504ce36\n                    └── 362fc3296d769bb8f654c96db59276ab\n                    └── 36886b051badf8d56c36fd2b8aea3b00\n                    └── 36eb828054bc8a5cc3091d2566c9ae12\n                    └── 378cf0b5001f2a4e8f172ecca83169c3\n                    └── 386cf5d113b43ae5437f35a0080bf033\n                    └── 38bda97b39559a1524267357c0f980c1\n                    └── 38e466f5bd9bdbc08dc84f9789791848\n                    └── 3991fb003c75f683489fb3d39e495df0\n                    └── 39dfbf9b467744e2465a9c68797dea9b\n                    └── 3a40f3abda76e71178c36e72015dcaac\n                    └── 3b1749a71cac5b2b22fe3b0d78859c5f\n                    └── 3b4226c5de687866d618077215776538\n                    └── 3b48eba8d33f6cd9630b4d44e0ff9a15\n                    └── 3b70c793e37a7d05b46e30975682d21c\n                    └── 3b7dd710dbfd6ec6ffe857f32fc07dab\n                    └── 3bb84eaca8c6f0e31dc9112cf51dee58\n                    └── 3bbe6cb43773c81e3e0d3725ede44ea2\n                    └── 3d7921a24c3cfb19b5a97b357c50a5f3\n                    └── 3d8d68349e6a37e24de864bbfe06b583\n                    └── 3df4488395b8cda6377bd4314a529b7a\n                    └── 3e1d8e4fee3198c7d5bb1da5a77fe451\n                    └── 3f1aeaf069343115e2f0060638680ecb\n                    └── 3f5961e5533620d8c6c2e8ed89e71d22\n                    └── 412b2f325f61993a1a1481985984c98f\n                    └── 41c4053cffd2507b82d8c0e3dd5a7179\n                    └── 41e5263084113d4e7e18c1e6057c910c\n                    └── 4337097e405333319459e6a4078fbeaa\n                    └── 447f64269c2381b5dd39410c5b2cbd3a\n                    └── 448c842b22956bcd887e976876c19cee\n                    └── 44997eae8ad1edaf90e5ca8e45aee319\n                    └── 44f7ff52fcba508eaafb1aae8e5737d6\n                    └── 457269bc2f7fddd83e9e83aebd541d00\n                    └── 46de32789c0c54f0894757da772110ff\n                    └── 47304e4b2513aaf259a6e94cde5c2efa\n                    └── 4764a2684e9bf9ca5bb0b18326fe347f\n                    └── 482962f2dc76fb25c41a58b6aecee4c8\n                    └── 487da8844cffe8e6a8931e88422125a7\n                    └── 49beae0060f1fb980a14bb586d24e1ff\n                    └── 4a0204eb6276f06ccca686655c56c001\n                    └── 4b445a1a80064628a7b4a62e78d17556\n                    └── 4b490650bcd85d27f3dae6592491a936\n                    └── 4b746d542a2a79e2e45edcecb674bb35\n                    └── 4cf0836e03580a29cadba2bf280ae95b\n                    └── 4d301a5d2478c7af3ce2bf8b16faaf01\n                    └── 4d35748b816eaf79f3340eab074d8890\n                    └── 4db5e2826910300ee607e76db3c97aff\n                    └── 4df54a7134aafcf2dee51d9427459e6b\n                    └── 4e1a688853afde57b3d3985de3afc117\n                    └── 4ea50d24bd8f60c17696c6a37a6998be\n                    └── 4fbfd9abc17326456611e95fe0636aeb\n                    └── 4fc4e7661778874cbcc43e69667dc20d\n                    └── 502c425edff368712510917a26e61a59\n                    └── 50c882a714c86d4eaa420bb50d9d5a96\n                    └── 5177af4fd4de17829fc327ae528901cc\n                    └── 528e0ffa128afae6b652a4937e5c47d9\n                    └── 52bfefc28f460580ce3bcf71c736cfbf\n                    └── 53127f18bd527acc3ebe1219498caa7b\n                    └── 53506c8a1063ec381e753ae06a47e1c1\n                    └── 5373bd5c3ffc9efdbebeb8df21df6dcf\n                    └── 5380d4a11c4f1d59c13906a2583dbc81\n                    └── 53b40b28a46df70096ca215ad36dd08a\n                    └── 53dac78455cc0635c32f5bbd09519716\n                    └── 54658327b0588fc5832656e6eea41ee6\n                    └── 54f62b2dff68a9e0b6a7923ed95656c2\n                    └── 5530cde090e0917eeca50f47ca573f3a\n                    └── 55358ce13106a07d777fb1d21d7934e1\n                    └── 555be0620c7ce1e8fe2a67d19d18adff\n                    └── 55966ecf42c89364cf399ced2cbd49a7\n                    └── 560d6c515c095aea093ea004813e2e49\n                    └── 57170552af526a34f9ca88f754439ea3\n                    └── 57611dac6588e416de762f6992019c8a\n                    └── 578679d661601e0f572a1a2c50b4ddd9\n                    └── 588ec38021fb9f23a738ec8d5c87d529\n                    └── 592d25567585e3e6684fd496070b6fb3\n                    └── 59d3dd4bb6cc1256e98474bf77ca4a18\n                    └── 5a83ee3fab739d6b29138fa13b8c8a9c\n                    └── 5aa31e22bdb4d0bdc3cd09759ea43e42\n                    └── 5ab04f3fe8866ece83c2fd5a565813e8\n                    └── 5ae05b87125c6d7ce20ae483cc1d8526\n                    └── 5b00e0df66176e1f3e0914136b487826\n                    └── 5b10082d75ea3ed3d086ce7c6f687af3\n                    └── 5c1bd5aa008f0c0f0d0f576d8d7446a9\n                    └── 5c8e30de1620182d34d8349a9e18dba3\n                    └── 5ca2e5b8d5499ea2eba826794a29712e\n                    └── 5d0948567b98f2096b1b3c67cf83a289\n                    └── 5d49fa1e4abdca145af81e2fafb475cc\n                    └── 5d718998dc61a6a1e9b184de5274169c\n                    └── 5d9c7e7d57df020e61ab2d3954c5aff3\n                    └── 5de8231e61f16d40501701c41c0296ba\n                    └── 5df47c520c4076c27ef9652781d74b76\n                    └── 5e038be3b9ee402f9c9350fc3d19c717\n                    └── 5ed2127e977260051416c1a4c7e59afb\n                    └── 5ffa881709503c618819ae33a3126a6c\n                    └── 602c7b156a82b4a0e58d416a863b0765\n                    └── 60a595db912fabae77971b2fcc131742\n                    └── 618652ba29d8afef9d2eae7a180369fb\n                    └── 61a627ce79f69d5aedca4580af720a41\n                    └── 623d2298521b768d7ae2f81497b594d8\n                    └── 63323ec59b37a1919cc4a13c54cff5f8\n                    └── 6344bf8ae203d27a3dea98de3d75e1d4\n                    └── 63c87d10709b3256d9de22dd06414912\n                    └── 63f1220ddd550212e7428371deb9a65a\n                    └── 648f611261d76966c8c8e5aadc1afcc5\n                    └── 652a8ad0b909f904ffb7f0a6d539df46\n                    └── 65344e1f276488b478b192a8bb3f7bcd\n                    └── 65f305e707d7ffa17f85f845e0608d52\n                    └── 660fa2745c7aa8f7dd9e266ee5f8b18b\n                    └── 6621d9e2e118318b50c8820e2bbbacdf\n                    └── 66495fad1e654e16572dcc56f1210cc4\n                    └── 66bb93a8b33c4936c68e5b9723e5ca32\n                    └── 66fe4fd90a0b20dd2bc9582c882e48d5\n                    └── 67a085ec72698441c37e1c7eba21f2b2\n                    └── 67bf150be3c63e0c6d8554b30071e770\n                    └── 67d1073b04c18fb83ebe90dcc6c6b409\n                    └── 6887064cbb4f9ca872cb2b31fb67dada\n                    └── 69984e6cbcdd64003458da61f9cc6056\n                    └── 69d073ec83e453f20f274bd467500bd9\n                    └── 6a027b126e194981931bbdce32fd97d8\n                    └── 6a138f63d53064b17d04402f56f632d2\n                    └── 6a219b873a0a039481c1908d4ba6347f\n                    └── 6aa8b91f8f336f9a0a2ddd4b997a1599\n                    └── 6b8834ac158e145245a91acbff0fb036\n                    └── 6b96ca48fb3cdd3d91aad292150a0eab\n                    └── 6c64f1f75233477922515f14eaacc340\n                    └── 6eb860e078e2d99552fe72f5aff57959\n                    └── 6eee8c4334aa2a98ee5fa152e194132a\n                    └── 6f54a385274cdea22d70e258d41822cd\n                    └── 6fb9477c22c5d182ea8a6788af4be6f2\n                    └── 70572a4ad85714a59092e43fb30b942c\n                    └── 70bac5dbf3fdc8bacffcaa2411475ebc\n                    └── 70bd746672b2b8357e1310397d8f4611\n                    └── 70ca4f15f378fbeac0d37cfd3bb08045\n                    └── 715a925a6c63bdb73133a7963c31bd77\n                    └── 71734ebddce8f6682a74352e0b994460\n                    └── 71dd5dee729f9e16a2e6011bf68e3387\n                    └── 7295d9270261ce68c9da3582855fd29a\n                    └── 72ad566b9704c05edff53ea02cb32e84\n                    └── 72e39e93939701388107cf0fefd26868\n                    └── 72ed165a7a9a16c11a0865541bed850f\n                    └── 7390f002f61a71c1630a06ca003ce348\n                    └── 73c4111b852a559c3db52011f30abf8f\n                    └── 740fb3f6499dbcff1c86112198f8976a\n                    └── 7416d51be31643b3ce61510016d7da69\n                    └── 7429bed6a114300fff7c3e6d3bfb6423\n                    └── 7431c704821159af961afd6c1e96f0c1\n                    └── 74aca8a653404119e49ba26c40c2f52b\n                    └── 74b195adba905e80d68b94e46ae6b97e\n                    └── 751d14ee11face5f5ca1c5865b9dd415\n                    └── 755f1c15d42f56b3cc981222c3cecd0f\n                    └── 768b644225cf8174e9461d6441be1060\n                    └── 769ef1fe6b9100eefd5e99b30614d216\n                    └── 7774b4a286c2566b6a70f5be9587ee3a\n                    └── 777ca0158b03fa6ab4d2c7d32dcc21e3\n                    └── 778012e0a949342550094bc8737526ec\n                    └── 7799e37d40805bda9abf421c0c2596a6\n                    └── 785908961a25bcbb44771cdf1cb38583\n                    └── 78a8b389483d1fde904eabbb8de75401\n                    └── 78b505c5d3ae12d7d1960e9e589d29a3\n                    └── 791c4c3d1bfc9df54b310bb48dae85d2\n                    └── 79bb5b8358c5b0f86b599f6da3fad6b0\n                    └── 79ee8c8d15b42e25a9e93327d6425c63\n                    └── 7a6af9d7e8b3fc68ff726012a9e03f54\n                    └── 7b3f747cd5fe3b6d99c6909ed40c33a9\n                    └── 7b5001fa8d051c527bae558b1f809296\n                    └── 7bbbdc84c44d779c9763da419bd1a611\n                    └── 7c5f345bed691d60d9b46805fe8fde0c\n                    └── 7e0d4b7f862c99816945ea2e0075d097\n                    └── 7ff49547c85dead557bb8af670c54576\n                    └── 80200648f6a69e581c631cc7b813de13\n                    └── 805b3751ce902b772400c59066b880d5\n                    └── 807a48a9b9587fd41e18ed07a195ec33\n                    └── 80b47a4fa31da6b087bbbd2a5efbae83\n                    └── 8129a704a4d78b8545acfb8154d6536c\n                    └── 81d6d99a68fe69f68f2c1f4a01090a25\n                    └── 825e49694f34d4778cb0bd3e29e8bd08\n                    └── 82ca8c3cdf296b2522b72dad95e76b8f\n                    └── 835dfee316366fe52e02853ebbc1a944\n                    └── 83a8a65fe482e29949862a9093007fb5\n                    └── 8404eb769b8046dd53b3a4e9992fa032\n                    └── 854ac1c96163cea20aab9b86626043c6\n                    └── 8551bb7fd48e091ca212b48f521cd9f5\n                    └── 85dd012445cd19059e1a3850a5a3a0c7\n                    └── 85e1dc886a5b42353fdc99b913a76ff3\n                    └── 86b2af1555256cac15f2c6eca51c4c03\n                    └── 86b6e06ceb7627e8c67f5e1ebe7f2173\n                    └── 8773a1443320e5805efb0fca7a789ec2\n                    └── 877f909a0a9497701b093d162d305118\n                    └── 88b765107b42c2c6095c8b6d82f8b40a\n                    └── 88d10fbf6f738d1a43c172488220388a\n                    └── 8914c2125c84a1a2907277c709234d6b\n                    └── 899a16068664dc35ea884f1026843cba\n                    └── 89c9be399d883a1ae379e4a3e271ba05\n                    └── 8a16505642f496f932c028de2ba3d2b1\n                    └── 8a50d9d8bb2bcd8678d2e8695949f474\n                    └── 8ae5218622fe93b23d63067ed5641827\n                    └── 8be39e6f40895b2e34a007d57263f8bc\n                    └── 8c10c16dfa7d9a925b0512dd2fde8d03\n                    └── 8c11375ac2748fe9018851384cc597c8\n                    └── 8c194c4dacaaadc04d7b5dbb2dfc2fc4\n                    └── 8c9a6befee8fec58e6d9a2739b4a8084\n                    └── 8ce4c1e7b964f21f6d157c9881fe6e18\n                    └── 8d08c13010b11393f13eb71333984890\n                    └── 8d9cda458f684cf887e796f9e805754e\n                    └── 8e06c88c985ca5702601e58597d99eba\n                    └── 8e58d6fd5a8f92dcb085bb766697aff7\n                    └── 8edb3e55f5c7f44eb52a29403e195700\n                    └── 8f504864d495b437515af9e55d7c7534\n                    └── 8f783419ff02071360e013a8337e14b2\n                    └── 9002f715ca6cbe9fd1ea86069b60f2b3\n                    └── 9015e4ad72eba92e32b4cc995e0233a7\n                    └── 90394bc1b7cedf68f3927e04af4423fa\n                    └── 90fbc34ab8db1167a5832b5b6e065644\n                    └── 91361f84c92dc91c377c1d883161ec97\n                    └── 91714bc3e379bc2ed4d7aefed9166b3d\n                    └── 93083c19338f6f68ace2100e4b7917aa\n                    └── 9335d2da955dca19643540acf1e77c3f\n                    └── 93a23801859e3468de63292cf8490530\n                    └── 94f61304e0600f53daaa3d6e2a7ebd7f\n                    └── 964798136103883bf4461a450850104a\n                    └── 9692471a30e8affba31f3ddc9d5d2cc9\n                    └── 96fb2c216d8aa00bf05e41db5aca5bc7\n                    └── 97077d411a7ad4edaf78cbe8030f9c4f\n                    └── 97496da2601d01a0d76f832527f8026e\n                    └── 9754e445a41eae02c25696b4d0c2ac5b\n                    └── 9764a581752a862880db285a2586b138\n                    └── 97bcbfbc7009cd8ffddb5290a681a3e2\n                    └── 981c64e8d81bee28547f983fe5336fbd\n                    └── 98e9cf104f087c6568a752c6f55f238b\n                    └── 990da2432c43ba83fc416de0ebd1c0dd\n                    └── 997cf2cfdaad78af663d8d44db31ded8\n                    └── 9ac252439ae920b604a0c3b9da0c6a23\n                    └── 9ad6e1db1200126127c10d6e627f9dec\n                    └── 9ae63142c25deca0b749c73278914250\n                    └── 9b593f833a4436e7a727c9d96912f0a8\n                    └── 9b5b185e8453df8fb669a04e393e9064\n                    └── 9b7dbeb4c04de2c5c3acccc6376b1ab8\n                    └── 9b8ad768ffb409a716bd82083e18bc71\n                    └── 9bcf64f09b130e06d0a93526a16ed3b4\n                    └── 9c205de3b582ec72c27bf28fc8758f7a\n                    └── 9cb2bbcc2b47b9b4d4c6816b5d0d6614\n                    └── 9d42066330547535471382e8da9a428f\n                    └── 9d51172d972565f62272b9c98fbdccc2\n                    └── 9e4b6c91e5d1c0fd6ce268ba3f41f277\n                    └── 9e4bec2cf1b686eca5f9b3b1982801b9\n                    └── 9f670b2c36a26b71dbc9e134d4cd8abf\n                    └── 9f7da934997daa4d6f860146ba6fca98\n                    └── 9fc6cb066c952a7acff87e0fa5e90df6\n                    └── 9fc778238f2fbc4ce2e3dca2db16d1ff\n                    └── 9ffba09c9ae343049ab4a969fb7cb9b7\n                    └── a1f0f7e7af7d58da8552ff3ffe893e32\n                    └── a2596efa3ec82e04dec43f031b8e1e5a\n                    └── a274f83c4a28eba0d7a0215268ab0d55\n                    └── a2c2198da8a7eefaa94db3b5db495928\n                    └── a3309a5b979894777fcf995bde2426a8\n                    └── a35b50ff6a7eef1bb8a5d800dbf3ee77\n                    └── a36bd823a14dc4b510bc9b964e3349e2\n                    └── a3b05c5db20085ec879815671a313e29\n                    └── a3b18088ec360c0da931aa68e4a2c8cd\n                    └── a405c7f132ab6cb6981639d8ef83bd78\n                    └── a4709d2101e8870709a1ef35e51b807b\n                    └── a48c154a23c811942af180da50fcb8f4\n                    └── a4b0ed04cb7b60c96032e14aab0b3d55\n                    └── a4f67e5c02dcbba4b577b585327ef1db\n                    └── a536259baac65177a469ae450a997747\n                    └── a5675354cf9e7f3110baf97c81174bfb\n                    └── a5b42463f7b8b7d49ffc130a6783a76a\n                    └── a60a3738fbe2c4e65c44eff7231a1ab4\n                    └── a67a6835ef806ea938f61032f1947b1e\n                    └── a690df1790105ea7244e175efc758426\n                    └── a6ec6ac8c7ad751bbbf6be83ce6b8e2e\n                    └── a7030cc468afc8c0f5adee1eea5520a5\n                    └── a7e4a6a94e0e69b14996c81be8c6b7ca\n                    └── a889d8fb5175d014b8eceffb94b67f2d\n                    └── a965020360473003fc2636dc12ecb6a9\n                    └── a9817cc1084aafe9d8564e1b15082dea\n                    └── aa392d10948a7755c25adc09c3b7f72c\n                    └── aa88a2d83fee52b68c8a193fecbfd8fb\n                    └── aaef8b1010856d9586cc82207ee14009\n                    └── abf4c1e093fad639c2f22f411c2d427c\n                    └── acb5f432a62d2f0a9826d1c790cf1cc2\n                    └── ace9a5005ca4276aff603e88dd5e8b5b\n                    └── ad6f441bdeac55c392e54d7c346ef673\n                    └── ad8b6438f073072da11a22020e55ffc6\n                    └── add90fc70d0a7e8f704e2dafeb90db29\n                    └── ade95e44fe8d3e7321937ce8039f06fb\n                    └── adef16f2bbb55258d506a2a2f1847a93\n                    └── aeadcb98c505b02cd329d9880489a3ce\n                    └── aecc24377f4e8c47470733b637bfdb61\n                    └── aefb7126fa31210ad886cca3f4075cb0\n                    └── af9eaa91b7eb4339dc4dc83a4ab7e5bf\n                    └── afbf4345cf4327340d72781bbe61feed\n                    └── b06fbde74e9d2de93b8b4d4fdcc9f1a6\n                    └── b10f87767cfc42be77fbd0615946057b\n                    └── b1b380490eb4ac457da3a37f468845d6\n                    └── b1b52037014dbf295f471bb1af2ba974\n                    └── b1f50058c092161c8b6cd7d7a691410c\n                    └── b2e8aa318364c95849c370f99fe2db25\n                    └── b2eb06f593cf30d6e8adaa33f4fd0307\n                    └── b34a1a765cb89aff940af036a1cb8dd3\n                    └── b36949de50f105f8371d11abe7821015\n                    └── b386a95bbd01b6af75a560d68f977f09\n                    └── b45564338a4b4a40f0c256ade01be52a\n                    └── b4b33e7127a28258543d9fd7ec866dc3\n                    └── b4d678672b30b80493080131624e9787\n                    └── b4e187db4ee978d703543a75b9c52846\n                    └── b4e9dfbe2bda789e95ecae09c12a6c56\n                    └── b56beff089673e759b007dd700257363\n                    └── b589c6c648ec9d1e06e1d58894c30253\n                    └── b65136a891f7074252e96d088bb34278\n                    └── b6e3f8ec5023ea6a05b5ef783664befa\n                    └── b714831792bc72a9a70f168b7d5020e4\n                    └── b730d2a028054c3dba09c468d1cfd319\n                    └── b74be3dbe05e1d7c5272c4dab4c561b4\n                    └── b7ff845fd3d92926e479270c7721aacf\n                    └── b84fc32f9f1bbf34b1b404e755d6b9b9\n                    └── b8710474989c94ed5628c438bff3a5aa\n                    └── b8ad51efd69eeeb3b68304a9ff025377\n                    └── b8d6bd1887bcc5d8d212b71baeab1702\n                    └── b91887a16976efee2835778d91323729\n                    └── b963dd2bff3af33a3cf63859d86cfd8e\n                    └── ba1616f204f890661b398d5a7837d5c1\n                    └── ba7204de89c4910dca062d6754c97531\n                    └── bb2f7264eae643ca043c9b129423fa54\n                    └── bb5a4d1b1b4536be946623102a4b219a\n                    └── bbafdebb49e179162a598b432a498dca\n                    └── bcf16467cee87984a0357c2b23c66388\n                    └── bd0642723edf740b9e996090caa411d4\n                    └── bdda4139160b082542b5bf47c5558e15\n                    └── be65bfd884e96b086357b407b182f4bb\n                    └── be9df9f800821e98f851fee8d72414d2\n                    └── beaf9e8104961e8ea3b50c8654367ec0\n                    └── bf1b41a847c0b96c8c4420cc1acce2d3\n                    └── bfa4ed313d76ac97b23f41be9466b744\n                    └── c06421e9552e633684c28ba8f1bb689a\n                    └── c0cf119a6e3f7a773607c5cf42644f44\n                    └── c147a53ac88cf477c0d2435533bacaf7\n                    └── c16e884db3798c941e747b243bb56e4e\n                    └── c18df4b1f8246ac38141893113af2b1f\n                    └── c27341387d6f6cd0eabaf06f87a96928\n                    └── c2cdd362eabb9036473a916a78b5631d\n                    └── c2dc0394087513de5458d1eb490115d3\n                    └── c2f59eb38be0b476b9f2ba4e066a8498\n                    └── c3448beb4ce7ad6109de798c7893bf52\n                    └── c36a48c3d6a8f4b71c801cf27d7495ac\n                    └── c3d21833284f55c723cd1633090de9c0\n                    └── c45e9a1e2b9cdcc0b7829b6b15f3e1a7\n                    └── c4aa6543c2acd05a81e5e6d824b6a02a\n                    └── c4de768f7b20f5259f9273425788589b\n                    └── c513733ecd872278dce55044261f50af\n                    └── c5c5e911d4fa63465625f78edd472b62\n                    └── c629e6c8d4c5ad5afbe1a521e4e11bcc\n                    └── c6c19f45b11281093fb687117b9097f1\n                    └── c6e5daf33c916157c5da8ad6f95663e7\n                    └── c72b02f3d3e55edfeb0b94cb2f5b6a52\n                    └── c77501d469c3bfac2a0567ff97c32553\n                    └── c79af75d8e6e02c034a57d5516f0177a\n                    └── c7c3b616b91a24af33ea0a6826a41e44\n                    └── c807db713b40bbee62f774ae7d3f3fa5\n                    └── c844640e627c1f65819a3bd4c8402628\n                    └── c8b8a4c5752ced467bedddbb5ea300da\n                    └── c9016eb424b367b45290695c274dd159\n                    └── c9e4c7306679f2688c986a290d436e1d\n                    └── ca7d9c82070bfd1a92c71c27162921d4\n                    └── caa98ed4dc7ef2c120632cab8f80dd1a\n                    └── cad260d38f12487c8a4a47a0179d07b8\n                    └── cb94053d426587a3122263bfec3f9379\n                    └── cc16c8af3979c8f57160b17779664460\n                    └── cc97e9e8c28898e1f1eef4bc3b6db598\n                    └── cd5762ed33ea3f02ea7f2c6dc17306cf\n                    └── cd58a0fe14212801b7b471f6049c4d8f\n                    └── ce0370c290a5b3fdb78610b95c30b673\n                    └── ce2a810554316b2d53d0693f4e269c06\n                    └── ce693e23a75c6af6ec9ad027b1ba9b16\n                    └── ce93ece75a4bb37f5270334be2bc2f96\n                    └── cf36f283159059aeb363990652bfdd00\n                    └── cfba12309dd6a98c06bdfd9a43d71768\n                    └── cfe6b59b5eff77683f8c850cd66b25a8\n                    └── d02e1341bf0a047de491754f6c29dc96\n                    └── d0b6510196814940584347e6e33e15fe\n                    └── d164b3c0b6e8d5ac4ab25dd7571089bb\n                    └── d16bfd9b33912c63e373f72f14723bbe\n                    └── d283fa04bf7e3678edbd4409c217707e\n                    └── d292bda4b88a5ee9b7414b284399a0a5\n                    └── d2f3146bb2961f3e6e2fa7bce828e57e\n                    └── d32839d2138ef790cd665524c30eeef3\n                    └── d34c030193e76f2d2bc766f02d1f7dc7\n                    └── d3b8c49f16d241bf2b2090fac219ce73\n                    └── d3d343b0bd35a862f722ce5162ceebd9\n                    └── d469aba9d422459da4bd56c591678118\n                    └── d4d6b90b0d62f249886a2acad017aedd\n                    └── d4e670cbb36fac19c47a6b3c5ebd062a\n                    └── d532f3ce852bf584d0d6bd4c6b7f62db\n                    └── d5e9203a8f88f114e180f9f439d1b8a9\n                    └── d5f274f7a8a03a4992949a964210b28c\n                    └── d609d6028c86327db4b98ede6a05f9a9\n                    └── d6ea0750f212671bedd0be26a9ad2b16\n                    └── d72841e1e11110aeb2552b535dc60afe\n                    └── d75c67c3aa5119c1efdd68c139f6c15d\n                    └── d75d8f2a89d4348caa00d8c4f83a84d8\n                    └── d775d48758037624174926a5c920cd79\n                    └── d7a6a9179643f39f13974306fedad1f6\n                    └── d7bb8aaf0b2f220e2e84775981dbbec0\n                    └── d81133ec436ac1fb1e8ef7770179d7a0\n                    └── d81a2a31ca5d98a102ea116b1edb1bfc\n                    └── d82131718269fa7bf38d50f53f05aa8a\n                    └── d8673ee81d7ae9c830a74530f466ed49\n                    └── d8c2a8360e49a2f1698f229d907b3ea6\n                    └── d8fbaa2a317154d692e4bc60f317070d\n                    └── d9128b6765fb3dea0e0a05bfb5e2e86a\n                    └── d949d317fd79f9aebe1e8768e314391a\n                    └── d9f3ae5f11f948d83e06de7d3dea7cca\n                    └── d9f89c73bc2d55b3c763174c594313e2\n                    └── da5c841f7d26a83de14e7b1ee28a2986\n                    └── db37c0acd485ab138c056e71634eaa04\n                    └── db4b198c34886725ee9d8f7d031d3786\n                    └── dbfbe8d8cc81ea4c02ed4ce21704b6fc\n                    └── dc0cf5b14ae6071d82fea090bbc340dc\n                    └── dc46a67f293fbca4def986f1c860f43b\n                    └── dc84e2225be1f4a7a5af8f3a810a46d5\n                    └── dd06d283b45930c3752385e671259f4c\n                    └── dd1b0aecc32d8315472bf3404832ce6b\n                    └── dddfc2b49b5f5335bb210eac8ca2b3ae\n                    └── ded594183f75142e6a7143095b5e9e47\n                    └── dee4924579114b46b51b3218ed99d224\n                    └── df1239b428e3c885c045ae2d421ad81d\n                    └── df22b652f7fe4084159e42126dfdc523\n                    └── e0695f22d13c4d9cef21555514099586\n                    └── e11ec235c54940052ea618884029f8f7\n                    └── e15c7e8d131a249950bbf914d706787f\n                    └── e1b2f84a0702078d988d10af9c6d2a87\n                    └── e1cf65225cc416655fd699e445786cfa\n                    └── e247fedfc875bc3c7ebaff2bdbbc0232\n                    └── e24d9789a59a32bfbc1d4821a97584b4\n                    └── e286be6a36b32405521eeaa3a776a916\n                    └── e28ab6cc28145414f3d4d59caa9b3e3c\n                    └── e33319e474a770f5376e226a2630a640\n                    └── e4263b044e2c4804d077386d0e4e74b7\n                    └── e48c9e1302d289988379e1f74312b942\n                    └── e4a5965bdfcd57248e9a44997465680b\n                    └── e4b6d00d99440fe278d5a30c1e8ed88d\n                    └── e50278f630ec76bd91984165f33c3630\n                    └── e51718045110da4d6a7279c3436f25b9\n                    └── e5234de82dcb05f4eafea846df97a77a\n                    └── e5b770f9186037bff9b1d5daf9193803\n                    └── e5be9a180ac0b6dab38572d9b743bb84\n                    └── e6e4cf339f4b867145a4472c7bc09de1\n                    └── e786e47645586a55146b4a78c9da2caa\n                    └── e79c57f0081e8075222b7a28e65aae3f\n                    └── e85d9cac79d24ed28c6c6f6505beb7ee\n                    └── e8cb07ff4eb15a32c59aeea1a5ace7e0\n                    └── e947eb829043746bb2de7e512f6e92bb\n                    └── e94889d03cccd395df4eff0f3299d613\n                    └── e9a0ce8330ae7054f24dd8dcc0d97aa4\n                    └── e9c8b5f170c3acf7e550b3d3129e482f\n                    └── e9d39e0c1f179a57ee4b2cfa0f84d679\n                    └── e9df234db212354cf2e2a92f06dcf8c2\n                    └── e9ff79f1ce0fd193dc51c53980d6feb2\n                    └── ea3b536e91989633065cea83da03ba12\n                    └── eb1cc35c449405bd5b48bbd0f58c8324\n                    └── eb4577fe9d70361b7863ee7117462df9\n                    └── eb5ffa0ad06da7bc2d46396b5e4ea36a\n                    └── eba0aafee92dcadd31a2a93f4017a585\n                    └── ebe937e0b0134d4d4ddc424191bb61c6\n                    └── ec44b753b11728f28ebaf49827810edb\n                    └── ece6b6f323d7d3798c9f7c6389b80175\n                    └── ed0c80865a9818b3dc0deb99c0c054ac\n                    └── ed1e4548019e8368ee85d45da7d9bfc1\n                    └── ee4a152aaf1b9192666413e4c7789109\n                    └── ee67728617c6597fc40dbde965ae09eb\n                    └── ee6edddd13f7c9debbeb8deeac651d9e\n                    └── ee793a30629319c52b8f61149245a245\n                    └── ef561cde9c128cfed9a6ac7023a7b770\n                    └── ef6b317f2ed90bdd8ea0210b91970c1d\n                    └── f08a70dc51af704601d1bfd596196f19\n                    └── f10212b17c5af38a5ba14196f97d66d6\n                    └── f10db78737dd0b64b173cd7b0148511d\n                    └── f10e33b0e6005d5f51e998da92963ac6\n                    └── f12115f443f8a96c0f394e206c2ee982\n                    └── f184e7e84f758bc51cd0777f52408c80\n                    └── f1d72d9bdbd9ee49a252b271729e7991\n                    └── f2130460be5ac7b34bed136a16a3d2cc\n                    └── f26d5891202805025bb2dd87db166e31\n                    └── f2f1f55646f37457495bdc21ad6f5b11\n                    └── f2f29401fd11acdcba40d577d5508e8f\n                    └── f2fa4fa8eea861cfe1e7a0e8bc72bb52\n                    └── f31c05561e3e0d3281182c2fdafc4546\n                    └── f321a472a0e150b43200d6a21ff2cfa6\n                    └── f33b5f00ea419e3adbdb82c989700729\n                    └── f3d923e715a9f91d9abc900323cea81b\n                    └── f3ec063f887d9488db3c69939f8d845a\n                    └── f4e1ac42ff05acf999b1d32488d1266e\n                    └── f556f66a0f48bc0a3356f5d7892b0db9\n                    └── f5f87159342952223da15d0fe0813e7c\n                    └── f645c55c8a5b9e75009622c33c60c814\n                    └── f6cdb21de7ece3adb131ba17328dee18\n                    └── f7100484adb3e23f1a7250383352eeda\n                    └── f789ec91ed1e6135b878d552648a2e4a\n                    └── f78c5a6a7b6809b985cd39edf974e51c\n                    └── f78cfb7daeba8267fe0a410e9c6d1987\n                    └── f92adc55217d5f201d5e1c07b1252ab7\n                    └── f97f0c567fccc25cd5b716bf0a787c50\n                    └── f982a1dd990f50ff53aae3c99342475d\n                    └── f989212e92692bce083b698e77bdb1c8\n                    └── f9e50ec63d0472acbcee59f2180030c6\n                    └── fa3d3f7ffbc1770f8ccd2fe105f0de08\n                    └── fac2f2c6cdbf89595711818af38b4966\n                    └── fb47b4e365cc7cba0213746542e6b10b\n                    └── fb4f00f83f441921e922517380bdaaab\n                    └── fbbb24fc395993d409869e85d8d35df1\n                    └── fc87cc0b4f9112bc34abfca647f71be3\n                    └── fd455a6f28858b983258b8884a3266fd\n                    └── fda3d0ad07523ab4d6f842c764a687d6\n                    └── fead63680f9e7e119e9f3c0b4dd82d74\n                    └── feb29b6d05d034bd55d550d55724ca29\n                    └── fef1ea87b4b7650a607ac23d50227685\n                    └── ff083bf9ef0c1b1cb444d9fec4d17e53\n                    └── ff26d2a4877e919cbf10d20d450e2ecf\n                    └── ff5cf371ea630070205890f29fb217be\n                ├── .pio/\n                ├── src/\n                └── platformio.ini\n                    ├── build/\n                    ├── libdeps/\n                        ├── temp_check/\n                        └── project.checksum\n                            ├── FrameworkArduino/\n                            ├── lib160/\n                            ├── lib331/\n                            ├── lib73c/\n                            ├── libdc7/\n                            ├── libf4c/\n                            ├── libf91/\n                            ├── src/\n                            └── .sconsign311.dblite\n                            └── bootloader.bin\n                            └── libFrameworkArduino.a\n                            └── partitions.bin\n                            └── tmp0e0468x1.tmp\n                            └── tmp2vo9vtc7.tmp\n                            └── tmp50w70svs.tmp\n                            └── tmpjwinm38d.tmp\n                                ├── libb64/\n                                └── Esp.cpp.d\n                                └── Esp.cpp.o\n                                └── FirmwareMSC.cpp.d\n                                └── FirmwareMSC.cpp.o\n                                └── FunctionalInterrupt.cpp.d\n                                └── FunctionalInterrupt.cpp.o\n                                └── HWCDC.cpp.d\n                                └── HWCDC.cpp.o\n                                └── HardwareSerial.cpp.d\n                                └── HardwareSerial.cpp.o\n                                └── IPAddress.cpp.d\n                                └── IPAddress.cpp.o\n                                └── IPv6Address.cpp.d\n                                └── IPv6Address.cpp.o\n                                └── MD5Builder.cpp.d\n                                └── MD5Builder.cpp.o\n                                └── Print.cpp.d\n                                └── Print.cpp.o\n                                └── Stream.cpp.d\n                                └── Stream.cpp.o\n                                └── StreamString.cpp.d\n                                └── StreamString.cpp.o\n                                └── Tone.cpp.d\n                                └── Tone.cpp.o\n                                └── USB.cpp.d\n                                └── USB.cpp.o\n                                └── USBCDC.cpp.d\n                                └── USBCDC.cpp.o\n                                └── USBMSC.cpp.d\n                                └── USBMSC.cpp.o\n                                └── WMath.cpp.d\n                                └── WMath.cpp.o\n                                └── WString.cpp.d\n                                └── WString.cpp.o\n                                └── base64.cpp.d\n                                └── base64.cpp.o\n                                └── cbuf.cpp.d\n                                └── cbuf.cpp.o\n                                └── esp32-hal-adc.c.d\n                                └── esp32-hal-adc.c.o\n                                └── esp32-hal-bt.c.d\n                                └── esp32-hal-bt.c.o\n                                └── esp32-hal-cpu.c.d\n                                └── esp32-hal-cpu.c.o\n                                └── esp32-hal-dac.c.d\n                                └── esp32-hal-dac.c.o\n                                └── esp32-hal-gpio.c.d\n                                └── esp32-hal-gpio.c.o\n                                └── esp32-hal-i2c-slave.c.d\n                                └── esp32-hal-i2c-slave.c.o\n                                └── esp32-hal-i2c.c.d\n                                └── esp32-hal-i2c.c.o\n                                └── esp32-hal-ledc.c.d\n                                └── esp32-hal-ledc.c.o\n                                └── esp32-hal-matrix.c.d\n                                └── esp32-hal-matrix.c.o\n                                └── esp32-hal-misc.c.d\n                                └── esp32-hal-misc.c.o\n                                └── esp32-hal-psram.c.d\n                                └── esp32-hal-psram.c.o\n                                └── esp32-hal-rgb-led.c.d\n                                └── esp32-hal-rgb-led.c.o\n                                └── esp32-hal-rmt.c.d\n                                └── esp32-hal-rmt.c.o\n                                └── esp32-hal-sigmadelta.c.d\n                                └── esp32-hal-sigmadelta.c.o\n                                └── esp32-hal-spi.c.d\n                                └── esp32-hal-spi.c.o\n                                └── esp32-hal-time.c.d\n                                └── esp32-hal-time.c.o\n                                └── esp32-hal-timer.c.d\n                                └── esp32-hal-timer.c.o\n                                └── esp32-hal-tinyusb.c.d\n                                └── esp32-hal-tinyusb.c.o\n                                └── esp32-hal-touch.c.d\n                                └── esp32-hal-touch.c.o\n                                └── esp32-hal-uart.c.d\n                                └── esp32-hal-uart.c.o\n                                └── firmware_msc_fat.c.d\n                                └── firmware_msc_fat.c.o\n                                └── main.cpp.d\n                                └── main.cpp.o\n                                └── stdlib_noniso.c.d\n                                └── stdlib_noniso.c.o\n                                └── wiring_pulse.c.d\n                                └── wiring_pulse.c.o\n                                └── wiring_shift.c.d\n                                └── wiring_shift.c.o\n                                    └── cdecode.c.d\n                                    └── cdecode.c.o\n                                    └── cencode.c.d\n                                    └── cencode.c.o\n                                ├── PubSubClient/\n                                └── libPubSubClient.a\n                                    └── PubSubClient.cpp.d\n                                    └── PubSubClient.cpp.o\n                                ├── HTTPClient/\n                                └── libHTTPClient.a\n                                    └── HTTPClient.cpp.d\n                                    └── HTTPClient.cpp.o\n                                ├── WiFi/\n                                └── libWiFi.a\n                                    └── WiFi.cpp.d\n                                    └── WiFi.cpp.o\n                                    └── WiFiAP.cpp.d\n                                    └── WiFiAP.cpp.o\n                                    └── WiFiClient.cpp.d\n                                    └── WiFiClient.cpp.o\n                                    └── WiFiGeneric.cpp.d\n                                    └── WiFiGeneric.cpp.o\n                                    └── WiFiMulti.cpp.d\n                                    └── WiFiMulti.cpp.o\n                                    └── WiFiSTA.cpp.d\n                                    └── WiFiSTA.cpp.o\n                                    └── WiFiScan.cpp.d\n                                    └── WiFiScan.cpp.o\n                                    └── WiFiServer.cpp.d\n                                    └── WiFiServer.cpp.o\n                                    └── WiFiUdp.cpp.d\n                                    └── WiFiUdp.cpp.o\n                                ├── HTTPUpdate/\n                                └── libHTTPUpdate.a\n                                    └── HTTPUpdate.cpp.d\n                                    └── HTTPUpdate.cpp.o\n                                ├── Update/\n                                └── libUpdate.a\n                                    └── HttpsOTAUpdate.cpp.d\n                                    └── HttpsOTAUpdate.cpp.o\n                                    └── Updater.cpp.d\n                                    └── Updater.cpp.o\n                                ├── WiFiClientSecure/\n                                └── libWiFiClientSecure.a\n                                    └── WiFiClientSecure.cpp.d\n                                    └── WiFiClientSecure.cpp.o\n                                    └── esp_crt_bundle.c.d\n                                    └── esp_crt_bundle.c.o\n                                    └── ssl_client.cpp.d\n                                    └── ssl_client.cpp.o\n                                └── main.cpp.d\n                        ├── temp_check/\n                            ├── ArduinoJson/\n                            ├── PubSubClient/\n                            └── integrity.dat\n                                ├── examples/\n                                ├── src/\n                                └── .piopm\n                                └── ArduinoJson.h\n                                └── LICENSE.txt\n                                └── README.md\n                                └── library.json\n                                └── library.properties\n                                    ├── JsonConfigFile/\n                                    ├── JsonFilterExample/\n                                    ├── JsonGeneratorExample/\n                                    ├── JsonHttpClient/\n                                    ├── JsonParserExample/\n                                    ├── JsonServer/\n                                    ├── JsonUdpBeacon/\n                                    ├── MsgPackParser/\n                                    ├── ProgmemExample/\n                                    ├── StringExample/\n                                        └── JsonConfigFile.ino\n                                        └── JsonFilterExample.ino\n                                        └── JsonGeneratorExample.ino\n                                        └── JsonHttpClient.ino\n                                        └── JsonParserExample.ino\n                                        └── JsonServer.ino\n                                        └── JsonUdpBeacon.ino\n                                        └── MsgPackParser.ino\n                                        └── ProgmemExample.ino\n                                        └── StringExample.ino\n                                    ├── ArduinoJson/\n                                    └── ArduinoJson.h\n                                    └── ArduinoJson.hpp\n                                    └── CMakeLists.txt\n                                        ├── Array/\n                                        ├── Collection/\n                                        ├── Deserialization/\n                                        ├── Document/\n                                        ├── Json/\n                                        ├── Memory/\n                                        ├── Misc/\n                                        ├── MsgPack/\n                                        ├── Numbers/\n                                        ├── Object/\n                                        ├── Polyfills/\n                                        ├── Serialization/\n                                        ├── Strings/\n                                        ├── Variant/\n                                        └── Configuration.hpp\n                                        └── Namespace.hpp\n                                        └── compatibility.hpp\n                                        └── version.hpp\n                                            └── ArrayData.hpp\n                                            └── ArrayImpl.hpp\n                                            └── ElementProxy.hpp\n                                            └── JsonArray.hpp\n                                            └── JsonArrayConst.hpp\n                                            └── JsonArrayIterator.hpp\n                                            └── Utilities.hpp\n                                            └── CollectionData.hpp\n                                            └── CollectionImpl.hpp\n                                            ├── Readers/\n                                            └── DeserializationError.hpp\n                                            └── DeserializationOptions.hpp\n                                            └── Filter.hpp\n                                            └── NestingLimit.hpp\n                                            └── Reader.hpp\n                                            └── deserialize.hpp\n                                                └── ArduinoStreamReader.hpp\n                                                └── ArduinoStringReader.hpp\n                                                └── FlashReader.hpp\n                                                └── IteratorReader.hpp\n                                                └── RamReader.hpp\n                                                └── StdStreamReader.hpp\n                                                └── VariantReader.hpp\n                                            └── JsonDocument.hpp\n                                            └── EscapeSequence.hpp\n                                            └── JsonDeserializer.hpp\n                                            └── JsonSerializer.hpp\n                                            └── Latch.hpp\n                                            └── PrettyJsonSerializer.hpp\n                                            └── TextFormatter.hpp\n                                            └── Utf16.hpp\n                                            └── Utf8.hpp\n                                            └── Alignment.hpp\n                                            └── Allocator.hpp\n                                            └── MemoryPool.hpp\n                                            └── MemoryPoolList.hpp\n                                            └── ResourceManager.hpp\n                                            └── ResourceManagerImpl.hpp\n                                            └── StringBuffer.hpp\n                                            └── StringBuilder.hpp\n                                            └── StringNode.hpp\n                                            └── StringPool.hpp\n                                            └── SerializedValue.hpp\n                                            └── MsgPackBinary.hpp\n                                            └── MsgPackDeserializer.hpp\n                                            └── MsgPackExtension.hpp\n                                            └── MsgPackSerializer.hpp\n                                            └── endianness.hpp\n                                            └── ieee754.hpp\n                                            └── FloatParts.hpp\n                                            └── FloatTraits.hpp\n                                            └── JsonFloat.hpp\n                                            └── JsonInteger.hpp\n                                            └── arithmeticCompare.hpp\n                                            └── convertNumber.hpp\n                                            └── parseNumber.hpp\n                                            └── JsonObject.hpp\n                                            └── JsonObjectConst.hpp\n                                            └── JsonObjectIterator.hpp\n                                            └── JsonPair.hpp\n                                            └── MemberProxy.hpp\n                                            └── ObjectData.hpp\n                                            └── ObjectImpl.hpp\n                                            ├── mpl/\n                                            ├── type_traits/\n                                            └── alias_cast.hpp\n                                            └── assert.hpp\n                                            └── attributes.hpp\n                                            └── ctype.hpp\n                                            └── integer.hpp\n                                            └── limits.hpp\n                                            └── math.hpp\n                                            └── pgmspace.hpp\n                                            └── pgmspace_generic.hpp\n                                            └── preprocessor.hpp\n                                            └── type_traits.hpp\n                                            └── utility.hpp\n                                                └── max.hpp\n                                                └── conditional.hpp\n                                                └── decay.hpp\n                                                └── declval.hpp\n                                                └── enable_if.hpp\n                                                └── function_traits.hpp\n                                                └── integral_constant.hpp\n                                                └── is_array.hpp\n                                                └── is_base_of.hpp\n                                                └── is_class.hpp\n                                                └── is_const.hpp\n                                                └── is_convertible.hpp\n                                                └── is_enum.hpp\n                                                └── is_floating_point.hpp\n                                                └── is_integral.hpp\n                                                └── is_pointer.hpp\n                                                └── is_same.hpp\n                                                └── is_signed.hpp\n                                                └── is_unsigned.hpp\n                                                └── make_unsigned.hpp\n                                                └── remove_const.hpp\n                                                └── remove_cv.hpp\n                                                └── remove_reference.hpp\n                                                └── type_identity.hpp\n                                                └── void_t.hpp\n                                            ├── Writers/\n                                            └── CountingDecorator.hpp\n                                            └── Writer.hpp\n                                            └── measure.hpp\n                                            └── serialize.hpp\n                                                └── ArduinoStringWriter.hpp\n                                                └── DummyWriter.hpp\n                                                └── PrintWriter.hpp\n                                                └── StaticStringWriter.hpp\n                                                └── StdStreamWriter.hpp\n                                                └── StdStringWriter.hpp\n                                            ├── Adapters/\n                                            └── IsString.hpp\n                                            └── JsonString.hpp\n                                            └── StringAdapter.hpp\n                                            └── StringAdapters.hpp\n                                            └── StringTraits.hpp\n                                                └── FlashString.hpp\n                                                └── RamString.hpp\n                                                └── StringObject.hpp\n                                            └── Converter.hpp\n                                            └── ConverterImpl.hpp\n                                            └── JsonVariant.hpp\n                                            └── JsonVariantConst.hpp\n                                            └── JsonVariantCopier.hpp\n                                            └── JsonVariantVisitor.hpp\n                                            └── VariantAttorney.hpp\n                                            └── VariantCompare.hpp\n                                            └── VariantContent.hpp\n                                            └── VariantData.hpp\n                                            └── VariantDataVisitor.hpp\n                                            └── VariantImpl.hpp\n                                            └── VariantOperators.hpp\n                                            └── VariantRefBase.hpp\n                                            └── VariantRefBaseImpl.hpp\n                                            └── VariantTag.hpp\n                                            └── VariantTo.hpp\n                                ├── examples/\n                                ├── src/\n                                └── .gitignore\n                                └── .piopm\n                                └── .travis.yml\n                                └── CHANGES.txt\n                                └── LICENSE.txt\n                                └── README.md\n                                └── keywords.txt\n                                └── library.json\n                                └── library.properties\n                                    ├── mqtt_auth/\n                                    ├── mqtt_basic/\n                                    ├── mqtt_esp8266/\n                                    ├── mqtt_large_message/\n                                    ├── mqtt_publish_in_callback/\n                                    ├── mqtt_reconnect_nonblocking/\n                                    ├── mqtt_stream/\n                                        └── mqtt_auth.ino\n                                        └── mqtt_basic.ino\n                                        └── mqtt_esp8266.ino\n                                        └── mqtt_large_message.ino\n                                        └── mqtt_publish_in_callback.ino\n                                        └── mqtt_reconnect_nonblocking.ino\n                                        └── mqtt_stream.ino\n                                    └── PubSubClient.cpp\n                                    └── PubSubClient.h\n                    └── main.cpp\n                ├── .pio/\n                ├── lib/\n                ├── src/\n                └── ota_pusher.py\n                └── platformio.ini\n                └── run_verification.py\n                └── test_result.json\n                    ├── build/\n                    ├── libdeps/\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                        └── project.checksum\n                            ├── FrameworkArduino/\n                            ├── lib067/\n                            ├── lib12a/\n                            ├── lib141/\n                            ├── lib331/\n                            ├── lib6f7/\n                            ├── lib73c/\n                            ├── libdc7/\n                            ├── libf4c/\n                            ├── libf91/\n                            ├── src/\n                            └── bootloader.bin\n                            └── firmware.bin\n                            └── firmware.elf\n                            └── firmware.map\n                            └── libFrameworkArduino.a\n                            └── partitions.bin\n                                ├── libb64/\n                                └── Esp.cpp.o\n                                └── FirmwareMSC.cpp.o\n                                └── FunctionalInterrupt.cpp.o\n                                └── HWCDC.cpp.o\n                                └── HardwareSerial.cpp.o\n                                └── IPAddress.cpp.o\n                                └── IPv6Address.cpp.o\n                                └── MD5Builder.cpp.o\n                                └── Print.cpp.o\n                                └── Stream.cpp.o\n                                └── StreamString.cpp.o\n                                └── Tone.cpp.o\n                                └── USB.cpp.o\n                                └── USBCDC.cpp.o\n                                └── USBMSC.cpp.o\n                                └── WMath.cpp.o\n                                └── WString.cpp.o\n                                └── base64.cpp.o\n                                └── cbuf.cpp.o\n                                └── esp32-hal-adc.c.o\n                                └── esp32-hal-bt.c.o\n                                └── esp32-hal-cpu.c.o\n                                └── esp32-hal-dac.c.o\n                                └── esp32-hal-gpio.c.o\n                                └── esp32-hal-i2c-slave.c.o\n                                └── esp32-hal-i2c.c.o\n                                └── esp32-hal-ledc.c.o\n                                └── esp32-hal-matrix.c.o\n                                └── esp32-hal-misc.c.o\n                                └── esp32-hal-psram.c.o\n                                └── esp32-hal-rgb-led.c.o\n                                └── esp32-hal-rmt.c.o\n                                └── esp32-hal-sigmadelta.c.o\n                                └── esp32-hal-spi.c.o\n                                └── esp32-hal-time.c.o\n                                └── esp32-hal-timer.c.o\n                                └── esp32-hal-tinyusb.c.o\n                                └── esp32-hal-touch.c.o\n                                └── esp32-hal-uart.c.o\n                                └── firmware_msc_fat.c.o\n                                └── main.cpp.o\n                                └── stdlib_noniso.c.o\n                                └── wiring_pulse.c.o\n                                └── wiring_shift.c.o\n                                    └── cdecode.c.o\n                                    └── cencode.c.o\n                                ├── PubSubClient/\n                                    └── PubSubClient.cpp.d\n                                    └── PubSubClient.cpp.o\n                                ├── mqtt_logger/\n                                    └── mqtt_logger.cpp.d\n                                    └── mqtt_logger.cpp.o\n                                ├── tuya_handler/\n                                    └── SHA256.cpp.d\n                                    └── SHA256.cpp.o\n                                    └── tuya_handler.cpp.d\n                                    └── tuya_handler.cpp.o\n                                ├── HTTPClient/\n                                    └── HTTPClient.cpp.o\n                                ├── ota_handler/\n                                    └── ota_handler.cpp.d\n                                    └── ota_handler.cpp.o\n                                ├── WiFi/\n                                    └── WiFi.cpp.o\n                                    └── WiFiAP.cpp.o\n                                    └── WiFiClient.cpp.o\n                                    └── WiFiGeneric.cpp.o\n                                    └── WiFiMulti.cpp.o\n                                    └── WiFiSTA.cpp.o\n                                    └── WiFiScan.cpp.o\n                                    └── WiFiServer.cpp.o\n                                    └── WiFiUdp.cpp.o\n                                ├── HTTPUpdate/\n                                    └── HTTPUpdate.cpp.o\n                                ├── Update/\n                                    └── HttpsOTAUpdate.cpp.o\n                                    └── Updater.cpp.o\n                                ├── WiFiClientSecure/\n                                    └── WiFiClientSecure.cpp.o\n                                    └── esp_crt_bundle.c.o\n                                    └── ssl_client.cpp.o\n                                └── app_main.ino.cpp.d\n                                └── app_main.ino.cpp.o\n                                └── bh1750_driver.cpp.d\n                                └── bh1750_driver.cpp.o\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                            ├── ArduinoJson/\n                            ├── PubSubClient/\n                            └── integrity.dat\n                                ├── examples/\n                                ├── src/\n                                └── .piopm\n                                └── ArduinoJson.h\n                                └── LICENSE.txt\n                                └── README.md\n                                └── library.json\n                                └── library.properties\n                                    ├── JsonConfigFile/\n                                    ├── JsonFilterExample/\n                                    ├── JsonGeneratorExample/\n                                    ├── JsonHttpClient/\n                                    ├── JsonParserExample/\n                                    ├── JsonServer/\n                                    ├── JsonUdpBeacon/\n                                    ├── MsgPackParser/\n                                    ├── ProgmemExample/\n                                    ├── StringExample/\n                                        └── JsonConfigFile.ino\n                                        └── JsonFilterExample.ino\n                                        └── JsonGeneratorExample.ino\n                                        └── JsonHttpClient.ino\n                                        └── JsonParserExample.ino\n                                        └── JsonServer.ino\n                                        └── JsonUdpBeacon.ino\n                                        └── MsgPackParser.ino\n                                        └── ProgmemExample.ino\n                                        └── StringExample.ino\n                                    ├── ArduinoJson/\n                                    └── ArduinoJson.h\n                                    └── ArduinoJson.hpp\n                                    └── CMakeLists.txt\n                                        ├── Array/\n                                        ├── Collection/\n                                        ├── Deserialization/\n                                        ├── Document/\n                                        ├── Json/\n                                        ├── Memory/\n                                        ├── Misc/\n                                        ├── MsgPack/\n                                        ├── Numbers/\n                                        ├── Object/\n                                        ├── Polyfills/\n                                        ├── Serialization/\n                                        ├── Strings/\n                                        ├── Variant/\n                                        └── Configuration.hpp\n                                        └── Namespace.hpp\n                                        └── compatibility.hpp\n                                        └── version.hpp\n                                            └── ArrayData.hpp\n                                            └── ArrayImpl.hpp\n                                            └── ElementProxy.hpp\n                                            └── JsonArray.hpp\n                                            └── JsonArrayConst.hpp\n                                            └── JsonArrayIterator.hpp\n                                            └── Utilities.hpp\n                                            └── CollectionData.hpp\n                                            └── CollectionImpl.hpp\n                                            ├── Readers/\n                                            └── DeserializationError.hpp\n                                            └── DeserializationOptions.hpp\n                                            └── Filter.hpp\n                                            └── NestingLimit.hpp\n                                            └── Reader.hpp\n                                            └── deserialize.hpp\n                                                └── ArduinoStreamReader.hpp\n                                                └── ArduinoStringReader.hpp\n                                                └── FlashReader.hpp\n                                                └── IteratorReader.hpp\n                                                └── RamReader.hpp\n                                                └── StdStreamReader.hpp\n                                                └── VariantReader.hpp\n                                            └── JsonDocument.hpp\n                                            └── EscapeSequence.hpp\n                                            └── JsonDeserializer.hpp\n                                            └── JsonSerializer.hpp\n                                            └── Latch.hpp\n                                            └── PrettyJsonSerializer.hpp\n                                            └── TextFormatter.hpp\n                                            └── Utf16.hpp\n                                            └── Utf8.hpp\n                                            └── Alignment.hpp\n                                            └── Allocator.hpp\n                                            └── MemoryPool.hpp\n                                            └── MemoryPoolList.hpp\n                                            └── ResourceManager.hpp\n                                            └── ResourceManagerImpl.hpp\n                                            └── StringBuffer.hpp\n                                            └── StringBuilder.hpp\n                                            └── StringNode.hpp\n                                            └── StringPool.hpp\n                                            └── SerializedValue.hpp\n                                            └── MsgPackBinary.hpp\n                                            └── MsgPackDeserializer.hpp\n                                            └── MsgPackExtension.hpp\n                                            └── MsgPackSerializer.hpp\n                                            └── endianness.hpp\n                                            └── ieee754.hpp\n                                            └── FloatParts.hpp\n                                            └── FloatTraits.hpp\n                                            └── JsonFloat.hpp\n                                            └── JsonInteger.hpp\n                                            └── arithmeticCompare.hpp\n                                            └── convertNumber.hpp\n                                            └── parseNumber.hpp\n                                            └── JsonObject.hpp\n                                            └── JsonObjectConst.hpp\n                                            └── JsonObjectIterator.hpp\n                                            └── JsonPair.hpp\n                                            └── MemberProxy.hpp\n                                            └── ObjectData.hpp\n                                            └── ObjectImpl.hpp\n                                            ├── mpl/\n                                            ├── type_traits/\n                                            └── alias_cast.hpp\n                                            └── assert.hpp\n                                            └── attributes.hpp\n                                            └── ctype.hpp\n                                            └── integer.hpp\n                                            └── limits.hpp\n                                            └── math.hpp\n                                            └── pgmspace.hpp\n                                            └── pgmspace_generic.hpp\n                                            └── preprocessor.hpp\n                                            └── type_traits.hpp\n                                            └── utility.hpp\n                                                └── max.hpp\n                                                └── conditional.hpp\n                                                └── decay.hpp\n                                                └── declval.hpp\n                                                └── enable_if.hpp\n                                                └── function_traits.hpp\n                                                └── integral_constant.hpp\n                                                └── is_array.hpp\n                                                └── is_base_of.hpp\n                                                └── is_class.hpp\n                                                └── is_const.hpp\n                                                └── is_convertible.hpp\n                                                └── is_enum.hpp\n                                                └── is_floating_point.hpp\n                                                └── is_integral.hpp\n                                                └── is_pointer.hpp\n                                                └── is_same.hpp\n                                                └── is_signed.hpp\n                                                └── is_unsigned.hpp\n                                                └── make_unsigned.hpp\n                                                └── remove_const.hpp\n                                                └── remove_cv.hpp\n                                                └── remove_reference.hpp\n                                                └── type_identity.hpp\n                                                └── void_t.hpp\n                                            ├── Writers/\n                                            └── CountingDecorator.hpp\n                                            └── Writer.hpp\n                                            └── measure.hpp\n                                            └── serialize.hpp\n                                                └── ArduinoStringWriter.hpp\n                                                └── DummyWriter.hpp\n                                                └── PrintWriter.hpp\n                                                └── StaticStringWriter.hpp\n                                                └── StdStreamWriter.hpp\n                                                └── StdStringWriter.hpp\n                                            ├── Adapters/\n                                            └── IsString.hpp\n                                            └── JsonString.hpp\n                                            └── StringAdapter.hpp\n                                            └── StringAdapters.hpp\n                                            └── StringTraits.hpp\n                                                └── FlashString.hpp\n                                                └── RamString.hpp\n                                                └── StringObject.hpp\n                                            └── Converter.hpp\n                                            └── ConverterImpl.hpp\n                                            └── JsonVariant.hpp\n                                            └── JsonVariantConst.hpp\n                                            └── JsonVariantCopier.hpp\n                                            └── JsonVariantVisitor.hpp\n                                            └── VariantAttorney.hpp\n                                            └── VariantCompare.hpp\n                                            └── VariantContent.hpp\n                                            └── VariantData.hpp\n                                            └── VariantDataVisitor.hpp\n                                            └── VariantImpl.hpp\n                                            └── VariantOperators.hpp\n                                            └── VariantRefBase.hpp\n                                            └── VariantRefBaseImpl.hpp\n                                            └── VariantTag.hpp\n                                            └── VariantTo.hpp\n                                ├── examples/\n                                ├── src/\n                                └── .gitignore\n                                └── .piopm\n                                └── .travis.yml\n                                └── CHANGES.txt\n                                └── LICENSE.txt\n                                └── README.md\n                                └── keywords.txt\n                                └── library.json\n                                └── library.properties\n                                    ├── mqtt_auth/\n                                    ├── mqtt_basic/\n                                    ├── mqtt_esp8266/\n                                    ├── mqtt_large_message/\n                                    ├── mqtt_publish_in_callback/\n                                    ├── mqtt_reconnect_nonblocking/\n                                    ├── mqtt_stream/\n                                        └── mqtt_auth.ino\n                                        └── mqtt_basic.ino\n                                        └── mqtt_esp8266.ino\n                                        └── mqtt_large_message.ino\n                                        └── mqtt_publish_in_callback.ino\n                                        └── mqtt_reconnect_nonblocking.ino\n                                        └── mqtt_stream.ino\n                                    └── PubSubClient.cpp\n                                    └── PubSubClient.h\n                    ├── config_manager/\n                    ├── mqtt_logger/\n                    ├── ota_handler/\n                    ├── tuya_handler/\n                        └── config_manager.h\n                        └── mqtt_logger.cpp\n                        └── mqtt_logger.h\n                        └── ota_handler.cpp\n                        └── ota_handler.h\n                        └── SHA256.cpp\n                        └── SHA256.h\n                        └── tuya_handler.cpp\n                        └── tuya_handler.h\n                    └── app_main.ino\n                    └── bh1750_driver.cpp\n                    └── bh1750_driver.h\n                ├── .pio/\n                ├── lib/\n                ├── src/\n                └── platformio.ini\n                └── run_verification.py\n                └── test_result.json\n                    ├── build/\n                    ├── libdeps/\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                        └── project.checksum\n                            ├── FrameworkArduino/\n                            ├── lib331/\n                            ├── lib631/\n                            ├── lib6ee/\n                            ├── lib73c/\n                            ├── libb80/\n                            ├── libcde/\n                            ├── libdc7/\n                            ├── libf4c/\n                            ├── libf91/\n                            ├── src/\n                            └── bootloader.bin\n                            └── firmware.bin\n                            └── firmware.elf\n                            └── firmware.map\n                            └── libFrameworkArduino.a\n                            └── partitions.bin\n                                ├── libb64/\n                                └── Esp.cpp.o\n                                └── FirmwareMSC.cpp.o\n                                └── FunctionalInterrupt.cpp.o\n                                └── HWCDC.cpp.o\n                                └── HardwareSerial.cpp.o\n                                └── IPAddress.cpp.o\n                                └── IPv6Address.cpp.o\n                                └── MD5Builder.cpp.o\n                                └── Print.cpp.o\n                                └── Stream.cpp.o\n                                └── StreamString.cpp.o\n                                └── Tone.cpp.o\n                                └── USB.cpp.o\n                                └── USBCDC.cpp.o\n                                └── USBMSC.cpp.o\n                                └── WMath.cpp.o\n                                └── WString.cpp.o\n                                └── base64.cpp.o\n                                └── cbuf.cpp.o\n                                └── esp32-hal-adc.c.o\n                                └── esp32-hal-bt.c.o\n                                └── esp32-hal-cpu.c.o\n                                └── esp32-hal-dac.c.o\n                                └── esp32-hal-gpio.c.o\n                                └── esp32-hal-i2c-slave.c.o\n                                └── esp32-hal-i2c.c.o\n                                └── esp32-hal-ledc.c.o\n                                └── esp32-hal-matrix.c.o\n                                └── esp32-hal-misc.c.o\n                                └── esp32-hal-psram.c.o\n                                └── esp32-hal-rgb-led.c.o\n                                └── esp32-hal-rmt.c.o\n                                └── esp32-hal-sigmadelta.c.o\n                                └── esp32-hal-spi.c.o\n                                └── esp32-hal-time.c.o\n                                └── esp32-hal-timer.c.o\n                                └── esp32-hal-tinyusb.c.o\n                                └── esp32-hal-touch.c.o\n                                └── esp32-hal-uart.c.o\n                                └── firmware_msc_fat.c.o\n                                └── main.cpp.o\n                                └── stdlib_noniso.c.o\n                                └── wiring_pulse.c.o\n                                └── wiring_shift.c.o\n                                    └── cdecode.c.o\n                                    └── cencode.c.o\n                                ├── HTTPClient/\n                                    └── HTTPClient.cpp.o\n                                ├── PubSubClient/\n                                    └── PubSubClient.cpp.d\n                                    └── PubSubClient.cpp.o\n                                ├── mqtt_logger/\n                                    └── mqtt_logger.cpp.d\n                                    └── mqtt_logger.cpp.o\n                                ├── WiFi/\n                                    └── WiFi.cpp.o\n                                    └── WiFiAP.cpp.o\n                                    └── WiFiClient.cpp.o\n                                    └── WiFiGeneric.cpp.o\n                                    └── WiFiMulti.cpp.o\n                                    └── WiFiSTA.cpp.o\n                                    └── WiFiScan.cpp.o\n                                    └── WiFiServer.cpp.o\n                                    └── WiFiUdp.cpp.o\n                                ├── tuya_handler/\n                                    └── SHA256.cpp.d\n                                    └── SHA256.cpp.o\n                                    └── tuya_handler.cpp.d\n                                    └── tuya_handler.cpp.o\n                                ├── ota_handler/\n                                    └── ota_handler.cpp.d\n                                    └── ota_handler.cpp.o\n                                ├── HTTPUpdate/\n                                    └── HTTPUpdate.cpp.o\n                                ├── Update/\n                                    └── HttpsOTAUpdate.cpp.o\n                                    └── Updater.cpp.o\n                                ├── WiFiClientSecure/\n                                    └── WiFiClientSecure.cpp.o\n                                    └── esp_crt_bundle.c.o\n                                    └── ssl_client.cpp.o\n                                └── app_main.ino.cpp.d\n                                └── app_main.ino.cpp.o\n                                └── bh1750_driver.cpp.d\n                                └── bh1750_driver.cpp.o\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                            ├── ArduinoJson/\n                            ├── PubSubClient/\n                            └── integrity.dat\n                                ├── examples/\n                                ├── src/\n                                └── .piopm\n                                └── ArduinoJson.h\n                                └── LICENSE.txt\n                                └── README.md\n                                └── library.json\n                                └── library.properties\n                                    ├── JsonConfigFile/\n                                    ├── JsonFilterExample/\n                                    ├── JsonGeneratorExample/\n                                    ├── JsonHttpClient/\n                                    ├── JsonParserExample/\n                                    ├── JsonServer/\n                                    ├── JsonUdpBeacon/\n                                    ├── MsgPackParser/\n                                    ├── ProgmemExample/\n                                    ├── StringExample/\n                                        └── JsonConfigFile.ino\n                                        └── JsonFilterExample.ino\n                                        └── JsonGeneratorExample.ino\n                                        └── JsonHttpClient.ino\n                                        └── JsonParserExample.ino\n                                        └── JsonServer.ino\n                                        └── JsonUdpBeacon.ino\n                                        └── MsgPackParser.ino\n                                        └── ProgmemExample.ino\n                                        └── StringExample.ino\n                                    ├── ArduinoJson/\n                                    └── ArduinoJson.h\n                                    └── ArduinoJson.hpp\n                                    └── CMakeLists.txt\n                                        ├── Array/\n                                        ├── Collection/\n                                        ├── Deserialization/\n                                        ├── Document/\n                                        ├── Json/\n                                        ├── Memory/\n                                        ├── Misc/\n                                        ├── MsgPack/\n                                        ├── Numbers/\n                                        ├── Object/\n                                        ├── Polyfills/\n                                        ├── Serialization/\n                                        ├── Strings/\n                                        ├── Variant/\n                                        └── Configuration.hpp\n                                        └── Namespace.hpp\n                                        └── compatibility.hpp\n                                        └── version.hpp\n                                            └── ArrayData.hpp\n                                            └── ArrayImpl.hpp\n                                            └── ElementProxy.hpp\n                                            └── JsonArray.hpp\n                                            └── JsonArrayConst.hpp\n                                            └── JsonArrayIterator.hpp\n                                            └── Utilities.hpp\n                                            └── CollectionData.hpp\n                                            └── CollectionImpl.hpp\n                                            ├── Readers/\n                                            └── DeserializationError.hpp\n                                            └── DeserializationOptions.hpp\n                                            └── Filter.hpp\n                                            └── NestingLimit.hpp\n                                            └── Reader.hpp\n                                            └── deserialize.hpp\n                                                └── ArduinoStreamReader.hpp\n                                                └── ArduinoStringReader.hpp\n                                                └── FlashReader.hpp\n                                                └── IteratorReader.hpp\n                                                └── RamReader.hpp\n                                                └── StdStreamReader.hpp\n                                                └── VariantReader.hpp\n                                            └── JsonDocument.hpp\n                                            └── EscapeSequence.hpp\n                                            └── JsonDeserializer.hpp\n                                            └── JsonSerializer.hpp\n                                            └── Latch.hpp\n                                            └── PrettyJsonSerializer.hpp\n                                            └── TextFormatter.hpp\n                                            └── Utf16.hpp\n                                            └── Utf8.hpp\n                                            └── Alignment.hpp\n                                            └── Allocator.hpp\n                                            └── MemoryPool.hpp\n                                            └── MemoryPoolList.hpp\n                                            └── ResourceManager.hpp\n                                            └── ResourceManagerImpl.hpp\n                                            └── StringBuffer.hpp\n                                            └── StringBuilder.hpp\n                                            └── StringNode.hpp\n                                            └── StringPool.hpp\n                                            └── SerializedValue.hpp\n                                            └── MsgPackBinary.hpp\n                                            └── MsgPackDeserializer.hpp\n                                            └── MsgPackExtension.hpp\n                                            └── MsgPackSerializer.hpp\n                                            └── endianness.hpp\n                                            └── ieee754.hpp\n                                            └── FloatParts.hpp\n                                            └── FloatTraits.hpp\n                                            └── JsonFloat.hpp\n                                            └── JsonInteger.hpp\n                                            └── arithmeticCompare.hpp\n                                            └── convertNumber.hpp\n                                            └── parseNumber.hpp\n                                            └── JsonObject.hpp\n                                            └── JsonObjectConst.hpp\n                                            └── JsonObjectIterator.hpp\n                                            └── JsonPair.hpp\n                                            └── MemberProxy.hpp\n                                            └── ObjectData.hpp\n                                            └── ObjectImpl.hpp\n                                            ├── mpl/\n                                            ├── type_traits/\n                                            └── alias_cast.hpp\n                                            └── assert.hpp\n                                            └── attributes.hpp\n                                            └── ctype.hpp\n                                            └── integer.hpp\n                                            └── limits.hpp\n                                            └── math.hpp\n                                            └── pgmspace.hpp\n                                            └── pgmspace_generic.hpp\n                                            └── preprocessor.hpp\n                                            └── type_traits.hpp\n                                            └── utility.hpp\n                                                └── max.hpp\n                                                └── conditional.hpp\n                                                └── decay.hpp\n                                                └── declval.hpp\n                                                └── enable_if.hpp\n                                                └── function_traits.hpp\n                                                └── integral_constant.hpp\n                                                └── is_array.hpp\n                                                └── is_base_of.hpp\n                                                └── is_class.hpp\n                                                └── is_const.hpp\n                                                └── is_convertible.hpp\n                                                └── is_enum.hpp\n                                                └── is_floating_point.hpp\n                                                └── is_integral.hpp\n                                                └── is_pointer.hpp\n                                                └── is_same.hpp\n                                                └── is_signed.hpp\n                                                └── is_unsigned.hpp\n                                                └── make_unsigned.hpp\n                                                └── remove_const.hpp\n                                                └── remove_cv.hpp\n                                                └── remove_reference.hpp\n                                                └── type_identity.hpp\n                                                └── void_t.hpp\n                                            ├── Writers/\n                                            └── CountingDecorator.hpp\n                                            └── Writer.hpp\n                                            └── measure.hpp\n                                            └── serialize.hpp\n                                                └── ArduinoStringWriter.hpp\n                                                └── DummyWriter.hpp\n                                                └── PrintWriter.hpp\n                                                └── StaticStringWriter.hpp\n                                                └── StdStreamWriter.hpp\n                                                └── StdStringWriter.hpp\n                                            ├── Adapters/\n                                            └── IsString.hpp\n                                            └── JsonString.hpp\n                                            └── StringAdapter.hpp\n                                            └── StringAdapters.hpp\n                                            └── StringTraits.hpp\n                                                └── FlashString.hpp\n                                                └── RamString.hpp\n                                                └── StringObject.hpp\n                                            └── Converter.hpp\n                                            └── ConverterImpl.hpp\n                                            └── JsonVariant.hpp\n                                            └── JsonVariantConst.hpp\n                                            └── JsonVariantCopier.hpp\n                                            └── JsonVariantVisitor.hpp\n                                            └── VariantAttorney.hpp\n                                            └── VariantCompare.hpp\n                                            └── VariantContent.hpp\n                                            └── VariantData.hpp\n                                            └── VariantDataVisitor.hpp\n                                            └── VariantImpl.hpp\n                                            └── VariantOperators.hpp\n                                            └── VariantRefBase.hpp\n                                            └── VariantRefBaseImpl.hpp\n                                            └── VariantTag.hpp\n                                            └── VariantTo.hpp\n                                ├── examples/\n                                ├── src/\n                                └── .gitignore\n                                └── .piopm\n                                └── .travis.yml\n                                └── CHANGES.txt\n                                └── LICENSE.txt\n                                └── README.md\n                                └── keywords.txt\n                                └── library.json\n                                └── library.properties\n                                    ├── mqtt_auth/\n                                    ├── mqtt_basic/\n                                    ├── mqtt_esp8266/\n                                    ├── mqtt_large_message/\n                                    ├── mqtt_publish_in_callback/\n                                    ├── mqtt_reconnect_nonblocking/\n                                    ├── mqtt_stream/\n                                        └── mqtt_auth.ino\n                                        └── mqtt_basic.ino\n                                        └── mqtt_esp8266.ino\n                                        └── mqtt_large_message.ino\n                                        └── mqtt_publish_in_callback.ino\n                                        └── mqtt_reconnect_nonblocking.ino\n                                        └── mqtt_stream.ino\n                                    └── PubSubClient.cpp\n                                    └── PubSubClient.h\n                    ├── config_manager/\n                    ├── mqtt_logger/\n                    ├── ota_handler/\n                    ├── tuya_handler/\n                        └── config_manager.h\n                        └── mqtt_logger.cpp\n                        └── mqtt_logger.h\n                        └── ota_handler.cpp\n                        └── ota_handler.h\n                        └── SHA256.cpp\n                        └── SHA256.h\n                        └── tuya_handler.cpp\n                        └── tuya_handler.h\n                    └── app_main.ino\n                    └── bh1750_driver.cpp\n                    └── bh1750_driver.h\n                ├── .pio/\n                ├── lib/\n                ├── src/\n                └── ota_pusher.py\n                └── platformio.ini\n                └── run_verification.py\n                └── test_result.json\n                    ├── build/\n                    ├── libdeps/\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                        └── project.checksum\n                            ├── FrameworkArduino/\n                            ├── lib2a7/\n                            ├── lib331/\n                            ├── lib59b/\n                            ├── lib73c/\n                            ├── liba61/\n                            ├── libda0/\n                            ├── libdc7/\n                            ├── libf4c/\n                            ├── libf91/\n                            ├── src/\n                            └── bootloader.bin\n                            └── firmware.bin\n                            └── firmware.elf\n                            └── firmware.map\n                            └── libFrameworkArduino.a\n                            └── partitions.bin\n                                ├── libb64/\n                                └── Esp.cpp.o\n                                └── FirmwareMSC.cpp.o\n                                └── FunctionalInterrupt.cpp.o\n                                └── HWCDC.cpp.o\n                                └── HardwareSerial.cpp.o\n                                └── IPAddress.cpp.o\n                                └── IPv6Address.cpp.o\n                                └── MD5Builder.cpp.o\n                                └── Print.cpp.o\n                                └── Stream.cpp.o\n                                └── StreamString.cpp.o\n                                └── Tone.cpp.o\n                                └── USB.cpp.o\n                                └── USBCDC.cpp.o\n                                └── USBMSC.cpp.o\n                                └── WMath.cpp.o\n                                └── WString.cpp.o\n                                └── base64.cpp.o\n                                └── cbuf.cpp.o\n                                └── esp32-hal-adc.c.o\n                                └── esp32-hal-bt.c.o\n                                └── esp32-hal-cpu.c.o\n                                └── esp32-hal-dac.c.o\n                                └── esp32-hal-gpio.c.o\n                                └── esp32-hal-i2c-slave.c.o\n                                └── esp32-hal-i2c.c.o\n                                └── esp32-hal-ledc.c.o\n                                └── esp32-hal-matrix.c.o\n                                └── esp32-hal-misc.c.o\n                                └── esp32-hal-psram.c.o\n                                └── esp32-hal-rgb-led.c.o\n                                └── esp32-hal-rmt.c.o\n                                └── esp32-hal-sigmadelta.c.o\n                                └── esp32-hal-spi.c.o\n                                └── esp32-hal-time.c.o\n                                └── esp32-hal-timer.c.o\n                                └── esp32-hal-tinyusb.c.o\n                                └── esp32-hal-touch.c.o\n                                └── esp32-hal-uart.c.o\n                                └── firmware_msc_fat.c.o\n                                └── main.cpp.o\n                                └── stdlib_noniso.c.o\n                                └── wiring_pulse.c.o\n                                └── wiring_shift.c.o\n                                    └── cdecode.c.o\n                                    └── cencode.c.o\n                                ├── PubSubClient/\n                                    └── PubSubClient.cpp.d\n                                    └── PubSubClient.cpp.o\n                                ├── HTTPClient/\n                                    └── HTTPClient.cpp.o\n                                ├── mqtt_logger/\n                                    └── mqtt_logger.cpp.d\n                                    └── mqtt_logger.cpp.o\n                                ├── WiFi/\n                                    └── WiFi.cpp.o\n                                    └── WiFiAP.cpp.o\n                                    └── WiFiClient.cpp.o\n                                    └── WiFiGeneric.cpp.o\n                                    └── WiFiMulti.cpp.o\n                                    └── WiFiSTA.cpp.o\n                                    └── WiFiScan.cpp.o\n                                    └── WiFiServer.cpp.o\n                                    └── WiFiUdp.cpp.o\n                                ├── tuya_handler/\n                                    └── SHA256.cpp.d\n                                    └── SHA256.cpp.o\n                                    └── tuya_handler.cpp.d\n                                    └── tuya_handler.cpp.o\n                                ├── ota_handler/\n                                    └── ota_handler.cpp.d\n                                    └── ota_handler.cpp.o\n                                ├── HTTPUpdate/\n                                    └── HTTPUpdate.cpp.o\n                                ├── Update/\n                                    └── HttpsOTAUpdate.cpp.o\n                                    └── Updater.cpp.o\n                                ├── WiFiClientSecure/\n                                    └── WiFiClientSecure.cpp.o\n                                    └── esp_crt_bundle.c.o\n                                    └── ssl_client.cpp.o\n                                └── app_main.ino.cpp.d\n                                └── app_main.ino.cpp.o\n                                └── bh1750_driver.cpp.d\n                                └── bh1750_driver.cpp.o\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                            ├── ArduinoJson/\n                            ├── PubSubClient/\n                            └── integrity.dat\n                                ├── examples/\n                                ├── src/\n                                └── .piopm\n                                └── ArduinoJson.h\n                                └── LICENSE.txt\n                                └── README.md\n                                └── library.json\n                                └── library.properties\n                                    ├── JsonConfigFile/\n                                    ├── JsonFilterExample/\n                                    ├── JsonGeneratorExample/\n                                    ├── JsonHttpClient/\n                                    ├── JsonParserExample/\n                                    ├── JsonServer/\n                                    ├── JsonUdpBeacon/\n                                    ├── MsgPackParser/\n                                    ├── ProgmemExample/\n                                    ├── StringExample/\n                                        └── JsonConfigFile.ino\n                                        └── JsonFilterExample.ino\n                                        └── JsonGeneratorExample.ino\n                                        └── JsonHttpClient.ino\n                                        └── JsonParserExample.ino\n                                        └── JsonServer.ino\n                                        └── JsonUdpBeacon.ino\n                                        └── MsgPackParser.ino\n                                        └── ProgmemExample.ino\n                                        └── StringExample.ino\n                                    ├── ArduinoJson/\n                                    └── ArduinoJson.h\n                                    └── ArduinoJson.hpp\n                                    └── CMakeLists.txt\n                                        ├── Array/\n                                        ├── Collection/\n                                        ├── Deserialization/\n                                        ├── Document/\n                                        ├── Json/\n                                        ├── Memory/\n                                        ├── Misc/\n                                        ├── MsgPack/\n                                        ├── Numbers/\n                                        ├── Object/\n                                        ├── Polyfills/\n                                        ├── Serialization/\n                                        ├── Strings/\n                                        ├── Variant/\n                                        └── Configuration.hpp\n                                        └── Namespace.hpp\n                                        └── compatibility.hpp\n                                        └── version.hpp\n                                            └── ArrayData.hpp\n                                            └── ArrayImpl.hpp\n                                            └── ElementProxy.hpp\n                                            └── JsonArray.hpp\n                                            └── JsonArrayConst.hpp\n                                            └── JsonArrayIterator.hpp\n                                            └── Utilities.hpp\n                                            └── CollectionData.hpp\n                                            └── CollectionImpl.hpp\n                                            ├── Readers/\n                                            └── DeserializationError.hpp\n                                            └── DeserializationOptions.hpp\n                                            └── Filter.hpp\n                                            └── NestingLimit.hpp\n                                            └── Reader.hpp\n                                            └── deserialize.hpp\n                                                └── ArduinoStreamReader.hpp\n                                                └── ArduinoStringReader.hpp\n                                                └── FlashReader.hpp\n                                                └── IteratorReader.hpp\n                                                └── RamReader.hpp\n                                                └── StdStreamReader.hpp\n                                                └── VariantReader.hpp\n                                            └── JsonDocument.hpp\n                                            └── EscapeSequence.hpp\n                                            └── JsonDeserializer.hpp\n                                            └── JsonSerializer.hpp\n                                            └── Latch.hpp\n                                            └── PrettyJsonSerializer.hpp\n                                            └── TextFormatter.hpp\n                                            └── Utf16.hpp\n                                            └── Utf8.hpp\n                                            └── Alignment.hpp\n                                            └── Allocator.hpp\n                                            └── MemoryPool.hpp\n                                            └── MemoryPoolList.hpp\n                                            └── ResourceManager.hpp\n                                            └── ResourceManagerImpl.hpp\n                                            └── StringBuffer.hpp\n                                            └── StringBuilder.hpp\n                                            └── StringNode.hpp\n                                            └── StringPool.hpp\n                                            └── SerializedValue.hpp\n                                            └── MsgPackBinary.hpp\n                                            └── MsgPackDeserializer.hpp\n                                            └── MsgPackExtension.hpp\n                                            └── MsgPackSerializer.hpp\n                                            └── endianness.hpp\n                                            └── ieee754.hpp\n                                            └── FloatParts.hpp\n                                            └── FloatTraits.hpp\n                                            └── JsonFloat.hpp\n                                            └── JsonInteger.hpp\n                                            └── arithmeticCompare.hpp\n                                            └── convertNumber.hpp\n                                            └── parseNumber.hpp\n                                            └── JsonObject.hpp\n                                            └── JsonObjectConst.hpp\n                                            └── JsonObjectIterator.hpp\n                                            └── JsonPair.hpp\n                                            └── MemberProxy.hpp\n                                            └── ObjectData.hpp\n                                            └── ObjectImpl.hpp\n                                            ├── mpl/\n                                            ├── type_traits/\n                                            └── alias_cast.hpp\n                                            └── assert.hpp\n                                            └── attributes.hpp\n                                            └── ctype.hpp\n                                            └── integer.hpp\n                                            └── limits.hpp\n                                            └── math.hpp\n                                            └── pgmspace.hpp\n                                            └── pgmspace_generic.hpp\n                                            └── preprocessor.hpp\n                                            └── type_traits.hpp\n                                            └── utility.hpp\n                                                └── max.hpp\n                                                └── conditional.hpp\n                                                └── decay.hpp\n                                                └── declval.hpp\n                                                └── enable_if.hpp\n                                                └── function_traits.hpp\n                                                └── integral_constant.hpp\n                                                └── is_array.hpp\n                                                └── is_base_of.hpp\n                                                └── is_class.hpp\n                                                └── is_const.hpp\n                                                └── is_convertible.hpp\n                                                └── is_enum.hpp\n                                                └── is_floating_point.hpp\n                                                └── is_integral.hpp\n                                                └── is_pointer.hpp\n                                                └── is_same.hpp\n                                                └── is_signed.hpp\n                                                └── is_unsigned.hpp\n                                                └── make_unsigned.hpp\n                                                └── remove_const.hpp\n                                                └── remove_cv.hpp\n                                                └── remove_reference.hpp\n                                                └── type_identity.hpp\n                                                └── void_t.hpp\n                                            ├── Writers/\n                                            └── CountingDecorator.hpp\n                                            └── Writer.hpp\n                                            └── measure.hpp\n                                            └── serialize.hpp\n                                                └── ArduinoStringWriter.hpp\n                                                └── DummyWriter.hpp\n                                                └── PrintWriter.hpp\n                                                └── StaticStringWriter.hpp\n                                                └── StdStreamWriter.hpp\n                                                └── StdStringWriter.hpp\n                                            ├── Adapters/\n                                            └── IsString.hpp\n                                            └── JsonString.hpp\n                                            └── StringAdapter.hpp\n                                            └── StringAdapters.hpp\n                                            └── StringTraits.hpp\n                                                └── FlashString.hpp\n                                                └── RamString.hpp\n                                                └── StringObject.hpp\n                                            └── Converter.hpp\n                                            └── ConverterImpl.hpp\n                                            └── JsonVariant.hpp\n                                            └── JsonVariantConst.hpp\n                                            └── JsonVariantCopier.hpp\n                                            └── JsonVariantVisitor.hpp\n                                            └── VariantAttorney.hpp\n                                            └── VariantCompare.hpp\n                                            └── VariantContent.hpp\n                                            └── VariantData.hpp\n                                            └── VariantDataVisitor.hpp\n                                            └── VariantImpl.hpp\n                                            └── VariantOperators.hpp\n                                            └── VariantRefBase.hpp\n                                            └── VariantRefBaseImpl.hpp\n                                            └── VariantTag.hpp\n                                            └── VariantTo.hpp\n                                ├── examples/\n                                ├── src/\n                                └── .gitignore\n                                └── .piopm\n                                └── .travis.yml\n                                └── CHANGES.txt\n                                └── LICENSE.txt\n                                └── README.md\n                                └── keywords.txt\n                                └── library.json\n                                └── library.properties\n                                    ├── mqtt_auth/\n                                    ├── mqtt_basic/\n                                    ├── mqtt_esp8266/\n                                    ├── mqtt_large_message/\n                                    ├── mqtt_publish_in_callback/\n                                    ├── mqtt_reconnect_nonblocking/\n                                    ├── mqtt_stream/\n                                        └── mqtt_auth.ino\n                                        └── mqtt_basic.ino\n                                        └── mqtt_esp8266.ino\n                                        └── mqtt_large_message.ino\n                                        └── mqtt_publish_in_callback.ino\n                                        └── mqtt_reconnect_nonblocking.ino\n                                        └── mqtt_stream.ino\n                                    └── PubSubClient.cpp\n                                    └── PubSubClient.h\n                    ├── config_manager/\n                    ├── mqtt_logger/\n                    ├── ota_handler/\n                    ├── tuya_handler/\n                        └── config_manager.h\n                        └── mqtt_logger.cpp\n                        └── mqtt_logger.h\n                        └── ota_handler.cpp\n                        └── ota_handler.h\n                        └── SHA256.cpp\n                        └── SHA256.h\n                        └── tuya_handler.cpp\n                        └── tuya_handler.h\n                    └── app_main.ino\n                    └── bh1750_driver.cpp\n                    └── bh1750_driver.h\n                ├── .pio/\n                ├── lib/\n                ├── src/\n                └── ota_pusher.py\n                └── platformio.ini\n                └── run_verification.py\n                └── test_result.json\n                    ├── build/\n                    ├── libdeps/\n                        ├── ab87ee0d-6704-4bc3-9d8d-0513e92ed6ea/\n                        └── project.checksum\n                            ├── FrameworkArduino/\n                            ├── lib331/\n                            ├── lib73c/\n                            ├── libbd9/\n                            ├── libc83/\n                            ├── libdc7/\n                            ├── libf4c/\n                            ├── libf91/\n                            ├── libfa7/\n                            ├── src/\n                            └── bootloader.bin\n                            └── firmware.bin\n                            └── firmware.elf\n                            └── firmware.map\n                            └── libFrameworkArduino.a\n                            └── partitions.bin\n                                ├── libb64/\n                                └── Esp.cpp.o\n                                └── FirmwareMSC.cpp.o\n                                └── FunctionalInterrupt.cpp.o\n                                └── HWCDC.cpp.o\n                                └── HardwareSerial.cpp.o\n                                └── IPAddress.cpp.o\n                                └── IPv6Address.cpp.o\n                                └── MD5Builder.cpp.o\n                                └── Print.cpp.o\n                                └── Stream.cpp.o\n                                └── StreamString.cpp.o\n                                └── Tone.cpp.o\n                                └── USB.cpp.o\n                                └── USBCDC.cpp.o\n                                └── USBMSC.cpp.o\n                                └── WMath.cpp.o\n                                └── WString.cpp.o\n                                └── base64.cpp.o\n                                └── cbuf.cpp.o\n                                └── esp32-hal-adc.c.o\n                                └── esp32-hal-bt.c.o\n                                └── esp32-hal-cpu.c.o\n                                └── esp32-hal-dac.c.o\n                                └── esp32-hal-gpio.c.o\n                                └── esp32-hal-i2c-slave.c.o\n                                └── esp32-hal-i2c.c.o\n                                └── esp32-hal-ledc.c.o\n                                └── esp32-hal-matrix.c.o\n                                └── esp32-hal-misc.c.o\n                                └── esp32-hal-psram.c.o\n                                └── esp32-hal-rgb-led.c.o\n                                └── esp32-hal-rmt.c.o\n                                └── esp32-hal-sigmadelta.c.o\n                                └── esp32-hal-spi.c.o\n                                └── esp32-hal-time.c.o\n                                └── esp32-hal-timer.c.o\n                                └── esp32-hal-tinyusb.c.o\n                                └── esp32-hal-touch.c.o\n                                └── esp32-hal-uart.c.o\n                                └── firmware_msc_fat.c.o\n                                └── main.cpp.o\n                                └── stdlib_noniso.c.o\n                                └── wiring_pulse.c.o\n                                └── wiring_shift.c.o\n                                    └── cdecode.c.o\n                                    └── cencode.c.o\n                                ├── HTTPClient/\n                                    └── HTTPClient.cpp.o\n                                ├── WiFi/\n                                    └── WiFi.cpp.o\n                                    └── WiFiAP.cpp.o\n                                    └── WiFiClient.cpp.o\n                                    └── WiFiGeneric.cpp.o\n                                    └── WiFiMulti.cpp.o\n                                    └── WiFiSTA.cpp.o\n                                    └── WiFiScan.cpp.o\n                                    └── WiFiServer.cpp.o\n                                    └── WiFiUdp.cpp.o\n                                ├── ota_handler/\n                                    └── ota_handler.cpp.d\n                                    └── ota_handler.cpp.o\n                                ├── PubSubClient/\n                                    └── PubSubClient.cpp.d\n                                    └── PubSubClient.cpp.o\n                                ├── HTTPUpdate/\n                                    └── HTTPUpdate.cpp.o\n                                ├── Update/\n                                    └── HttpsOTAUpdate.cpp.o\n                                    └── Updater.cpp.o\n                                ├── WiFiClientSecure/\n                                    └── WiFiClientSecure.cpp.o\n                                    └── esp_crt_bundle.c.o\n                                    └── ssl_client.cpp.o\n                                ├── mqtt_logger/\n                                    └── mqtt_logger.cpp.d\n                                    └── mqtt_logger.cpp.o\n                                └── app_main.ino.cpp.d\n                                └── app_main.ino.cpp.o\n                                └── bh1750_driver.cpp.d\n                                └── bh1750_driver.cpp.o\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                        ├── ab87ee0d-6704-4bc3-9d8d-0513e92ed6ea/\n                            ├── ArduinoJson/\n                            ├── PubSubClient/\n                            └── integrity.dat\n                                ├── examples/\n                                ├── src/\n                                └── .piopm\n                                └── ArduinoJson.h\n                                └── LICENSE.txt\n                                └── README.md\n                                └── library.json\n                                └── library.properties\n                                    ├── JsonConfigFile/\n                                    ├── JsonFilterExample/\n                                    ├── JsonGeneratorExample/\n                                    ├── JsonHttpClient/\n                                    ├── JsonParserExample/\n                                    ├── JsonServer/\n                                    ├── JsonUdpBeacon/\n                                    ├── MsgPackParser/\n                                    ├── ProgmemExample/\n                                    ├── StringExample/\n                                        └── JsonConfigFile.ino\n                                        └── JsonFilterExample.ino\n                                        └── JsonGeneratorExample.ino\n                                        └── JsonHttpClient.ino\n                                        └── JsonParserExample.ino\n                                        └── JsonServer.ino\n                                        └── JsonUdpBeacon.ino\n                                        └── MsgPackParser.ino\n                                        └── ProgmemExample.ino\n                                        └── StringExample.ino\n                                    ├── ArduinoJson/\n                                    └── ArduinoJson.h\n                                    └── ArduinoJson.hpp\n                                    └── CMakeLists.txt\n                                        ├── Array/\n                                        ├── Collection/\n                                        ├── Deserialization/\n                                        ├── Document/\n                                        ├── Json/\n                                        ├── Memory/\n                                        ├── Misc/\n                                        ├── MsgPack/\n                                        ├── Numbers/\n                                        ├── Object/\n                                        ├── Polyfills/\n                                        ├── Serialization/\n                                        ├── Strings/\n                                        ├── Variant/\n                                        └── Configuration.hpp\n                                        └── Namespace.hpp\n                                        └── compatibility.hpp\n                                        └── version.hpp\n                                            └── ArrayData.hpp\n                                            └── ArrayImpl.hpp\n                                            └── ElementProxy.hpp\n                                            └── JsonArray.hpp\n                                            └── JsonArrayConst.hpp\n                                            └── JsonArrayIterator.hpp\n                                            └── Utilities.hpp\n                                            └── CollectionData.hpp\n                                            └── CollectionImpl.hpp\n                                            ├── Readers/\n                                            └── DeserializationError.hpp\n                                            └── DeserializationOptions.hpp\n                                            └── Filter.hpp\n                                            └── NestingLimit.hpp\n                                            └── Reader.hpp\n                                            └── deserialize.hpp\n                                                └── ArduinoStreamReader.hpp\n                                                └── ArduinoStringReader.hpp\n                                                └── FlashReader.hpp\n                                                └── IteratorReader.hpp\n                                                └── RamReader.hpp\n                                                └── StdStreamReader.hpp\n                                                └── VariantReader.hpp\n                                            └── JsonDocument.hpp\n                                            └── EscapeSequence.hpp\n                                            └── JsonDeserializer.hpp\n                                            └── JsonSerializer.hpp\n                                            └── Latch.hpp\n                                            └── PrettyJsonSerializer.hpp\n                                            └── TextFormatter.hpp\n                                            └── Utf16.hpp\n                                            └── Utf8.hpp\n                                            └── Alignment.hpp\n                                            └── Allocator.hpp\n                                            └── MemoryPool.hpp\n                                            └── MemoryPoolList.hpp\n                                            └── ResourceManager.hpp\n                                            └── ResourceManagerImpl.hpp\n                                            └── StringBuffer.hpp\n                                            └── StringBuilder.hpp\n                                            └── StringNode.hpp\n                                            └── StringPool.hpp\n                                            └── SerializedValue.hpp\n                                            └── MsgPackBinary.hpp\n                                            └── MsgPackDeserializer.hpp\n                                            └── MsgPackExtension.hpp\n                                            └── MsgPackSerializer.hpp\n                                            └── endianness.hpp\n                                            └── ieee754.hpp\n                                            └── FloatParts.hpp\n                                            └── FloatTraits.hpp\n                                            └── JsonFloat.hpp\n                                            └── JsonInteger.hpp\n                                            └── arithmeticCompare.hpp\n                                            └── convertNumber.hpp\n                                            └── parseNumber.hpp\n                                            └── JsonObject.hpp\n                                            └── JsonObjectConst.hpp\n                                            └── JsonObjectIterator.hpp\n                                            └── JsonPair.hpp\n                                            └── MemberProxy.hpp\n                                            └── ObjectData.hpp\n                                            └── ObjectImpl.hpp\n                                            ├── mpl/\n                                            ├── type_traits/\n                                            └── alias_cast.hpp\n                                            └── assert.hpp\n                                            └── attributes.hpp\n                                            └── ctype.hpp\n                                            └── integer.hpp\n                                            └── limits.hpp\n                                            └── math.hpp\n                                            └── pgmspace.hpp\n                                            └── pgmspace_generic.hpp\n                                            └── preprocessor.hpp\n                                            └── type_traits.hpp\n                                            └── utility.hpp\n                                                └── max.hpp\n                                                └── conditional.hpp\n                                                └── decay.hpp\n                                                └── declval.hpp\n                                                └── enable_if.hpp\n                                                └── function_traits.hpp\n                                                └── integral_constant.hpp\n                                                └── is_array.hpp\n                                                └── is_base_of.hpp\n                                                └── is_class.hpp\n                                                └── is_const.hpp\n                                                └── is_convertible.hpp\n                                                └── is_enum.hpp\n                                                └── is_floating_point.hpp\n                                                └── is_integral.hpp\n                                                └── is_pointer.hpp\n                                                └── is_same.hpp\n                                                └── is_signed.hpp\n                                                └── is_unsigned.hpp\n                                                └── make_unsigned.hpp\n                                                └── remove_const.hpp\n                                                └── remove_cv.hpp\n                                                └── remove_reference.hpp\n                                                └── type_identity.hpp\n                                                └── void_t.hpp\n                                            ├── Writers/\n                                            └── CountingDecorator.hpp\n                                            └── Writer.hpp\n                                            └── measure.hpp\n                                            └── serialize.hpp\n                                                └── ArduinoStringWriter.hpp\n                                                └── DummyWriter.hpp\n                                                └── PrintWriter.hpp\n                                                └── StaticStringWriter.hpp\n                                                └── StdStreamWriter.hpp\n                                                └── StdStringWriter.hpp\n                                            ├── Adapters/\n                                            └── IsString.hpp\n                                            └── JsonString.hpp\n                                            └── StringAdapter.hpp\n                                            └── StringAdapters.hpp\n                                            └── StringTraits.hpp\n                                                └── FlashString.hpp\n                                                └── RamString.hpp\n                                                └── StringObject.hpp\n                                            └── Converter.hpp\n                                            └── ConverterImpl.hpp\n                                            └── JsonVariant.hpp\n                                            └── JsonVariantConst.hpp\n                                            └── JsonVariantCopier.hpp\n                                            └── JsonVariantVisitor.hpp\n                                            └── VariantAttorney.hpp\n                                            └── VariantCompare.hpp\n                                            └── VariantContent.hpp\n                                            └── VariantData.hpp\n                                            └── VariantDataVisitor.hpp\n                                            └── VariantImpl.hpp\n                                            └── VariantOperators.hpp\n                                            └── VariantRefBase.hpp\n                                            └── VariantRefBaseImpl.hpp\n                                            └── VariantTag.hpp\n                                            └── VariantTo.hpp\n                                ├── examples/\n                                ├── src/\n                                └── .gitignore\n                                └── .piopm\n                                └── .travis.yml\n                                └── CHANGES.txt\n                                └── LICENSE.txt\n                                └── README.md\n                                └── keywords.txt\n                                └── library.json\n                                └── library.properties\n                                    ├── mqtt_auth/\n                                    ├── mqtt_basic/\n                                    ├── mqtt_esp8266/\n                                    ├── mqtt_large_message/\n                                    ├── mqtt_publish_in_callback/\n                                    ├── mqtt_reconnect_nonblocking/\n                                    ├── mqtt_stream/\n                                        └── mqtt_auth.ino\n                                        └── mqtt_basic.ino\n                                        └── mqtt_esp8266.ino\n                                        └── mqtt_large_message.ino\n                                        └── mqtt_publish_in_callback.ino\n                                        └── mqtt_reconnect_nonblocking.ino\n                                        └── mqtt_stream.ino\n                                    └── PubSubClient.cpp\n                                    └── PubSubClient.h\n                            ├── ArduinoJson/\n                            ├── PubSubClient/\n                            └── integrity.dat\n                                ├── examples/\n                                ├── src/\n                                └── .piopm\n                                └── ArduinoJson.h\n                                └── LICENSE.txt\n                                └── README.md\n                                └── library.json\n                                └── library.properties\n                                    ├── JsonConfigFile/\n                                    ├── JsonFilterExample/\n                                    ├── JsonGeneratorExample/\n                                    ├── JsonHttpClient/\n                                    ├── JsonParserExample/\n                                    ├── JsonServer/\n                                    ├── JsonUdpBeacon/\n                                    ├── MsgPackParser/\n                                    ├── ProgmemExample/\n                                    ├── StringExample/\n                                        └── JsonConfigFile.ino\n                                        └── JsonFilterExample.ino\n                                        └── JsonGeneratorExample.ino\n                                        └── JsonHttpClient.ino\n                                        └── JsonParserExample.ino\n                                        └── JsonServer.ino\n                                        └── JsonUdpBeacon.ino\n                                        └── MsgPackParser.ino\n                                        └── ProgmemExample.ino\n                                        └── StringExample.ino\n                                    ├── ArduinoJson/\n                                    └── ArduinoJson.h\n                                    └── ArduinoJson.hpp\n                                    └── CMakeLists.txt\n                                        ├── Array/\n                                        ├── Collection/\n                                        ├── Deserialization/\n                                        ├── Document/\n                                        ├── Json/\n                                        ├── Memory/\n                                        ├── Misc/\n                                        ├── MsgPack/\n                                        ├── Numbers/\n                                        ├── Object/\n                                        ├── Polyfills/\n                                        ├── Serialization/\n                                        ├── Strings/\n                                        ├── Variant/\n                                        └── Configuration.hpp\n                                        └── Namespace.hpp\n                                        └── compatibility.hpp\n                                        └── version.hpp\n                                            └── ArrayData.hpp\n                                            └── ArrayImpl.hpp\n                                            └── ElementProxy.hpp\n                                            └── JsonArray.hpp\n                                            └── JsonArrayConst.hpp\n                                            └── JsonArrayIterator.hpp\n                                            └── Utilities.hpp\n                                            └── CollectionData.hpp\n                                            └── CollectionImpl.hpp\n                                            ├── Readers/\n                                            └── DeserializationError.hpp\n                                            └── DeserializationOptions.hpp\n                                            └── Filter.hpp\n                                            └── NestingLimit.hpp\n                                            └── Reader.hpp\n                                            └── deserialize.hpp\n                                                └── ArduinoStreamReader.hpp\n                                                └── ArduinoStringReader.hpp\n                                                └── FlashReader.hpp\n                                                └── IteratorReader.hpp\n                                                └── RamReader.hpp\n                                                └── StdStreamReader.hpp\n                                                └── VariantReader.hpp\n                                            └── JsonDocument.hpp\n                                            └── EscapeSequence.hpp\n                                            └── JsonDeserializer.hpp\n                                            └── JsonSerializer.hpp\n                                            └── Latch.hpp\n                                            └── PrettyJsonSerializer.hpp\n                                            └── TextFormatter.hpp\n                                            └── Utf16.hpp\n                                            └── Utf8.hpp\n                                            └── Alignment.hpp\n                                            └── Allocator.hpp\n                                            └── MemoryPool.hpp\n                                            └── MemoryPoolList.hpp\n                                            └── ResourceManager.hpp\n                                            └── ResourceManagerImpl.hpp\n                                            └── StringBuffer.hpp\n                                            └── StringBuilder.hpp\n                                            └── StringNode.hpp\n                                            └── StringPool.hpp\n                                            └── SerializedValue.hpp\n                                            └── MsgPackBinary.hpp\n                                            └── MsgPackDeserializer.hpp\n                                            └── MsgPackExtension.hpp\n                                            └── MsgPackSerializer.hpp\n                                            └── endianness.hpp\n                                            └── ieee754.hpp\n                                            └── FloatParts.hpp\n                                            └── FloatTraits.hpp\n                                            └── JsonFloat.hpp\n                                            └── JsonInteger.hpp\n                                            └── arithmeticCompare.hpp\n                                            └── convertNumber.hpp\n                                            └── parseNumber.hpp\n                                            └── JsonObject.hpp\n                                            └── JsonObjectConst.hpp\n                                            └── JsonObjectIterator.hpp\n                                            └── JsonPair.hpp\n                                            └── MemberProxy.hpp\n                                            └── ObjectData.hpp\n                                            └── ObjectImpl.hpp\n                                            ├── mpl/\n                                            ├── type_traits/\n                                            └── alias_cast.hpp\n                                            └── assert.hpp\n                                            └── attributes.hpp\n                                            └── ctype.hpp\n                                            └── integer.hpp\n                                            └── limits.hpp\n                                            └── math.hpp\n                                            └── pgmspace.hpp\n                                            └── pgmspace_generic.hpp\n                                            └── preprocessor.hpp\n                                            └── type_traits.hpp\n                                            └── utility.hpp\n                                                └── max.hpp\n                                                └── conditional.hpp\n                                                └── decay.hpp\n                                                └── declval.hpp\n                                                └── enable_if.hpp\n                                                └── function_traits.hpp\n                                                └── integral_constant.hpp\n                                                └── is_array.hpp\n                                                └── is_base_of.hpp\n                                                └── is_class.hpp\n                                                └── is_const.hpp\n                                                └── is_convertible.hpp\n                                                └── is_enum.hpp\n                                                └── is_floating_point.hpp\n                                                └── is_integral.hpp\n                                                └── is_pointer.hpp\n                                                └── is_same.hpp\n                                                └── is_signed.hpp\n                                                └── is_unsigned.hpp\n                                                └── make_unsigned.hpp\n                                                └── remove_const.hpp\n                                                └── remove_cv.hpp\n                                                └── remove_reference.hpp\n                                                └── type_identity.hpp\n                                                └── void_t.hpp\n                                            ├── Writers/\n                                            └── CountingDecorator.hpp\n                                            └── Writer.hpp\n                                            └── measure.hpp\n                                            └── serialize.hpp\n                                                └── ArduinoStringWriter.hpp\n                                                └── DummyWriter.hpp\n                                                └── PrintWriter.hpp\n                                                └── StaticStringWriter.hpp\n                                                └── StdStreamWriter.hpp\n                                                └── StdStringWriter.hpp\n                                            ├── Adapters/\n                                            └── IsString.hpp\n                                            └── JsonString.hpp\n                                            └── StringAdapter.hpp\n                                            └── StringAdapters.hpp\n                                            └── StringTraits.hpp\n                                                └── FlashString.hpp\n                                                └── RamString.hpp\n                                                └── StringObject.hpp\n                                            └── Converter.hpp\n                                            └── ConverterImpl.hpp\n                                            └── JsonVariant.hpp\n                                            └── JsonVariantConst.hpp\n                                            └── JsonVariantCopier.hpp\n                                            └── JsonVariantVisitor.hpp\n                                            └── VariantAttorney.hpp\n                                            └── VariantCompare.hpp\n                                            └── VariantContent.hpp\n                                            └── VariantData.hpp\n                                            └── VariantDataVisitor.hpp\n                                            └── VariantImpl.hpp\n                                            └── VariantOperators.hpp\n                                            └── VariantRefBase.hpp\n                                            └── VariantRefBaseImpl.hpp\n                                            └── VariantTag.hpp\n                                            └── VariantTo.hpp\n                                ├── examples/\n                                ├── src/\n                                └── .gitignore\n                                └── .piopm\n                                └── .travis.yml\n                                └── CHANGES.txt\n                                └── LICENSE.txt\n                                └── README.md\n                                └── keywords.txt\n                                └── library.json\n                                └── library.properties\n                                    ├── mqtt_auth/\n                                    ├── mqtt_basic/\n                                    ├── mqtt_esp8266/\n                                    ├── mqtt_large_message/\n                                    ├── mqtt_publish_in_callback/\n                                    ├── mqtt_reconnect_nonblocking/\n                                    ├── mqtt_stream/\n                                        └── mqtt_auth.ino\n                                        └── mqtt_basic.ino\n                                        └── mqtt_esp8266.ino\n                                        └── mqtt_large_message.ino\n                                        └── mqtt_publish_in_callback.ino\n                                        └── mqtt_reconnect_nonblocking.ino\n                                        └── mqtt_stream.ino\n                                    └── PubSubClient.cpp\n                                    └── PubSubClient.h\n                    ├── config_manager/\n                    ├── mqtt_logger/\n                    ├── ota_handler/\n                    ├── tuya_handler/\n                        └── config_manager.h\n                        └── mqtt_logger.cpp\n                        └── mqtt_logger.h\n                        └── ota_handler.cpp\n                        └── ota_handler.h\n                        └── SHA256.cpp\n                        └── SHA256.h\n                        └── tuya_handler.cpp\n                        └── tuya_handler.h\n                    └── app_main.ino\n                    └── bh1750_driver.cpp\n                    └── bh1750_driver.h\n                ├── .pio/\n                ├── lib/\n                ├── src/\n                └── ota_pusher.py\n                └── platformio.ini\n                └── run_verification.py\n                └── test_result.json\n                    ├── build/\n                    ├── libdeps/\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                        └── project.checksum\n                            ├── FrameworkArduino/\n                            ├── lib08e/\n                            ├── lib331/\n                            ├── lib4ad/\n                            ├── lib73c/\n                            ├── libd60/\n                            ├── libdc7/\n                            ├── libf2e/\n                            ├── libf4c/\n                            ├── libf91/\n                            ├── src/\n                            └── bootloader.bin\n                            └── firmware.bin\n                            └── firmware.elf\n                            └── firmware.map\n                            └── libFrameworkArduino.a\n                            └── partitions.bin\n                                ├── libb64/\n                                └── Esp.cpp.o\n                                └── FirmwareMSC.cpp.o\n                                └── FunctionalInterrupt.cpp.o\n                                └── HWCDC.cpp.o\n                                └── HardwareSerial.cpp.o\n                                └── IPAddress.cpp.o\n                                └── IPv6Address.cpp.o\n                                └── MD5Builder.cpp.o\n                                └── Print.cpp.o\n                                └── Stream.cpp.o\n                                └── StreamString.cpp.o\n                                └── Tone.cpp.o\n                                └── USB.cpp.o\n                                └── USBCDC.cpp.o\n                                └── USBMSC.cpp.o\n                                └── WMath.cpp.o\n                                └── WString.cpp.o\n                                └── base64.cpp.o\n                                └── cbuf.cpp.o\n                                └── esp32-hal-adc.c.o\n                                └── esp32-hal-bt.c.o\n                                └── esp32-hal-cpu.c.o\n                                └── esp32-hal-dac.c.o\n                                └── esp32-hal-gpio.c.o\n                                └── esp32-hal-i2c-slave.c.o\n                                └── esp32-hal-i2c.c.o\n                                └── esp32-hal-ledc.c.o\n                                └── esp32-hal-matrix.c.o\n                                └── esp32-hal-misc.c.o\n                                └── esp32-hal-psram.c.o\n                                └── esp32-hal-rgb-led.c.o\n                                └── esp32-hal-rmt.c.o\n                                └── esp32-hal-sigmadelta.c.o\n                                └── esp32-hal-spi.c.o\n                                └── esp32-hal-time.c.o\n                                └── esp32-hal-timer.c.o\n                                └── esp32-hal-tinyusb.c.o\n                                └── esp32-hal-touch.c.o\n                                └── esp32-hal-uart.c.o\n                                └── firmware_msc_fat.c.o\n                                └── main.cpp.o\n                                └── stdlib_noniso.c.o\n                                └── wiring_pulse.c.o\n                                └── wiring_shift.c.o\n                                    └── cdecode.c.o\n                                    └── cencode.c.o\n                                ├── PubSubClient/\n                                    └── PubSubClient.cpp.d\n                                    └── PubSubClient.cpp.o\n                                ├── HTTPClient/\n                                    └── HTTPClient.cpp.o\n                                ├── mqtt_logger/\n                                    └── mqtt_logger.cpp.d\n                                    └── mqtt_logger.cpp.o\n                                ├── WiFi/\n                                    └── WiFi.cpp.o\n                                    └── WiFiAP.cpp.o\n                                    └── WiFiClient.cpp.o\n                                    └── WiFiGeneric.cpp.o\n                                    └── WiFiMulti.cpp.o\n                                    └── WiFiSTA.cpp.o\n                                    └── WiFiScan.cpp.o\n                                    └── WiFiServer.cpp.o\n                                    └── WiFiUdp.cpp.o\n                                ├── tuya_handler/\n                                    └── SHA256.cpp.d\n                                    └── SHA256.cpp.o\n                                    └── tuya_handler.cpp.d\n                                    └── tuya_handler.cpp.o\n                                ├── HTTPUpdate/\n                                    └── HTTPUpdate.cpp.o\n                                ├── ota_handler/\n                                    └── ota_handler.cpp.d\n                                    └── ota_handler.cpp.o\n                                ├── Update/\n                                    └── HttpsOTAUpdate.cpp.o\n                                    └── Updater.cpp.o\n                                ├── WiFiClientSecure/\n                                    └── WiFiClientSecure.cpp.o\n                                    └── esp_crt_bundle.c.o\n                                    └── ssl_client.cpp.o\n                                └── app_main.ino.cpp.d\n                                └── app_main.ino.cpp.o\n                                └── bh1750_driver.cpp.d\n                                └── bh1750_driver.cpp.o\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                            ├── ArduinoJson/\n                            ├── PubSubClient/\n                            └── integrity.dat\n                                ├── examples/\n                                ├── src/\n                                └── .piopm\n                                └── ArduinoJson.h\n                                └── LICENSE.txt\n                                └── README.md\n                                └── library.json\n                                └── library.properties\n                                    ├── JsonConfigFile/\n                                    ├── JsonFilterExample/\n                                    ├── JsonGeneratorExample/\n                                    ├── JsonHttpClient/\n                                    ├── JsonParserExample/\n                                    ├── JsonServer/\n                                    ├── JsonUdpBeacon/\n                                    ├── MsgPackParser/\n                                    ├── ProgmemExample/\n                                    ├── StringExample/\n                                        └── JsonConfigFile.ino\n                                        └── JsonFilterExample.ino\n                                        └── JsonGeneratorExample.ino\n                                        └── JsonHttpClient.ino\n                                        └── JsonParserExample.ino\n                                        └── JsonServer.ino\n                                        └── JsonUdpBeacon.ino\n                                        └── MsgPackParser.ino\n                                        └── ProgmemExample.ino\n                                        └── StringExample.ino\n                                    ├── ArduinoJson/\n                                    └── ArduinoJson.h\n                                    └── ArduinoJson.hpp\n                                    └── CMakeLists.txt\n                                        ├── Array/\n                                        ├── Collection/\n                                        ├── Deserialization/\n                                        ├── Document/\n                                        ├── Json/\n                                        ├── Memory/\n                                        ├── Misc/\n                                        ├── MsgPack/\n                                        ├── Numbers/\n                                        ├── Object/\n                                        ├── Polyfills/\n                                        ├── Serialization/\n                                        ├── Strings/\n                                        ├── Variant/\n                                        └── Configuration.hpp\n                                        └── Namespace.hpp\n                                        └── compatibility.hpp\n                                        └── version.hpp\n                                            └── ArrayData.hpp\n                                            └── ArrayImpl.hpp\n                                            └── ElementProxy.hpp\n                                            └── JsonArray.hpp\n                                            └── JsonArrayConst.hpp\n                                            └── JsonArrayIterator.hpp\n                                            └── Utilities.hpp\n                                            └── CollectionData.hpp\n                                            └── CollectionImpl.hpp\n                                            ├── Readers/\n                                            └── DeserializationError.hpp\n                                            └── DeserializationOptions.hpp\n                                            └── Filter.hpp\n                                            └── NestingLimit.hpp\n                                            └── Reader.hpp\n                                            └── deserialize.hpp\n                                                └── ArduinoStreamReader.hpp\n                                                └── ArduinoStringReader.hpp\n                                                └── FlashReader.hpp\n                                                └── IteratorReader.hpp\n                                                └── RamReader.hpp\n                                                └── StdStreamReader.hpp\n                                                └── VariantReader.hpp\n                                            └── JsonDocument.hpp\n                                            └── EscapeSequence.hpp\n                                            └── JsonDeserializer.hpp\n                                            └── JsonSerializer.hpp\n                                            └── Latch.hpp\n                                            └── PrettyJsonSerializer.hpp\n                                            └── TextFormatter.hpp\n                                            └── Utf16.hpp\n                                            └── Utf8.hpp\n                                            └── Alignment.hpp\n                                            └── Allocator.hpp\n                                            └── MemoryPool.hpp\n                                            └── MemoryPoolList.hpp\n                                            └── ResourceManager.hpp\n                                            └── ResourceManagerImpl.hpp\n                                            └── StringBuffer.hpp\n                                            └── StringBuilder.hpp\n                                            └── StringNode.hpp\n                                            └── StringPool.hpp\n                                            └── SerializedValue.hpp\n                                            └── MsgPackBinary.hpp\n                                            └── MsgPackDeserializer.hpp\n                                            └── MsgPackExtension.hpp\n                                            └── MsgPackSerializer.hpp\n                                            └── endianness.hpp\n                                            └── ieee754.hpp\n                                            └── FloatParts.hpp\n                                            └── FloatTraits.hpp\n                                            └── JsonFloat.hpp\n                                            └── JsonInteger.hpp\n                                            └── arithmeticCompare.hpp\n                                            └── convertNumber.hpp\n                                            └── parseNumber.hpp\n                                            └── JsonObject.hpp\n                                            └── JsonObjectConst.hpp\n                                            └── JsonObjectIterator.hpp\n                                            └── JsonPair.hpp\n                                            └── MemberProxy.hpp\n                                            └── ObjectData.hpp\n                                            └── ObjectImpl.hpp\n                                            ├── mpl/\n                                            ├── type_traits/\n                                            └── alias_cast.hpp\n                                            └── assert.hpp\n                                            └── attributes.hpp\n                                            └── ctype.hpp\n                                            └── integer.hpp\n                                            └── limits.hpp\n                                            └── math.hpp\n                                            └── pgmspace.hpp\n                                            └── pgmspace_generic.hpp\n                                            └── preprocessor.hpp\n                                            └── type_traits.hpp\n                                            └── utility.hpp\n                                                └── max.hpp\n                                                └── conditional.hpp\n                                                └── decay.hpp\n                                                └── declval.hpp\n                                                └── enable_if.hpp\n                                                └── function_traits.hpp\n                                                └── integral_constant.hpp\n                                                └── is_array.hpp\n                                                └── is_base_of.hpp\n                                                └── is_class.hpp\n                                                └── is_const.hpp\n                                                └── is_convertible.hpp\n                                                └── is_enum.hpp\n                                                └── is_floating_point.hpp\n                                                └── is_integral.hpp\n                                                └── is_pointer.hpp\n                                                └── is_same.hpp\n                                                └── is_signed.hpp\n                                                └── is_unsigned.hpp\n                                                └── make_unsigned.hpp\n                                                └── remove_const.hpp\n                                                └── remove_cv.hpp\n                                                └── remove_reference.hpp\n                                                └── type_identity.hpp\n                                                └── void_t.hpp\n                                            ├── Writers/\n                                            └── CountingDecorator.hpp\n                                            └── Writer.hpp\n                                            └── measure.hpp\n                                            └── serialize.hpp\n                                                └── ArduinoStringWriter.hpp\n                                                └── DummyWriter.hpp\n                                                └── PrintWriter.hpp\n                                                └── StaticStringWriter.hpp\n                                                └── StdStreamWriter.hpp\n                                                └── StdStringWriter.hpp\n                                            ├── Adapters/\n                                            └── IsString.hpp\n                                            └── JsonString.hpp\n                                            └── StringAdapter.hpp\n                                            └── StringAdapters.hpp\n                                            └── StringTraits.hpp\n                                                └── FlashString.hpp\n                                                └── RamString.hpp\n                                                └── StringObject.hpp\n                                            └── Converter.hpp\n                                            └── ConverterImpl.hpp\n                                            └── JsonVariant.hpp\n                                            └── JsonVariantConst.hpp\n                                            └── JsonVariantCopier.hpp\n                                            └── JsonVariantVisitor.hpp\n                                            └── VariantAttorney.hpp\n                                            └── VariantCompare.hpp\n                                            └── VariantContent.hpp\n                                            └── VariantData.hpp\n                                            └── VariantDataVisitor.hpp\n                                            └── VariantImpl.hpp\n                                            └── VariantOperators.hpp\n                                            └── VariantRefBase.hpp\n                                            └── VariantRefBaseImpl.hpp\n                                            └── VariantTag.hpp\n                                            └── VariantTo.hpp\n                                ├── examples/\n                                ├── src/\n                                └── .gitignore\n                                └── .piopm\n                                └── .travis.yml\n                                └── CHANGES.txt\n                                └── LICENSE.txt\n                                └── README.md\n                                └── keywords.txt\n                                └── library.json\n                                └── library.properties\n                                    ├── mqtt_auth/\n                                    ├── mqtt_basic/\n                                    ├── mqtt_esp8266/\n                                    ├── mqtt_large_message/\n                                    ├── mqtt_publish_in_callback/\n                                    ├── mqtt_reconnect_nonblocking/\n                                    ├── mqtt_stream/\n                                        └── mqtt_auth.ino\n                                        └── mqtt_basic.ino\n                                        └── mqtt_esp8266.ino\n                                        └── mqtt_large_message.ino\n                                        └── mqtt_publish_in_callback.ino\n                                        └── mqtt_reconnect_nonblocking.ino\n                                        └── mqtt_stream.ino\n                                    └── PubSubClient.cpp\n                                    └── PubSubClient.h\n                    ├── config_manager/\n                    ├── mqtt_logger/\n                    ├── ota_handler/\n                    ├── tuya_handler/\n                        └── config_manager.h\n                        └── mqtt_logger.cpp\n                        └── mqtt_logger.h\n                        └── ota_handler.cpp\n                        └── ota_handler.h\n                        └── SHA256.cpp\n                        └── SHA256.h\n                        └── tuya_handler.cpp\n                        └── tuya_handler.h\n                    └── app_main.ino\n                    └── bh1750_driver.cpp\n                    └── bh1750_driver.h\n                ├── .pio/\n                ├── lib/\n                ├── src/\n                └── platformio.ini\n                └── run_verification.py\n                └── test_result.json\n                    ├── build/\n                    ├── libdeps/\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                        └── project.checksum\n                            ├── FrameworkArduino/\n                            ├── lib191/\n                            ├── lib1a6/\n                            ├── lib2c6/\n                            ├── lib331/\n                            ├── lib73c/\n                            ├── libdc7/\n                            ├── libea0/\n                            ├── libf4c/\n                            ├── libf91/\n                            ├── src/\n                            └── bootloader.bin\n                            └── firmware.bin\n                            └── firmware.elf\n                            └── firmware.map\n                            └── libFrameworkArduino.a\n                            └── partitions.bin\n                                ├── libb64/\n                                └── Esp.cpp.o\n                                └── FirmwareMSC.cpp.o\n                                └── FunctionalInterrupt.cpp.o\n                                └── HWCDC.cpp.o\n                                └── HardwareSerial.cpp.o\n                                └── IPAddress.cpp.o\n                                └── IPv6Address.cpp.o\n                                └── MD5Builder.cpp.o\n                                └── Print.cpp.o\n                                └── Stream.cpp.o\n                                └── StreamString.cpp.o\n                                └── Tone.cpp.o\n                                └── USB.cpp.o\n                                └── USBCDC.cpp.o\n                                └── USBMSC.cpp.o\n                                └── WMath.cpp.o\n                                └── WString.cpp.o\n                                └── base64.cpp.o\n                                └── cbuf.cpp.o\n                                └── esp32-hal-adc.c.o\n                                └── esp32-hal-bt.c.o\n                                └── esp32-hal-cpu.c.o\n                                └── esp32-hal-dac.c.o\n                                └── esp32-hal-gpio.c.o\n                                └── esp32-hal-i2c-slave.c.o\n                                └── esp32-hal-i2c.c.o\n                                └── esp32-hal-ledc.c.o\n                                └── esp32-hal-matrix.c.o\n                                └── esp32-hal-misc.c.o\n                                └── esp32-hal-psram.c.o\n                                └── esp32-hal-rgb-led.c.o\n                                └── esp32-hal-rmt.c.o\n                                └── esp32-hal-sigmadelta.c.o\n                                └── esp32-hal-spi.c.o\n                                └── esp32-hal-time.c.o\n                                └── esp32-hal-timer.c.o\n                                └── esp32-hal-tinyusb.c.o\n                                └── esp32-hal-touch.c.o\n                                └── esp32-hal-uart.c.o\n                                └── firmware_msc_fat.c.o\n                                └── main.cpp.o\n                                └── stdlib_noniso.c.o\n                                └── wiring_pulse.c.o\n                                └── wiring_shift.c.o\n                                    └── cdecode.c.o\n                                    └── cencode.c.o\n                                ├── mqtt_logger/\n                                    └── mqtt_logger.cpp.d\n                                    └── mqtt_logger.cpp.o\n                                ├── tuya_handler/\n                                    └── SHA256.cpp.d\n                                    └── SHA256.cpp.o\n                                    └── tuya_handler.cpp.d\n                                    └── tuya_handler.cpp.o\n                                ├── PubSubClient/\n                                    └── PubSubClient.cpp.d\n                                    └── PubSubClient.cpp.o\n                                ├── HTTPClient/\n                                    └── HTTPClient.cpp.o\n                                ├── WiFi/\n                                    └── WiFi.cpp.o\n                                    └── WiFiAP.cpp.o\n                                    └── WiFiClient.cpp.o\n                                    └── WiFiGeneric.cpp.o\n                                    └── WiFiMulti.cpp.o\n                                    └── WiFiSTA.cpp.o\n                                    └── WiFiScan.cpp.o\n                                    └── WiFiServer.cpp.o\n                                    └── WiFiUdp.cpp.o\n                                ├── HTTPUpdate/\n                                    └── HTTPUpdate.cpp.o\n                                ├── ota_handler/\n                                    └── ota_handler.cpp.d\n                                    └── ota_handler.cpp.o\n                                ├── Update/\n                                    └── HttpsOTAUpdate.cpp.o\n                                    └── Updater.cpp.o\n                                ├── WiFiClientSecure/\n                                    └── WiFiClientSecure.cpp.o\n                                    └── esp_crt_bundle.c.o\n                                    └── ssl_client.cpp.o\n                                └── app_main.ino.cpp.d\n                                └── app_main.ino.cpp.o\n                                └── bh1750_driver.cpp.d\n                                └── bh1750_driver.cpp.o\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                            ├── ArduinoJson/\n                            ├── PubSubClient/\n                            └── integrity.dat\n                                ├── examples/\n                                ├── src/\n                                └── .piopm\n                                └── ArduinoJson.h\n                                └── LICENSE.txt\n                                └── README.md\n                                └── library.json\n                                └── library.properties\n                                    ├── JsonConfigFile/\n                                    ├── JsonFilterExample/\n                                    ├── JsonGeneratorExample/\n                                    ├── JsonHttpClient/\n                                    ├── JsonParserExample/\n                                    ├── JsonServer/\n                                    ├── JsonUdpBeacon/\n                                    ├── MsgPackParser/\n                                    ├── ProgmemExample/\n                                    ├── StringExample/\n                                        └── JsonConfigFile.ino\n                                        └── JsonFilterExample.ino\n                                        └── JsonGeneratorExample.ino\n                                        └── JsonHttpClient.ino\n                                        └── JsonParserExample.ino\n                                        └── JsonServer.ino\n                                        └── JsonUdpBeacon.ino\n                                        └── MsgPackParser.ino\n                                        └── ProgmemExample.ino\n                                        └── StringExample.ino\n                                    ├── ArduinoJson/\n                                    └── ArduinoJson.h\n                                    └── ArduinoJson.hpp\n                                    └── CMakeLists.txt\n                                        ├── Array/\n                                        ├── Collection/\n                                        ├── Deserialization/\n                                        ├── Document/\n                                        ├── Json/\n                                        ├── Memory/\n                                        ├── Misc/\n                                        ├── MsgPack/\n                                        ├── Numbers/\n                                        ├── Object/\n                                        ├── Polyfills/\n                                        ├── Serialization/\n                                        ├── Strings/\n                                        ├── Variant/\n                                        └── Configuration.hpp\n                                        └── Namespace.hpp\n                                        └── compatibility.hpp\n                                        └── version.hpp\n                                            └── ArrayData.hpp\n                                            └── ArrayImpl.hpp\n                                            └── ElementProxy.hpp\n                                            └── JsonArray.hpp\n                                            └── JsonArrayConst.hpp\n                                            └── JsonArrayIterator.hpp\n                                            └── Utilities.hpp\n                                            └── CollectionData.hpp\n                                            └── CollectionImpl.hpp\n                                            ├── Readers/\n                                            └── DeserializationError.hpp\n                                            └── DeserializationOptions.hpp\n                                            └── Filter.hpp\n                                            └── NestingLimit.hpp\n                                            └── Reader.hpp\n                                            └── deserialize.hpp\n                                                └── ArduinoStreamReader.hpp\n                                                └── ArduinoStringReader.hpp\n                                                └── FlashReader.hpp\n                                                └── IteratorReader.hpp\n                                                └── RamReader.hpp\n                                                └── StdStreamReader.hpp\n                                                └── VariantReader.hpp\n                                            └── JsonDocument.hpp\n                                            └── EscapeSequence.hpp\n                                            └── JsonDeserializer.hpp\n                                            └── JsonSerializer.hpp\n                                            └── Latch.hpp\n                                            └── PrettyJsonSerializer.hpp\n                                            └── TextFormatter.hpp\n                                            └── Utf16.hpp\n                                            └── Utf8.hpp\n                                            └── Alignment.hpp\n                                            └── Allocator.hpp\n                                            └── MemoryPool.hpp\n                                            └── MemoryPoolList.hpp\n                                            └── ResourceManager.hpp\n                                            └── ResourceManagerImpl.hpp\n                                            └── StringBuffer.hpp\n                                            └── StringBuilder.hpp\n                                            └── StringNode.hpp\n                                            └── StringPool.hpp\n                                            └── SerializedValue.hpp\n                                            └── MsgPackBinary.hpp\n                                            └── MsgPackDeserializer.hpp\n                                            └── MsgPackExtension.hpp\n                                            └── MsgPackSerializer.hpp\n                                            └── endianness.hpp\n                                            └── ieee754.hpp\n                                            └── FloatParts.hpp\n                                            └── FloatTraits.hpp\n                                            └── JsonFloat.hpp\n                                            └── JsonInteger.hpp\n                                            └── arithmeticCompare.hpp\n                                            └── convertNumber.hpp\n                                            └── parseNumber.hpp\n                                            └── JsonObject.hpp\n                                            └── JsonObjectConst.hpp\n                                            └── JsonObjectIterator.hpp\n                                            └── JsonPair.hpp\n                                            └── MemberProxy.hpp\n                                            └── ObjectData.hpp\n                                            └── ObjectImpl.hpp\n                                            ├── mpl/\n                                            ├── type_traits/\n                                            └── alias_cast.hpp\n                                            └── assert.hpp\n                                            └── attributes.hpp\n                                            └── ctype.hpp\n                                            └── integer.hpp\n                                            └── limits.hpp\n                                            └── math.hpp\n                                            └── pgmspace.hpp\n                                            └── pgmspace_generic.hpp\n                                            └── preprocessor.hpp\n                                            └── type_traits.hpp\n                                            └── utility.hpp\n                                                └── max.hpp\n                                                └── conditional.hpp\n                                                └── decay.hpp\n                                                └── declval.hpp\n                                                └── enable_if.hpp\n                                                └── function_traits.hpp\n                                                └── integral_constant.hpp\n                                                └── is_array.hpp\n                                                └── is_base_of.hpp\n                                                └── is_class.hpp\n                                                └── is_const.hpp\n                                                └── is_convertible.hpp\n                                                └── is_enum.hpp\n                                                └── is_floating_point.hpp\n                                                └── is_integral.hpp\n                                                └── is_pointer.hpp\n                                                └── is_same.hpp\n                                                └── is_signed.hpp\n                                                └── is_unsigned.hpp\n                                                └── make_unsigned.hpp\n                                                └── remove_const.hpp\n                                                └── remove_cv.hpp\n                                                └── remove_reference.hpp\n                                                └── type_identity.hpp\n                                                └── void_t.hpp\n                                            ├── Writers/\n                                            └── CountingDecorator.hpp\n                                            └── Writer.hpp\n                                            └── measure.hpp\n                                            └── serialize.hpp\n                                                └── ArduinoStringWriter.hpp\n                                                └── DummyWriter.hpp\n                                                └── PrintWriter.hpp\n                                                └── StaticStringWriter.hpp\n                                                └── StdStreamWriter.hpp\n                                                └── StdStringWriter.hpp\n                                            ├── Adapters/\n                                            └── IsString.hpp\n                                            └── JsonString.hpp\n                                            └── StringAdapter.hpp\n                                            └── StringAdapters.hpp\n                                            └── StringTraits.hpp\n                                                └── FlashString.hpp\n                                                └── RamString.hpp\n                                                └── StringObject.hpp\n                                            └── Converter.hpp\n                                            └── ConverterImpl.hpp\n                                            └── JsonVariant.hpp\n                                            └── JsonVariantConst.hpp\n                                            └── JsonVariantCopier.hpp\n                                            └── JsonVariantVisitor.hpp\n                                            └── VariantAttorney.hpp\n                                            └── VariantCompare.hpp\n                                            └── VariantContent.hpp\n                                            └── VariantData.hpp\n                                            └── VariantDataVisitor.hpp\n                                            └── VariantImpl.hpp\n                                            └── VariantOperators.hpp\n                                            └── VariantRefBase.hpp\n                                            └── VariantRefBaseImpl.hpp\n                                            └── VariantTag.hpp\n                                            └── VariantTo.hpp\n                                ├── examples/\n                                ├── src/\n                                └── .gitignore\n                                └── .piopm\n                                └── .travis.yml\n                                └── CHANGES.txt\n                                └── LICENSE.txt\n                                └── README.md\n                                └── keywords.txt\n                                └── library.json\n                                └── library.properties\n                                    ├── mqtt_auth/\n                                    ├── mqtt_basic/\n                                    ├── mqtt_esp8266/\n                                    ├── mqtt_large_message/\n                                    ├── mqtt_publish_in_callback/\n                                    ├── mqtt_reconnect_nonblocking/\n                                    ├── mqtt_stream/\n                                        └── mqtt_auth.ino\n                                        └── mqtt_basic.ino\n                                        └── mqtt_esp8266.ino\n                                        └── mqtt_large_message.ino\n                                        └── mqtt_publish_in_callback.ino\n                                        └── mqtt_reconnect_nonblocking.ino\n                                        └── mqtt_stream.ino\n                                    └── PubSubClient.cpp\n                                    └── PubSubClient.h\n                    ├── config_manager/\n                    ├── mqtt_logger/\n                    ├── ota_handler/\n                    ├── tuya_handler/\n                        └── config_manager.h\n                        └── mqtt_logger.cpp\n                        └── mqtt_logger.h\n                        └── ota_handler.cpp\n                        └── ota_handler.h\n                        └── SHA256.cpp\n                        └── SHA256.h\n                        └── tuya_handler.cpp\n                        └── tuya_handler.h\n                    └── app_main.ino\n                    └── bh1750_driver.cpp\n                    └── bh1750_driver.h\n                ├── .pio/\n                ├── lib/\n                ├── src/\n                └── ota_pusher.py\n                └── platformio.ini\n                └── run_verification.py\n                └── test_result.json\n                    ├── build/\n                    ├── libdeps/\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                        └── project.checksum\n                            ├── FrameworkArduino/\n                            ├── lib2f9/\n                            ├── lib331/\n                            ├── lib411/\n                            ├── lib73c/\n                            ├── liba40/\n                            ├── libdc7/\n                            ├── libf3a/\n                            ├── libf4c/\n                            ├── libf91/\n                            ├── src/\n                            └── bootloader.bin\n                            └── firmware.bin\n                            └── firmware.elf\n                            └── firmware.map\n                            └── libFrameworkArduino.a\n                            └── partitions.bin\n                            └── tmpnflyd5jl.tmp\n                                ├── libb64/\n                                └── Esp.cpp.o\n                                └── FirmwareMSC.cpp.o\n                                └── FunctionalInterrupt.cpp.o\n                                └── HWCDC.cpp.o\n                                └── HardwareSerial.cpp.o\n                                └── IPAddress.cpp.o\n                                └── IPv6Address.cpp.o\n                                └── MD5Builder.cpp.o\n                                └── Print.cpp.o\n                                └── Stream.cpp.o\n                                └── StreamString.cpp.o\n                                └── Tone.cpp.o\n                                └── USB.cpp.o\n                                └── USBCDC.cpp.o\n                                └── USBMSC.cpp.o\n                                └── WMath.cpp.o\n                                └── WString.cpp.o\n                                └── base64.cpp.o\n                                └── cbuf.cpp.o\n                                └── esp32-hal-adc.c.o\n                                └── esp32-hal-bt.c.o\n                                └── esp32-hal-cpu.c.o\n                                └── esp32-hal-dac.c.o\n                                └── esp32-hal-gpio.c.o\n                                └── esp32-hal-i2c-slave.c.o\n                                └── esp32-hal-i2c.c.o\n                                └── esp32-hal-ledc.c.o\n                                └── esp32-hal-matrix.c.o\n                                └── esp32-hal-misc.c.o\n                                └── esp32-hal-psram.c.o\n                                └── esp32-hal-rgb-led.c.o\n                                └── esp32-hal-rmt.c.o\n                                └── esp32-hal-sigmadelta.c.o\n                                └── esp32-hal-spi.c.o\n                                └── esp32-hal-time.c.o\n                                └── esp32-hal-timer.c.o\n                                └── esp32-hal-tinyusb.c.o\n                                └── esp32-hal-touch.c.o\n                                └── esp32-hal-uart.c.o\n                                └── firmware_msc_fat.c.o\n                                └── main.cpp.o\n                                └── stdlib_noniso.c.o\n                                └── wiring_pulse.c.o\n                                └── wiring_shift.c.o\n                                    └── cdecode.c.o\n                                    └── cencode.c.o\n                                ├── tuya_handler/\n                                    └── SHA256.cpp.d\n                                    └── SHA256.cpp.o\n                                    └── tuya_handler.cpp.d\n                                    └── tuya_handler.cpp.o\n                                ├── HTTPClient/\n                                    └── HTTPClient.cpp.o\n                                ├── ota_handler/\n                                    └── ota_handler.cpp.d\n                                    └── ota_handler.cpp.o\n                                ├── WiFi/\n                                    └── WiFi.cpp.o\n                                    └── WiFiAP.cpp.o\n                                    └── WiFiClient.cpp.o\n                                    └── WiFiGeneric.cpp.o\n                                    └── WiFiMulti.cpp.o\n                                    └── WiFiSTA.cpp.o\n                                    └── WiFiScan.cpp.o\n                                    └── WiFiServer.cpp.o\n                                    └── WiFiUdp.cpp.o\n                                ├── PubSubClient/\n                                    └── PubSubClient.cpp.d\n                                    └── PubSubClient.cpp.o\n                                ├── HTTPUpdate/\n                                    └── HTTPUpdate.cpp.o\n                                ├── mqtt_logger/\n                                    └── mqtt_logger.cpp.d\n                                    └── mqtt_logger.cpp.o\n                                ├── Update/\n                                    └── HttpsOTAUpdate.cpp.o\n                                    └── Updater.cpp.o\n                                ├── WiFiClientSecure/\n                                    └── WiFiClientSecure.cpp.o\n                                    └── esp_crt_bundle.c.o\n                                    └── ssl_client.cpp.o\n                                └── app_main.ino.cpp.d\n                                └── bh1750_driver.cpp.d\n                                └── bh1750_driver.cpp.o\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                            ├── ArduinoJson/\n                            ├── PubSubClient/\n                            └── integrity.dat\n                                ├── examples/\n                                ├── src/\n                                └── .piopm\n                                └── ArduinoJson.h\n                                └── LICENSE.txt\n                                └── README.md\n                                └── library.json\n                                └── library.properties\n                                    ├── JsonConfigFile/\n                                    ├── JsonFilterExample/\n                                    ├── JsonGeneratorExample/\n                                    ├── JsonHttpClient/\n                                    ├── JsonParserExample/\n                                    ├── JsonServer/\n                                    ├── JsonUdpBeacon/\n                                    ├── MsgPackParser/\n                                    ├── ProgmemExample/\n                                    ├── StringExample/\n                                        └── JsonConfigFile.ino\n                                        └── JsonFilterExample.ino\n                                        └── JsonGeneratorExample.ino\n                                        └── JsonHttpClient.ino\n                                        └── JsonParserExample.ino\n                                        └── JsonServer.ino\n                                        └── JsonUdpBeacon.ino\n                                        └── MsgPackParser.ino\n                                        └── ProgmemExample.ino\n                                        └── StringExample.ino\n                                    ├── ArduinoJson/\n                                    └── ArduinoJson.h\n                                    └── ArduinoJson.hpp\n                                    └── CMakeLists.txt\n                                        ├── Array/\n                                        ├── Collection/\n                                        ├── Deserialization/\n                                        ├── Document/\n                                        ├── Json/\n                                        ├── Memory/\n                                        ├── Misc/\n                                        ├── MsgPack/\n                                        ├── Numbers/\n                                        ├── Object/\n                                        ├── Polyfills/\n                                        ├── Serialization/\n                                        ├── Strings/\n                                        ├── Variant/\n                                        └── Configuration.hpp\n                                        └── Namespace.hpp\n                                        └── compatibility.hpp\n                                        └── version.hpp\n                                            └── ArrayData.hpp\n                                            └── ArrayImpl.hpp\n                                            └── ElementProxy.hpp\n                                            └── JsonArray.hpp\n                                            └── JsonArrayConst.hpp\n                                            └── JsonArrayIterator.hpp\n                                            └── Utilities.hpp\n                                            └── CollectionData.hpp\n                                            └── CollectionImpl.hpp\n                                            ├── Readers/\n                                            └── DeserializationError.hpp\n                                            └── DeserializationOptions.hpp\n                                            └── Filter.hpp\n                                            └── NestingLimit.hpp\n                                            └── Reader.hpp\n                                            └── deserialize.hpp\n                                                └── ArduinoStreamReader.hpp\n                                                └── ArduinoStringReader.hpp\n                                                └── FlashReader.hpp\n                                                └── IteratorReader.hpp\n                                                └── RamReader.hpp\n                                                └── StdStreamReader.hpp\n                                                └── VariantReader.hpp\n                                            └── JsonDocument.hpp\n                                            └── EscapeSequence.hpp\n                                            └── JsonDeserializer.hpp\n                                            └── JsonSerializer.hpp\n                                            └── Latch.hpp\n                                            └── PrettyJsonSerializer.hpp\n                                            └── TextFormatter.hpp\n                                            └── Utf16.hpp\n                                            └── Utf8.hpp\n                                            └── Alignment.hpp\n                                            └── Allocator.hpp\n                                            └── MemoryPool.hpp\n                                            └── MemoryPoolList.hpp\n                                            └── ResourceManager.hpp\n                                            └── ResourceManagerImpl.hpp\n                                            └── StringBuffer.hpp\n                                            └── StringBuilder.hpp\n                                            └── StringNode.hpp\n                                            └── StringPool.hpp\n                                            └── SerializedValue.hpp\n                                            └── MsgPackBinary.hpp\n                                            └── MsgPackDeserializer.hpp\n                                            └── MsgPackExtension.hpp\n                                            └── MsgPackSerializer.hpp\n                                            └── endianness.hpp\n                                            └── ieee754.hpp\n                                            └── FloatParts.hpp\n                                            └── FloatTraits.hpp\n                                            └── JsonFloat.hpp\n                                            └── JsonInteger.hpp\n                                            └── arithmeticCompare.hpp\n                                            └── convertNumber.hpp\n                                            └── parseNumber.hpp\n                                            └── JsonObject.hpp\n                                            └── JsonObjectConst.hpp\n                                            └── JsonObjectIterator.hpp\n                                            └── JsonPair.hpp\n                                            └── MemberProxy.hpp\n                                            └── ObjectData.hpp\n                                            └── ObjectImpl.hpp\n                                            ├── mpl/\n                                            ├── type_traits/\n                                            └── alias_cast.hpp\n                                            └── assert.hpp\n                                            └── attributes.hpp\n                                            └── ctype.hpp\n                                            └── integer.hpp\n                                            └── limits.hpp\n                                            └── math.hpp\n                                            └── pgmspace.hpp\n                                            └── pgmspace_generic.hpp\n                                            └── preprocessor.hpp\n                                            └── type_traits.hpp\n                                            └── utility.hpp\n                                                └── max.hpp\n                                                └── conditional.hpp\n                                                └── decay.hpp\n                                                └── declval.hpp\n                                                └── enable_if.hpp\n                                                └── function_traits.hpp\n                                                └── integral_constant.hpp\n                                                └── is_array.hpp\n                                                └── is_base_of.hpp\n                                                └── is_class.hpp\n                                                └── is_const.hpp\n                                                └── is_convertible.hpp\n                                                └── is_enum.hpp\n                                                └── is_floating_point.hpp\n                                                └── is_integral.hpp\n                                                └── is_pointer.hpp\n                                                └── is_same.hpp\n                                                └── is_signed.hpp\n                                                └── is_unsigned.hpp\n                                                └── make_unsigned.hpp\n                                                └── remove_const.hpp\n                                                └── remove_cv.hpp\n                                                └── remove_reference.hpp\n                                                └── type_identity.hpp\n                                                └── void_t.hpp\n                                            ├── Writers/\n                                            └── CountingDecorator.hpp\n                                            └── Writer.hpp\n                                            └── measure.hpp\n                                            └── serialize.hpp\n                                                └── ArduinoStringWriter.hpp\n                                                └── DummyWriter.hpp\n                                                └── PrintWriter.hpp\n                                                └── StaticStringWriter.hpp\n                                                └── StdStreamWriter.hpp\n                                                └── StdStringWriter.hpp\n                                            ├── Adapters/\n                                            └── IsString.hpp\n                                            └── JsonString.hpp\n                                            └── StringAdapter.hpp\n                                            └── StringAdapters.hpp\n                                            └── StringTraits.hpp\n                                                └── FlashString.hpp\n                                                └── RamString.hpp\n                                                └── StringObject.hpp\n                                            └── Converter.hpp\n                                            └── ConverterImpl.hpp\n                                            └── JsonVariant.hpp\n                                            └── JsonVariantConst.hpp\n                                            └── JsonVariantCopier.hpp\n                                            └── JsonVariantVisitor.hpp\n                                            └── VariantAttorney.hpp\n                                            └── VariantCompare.hpp\n                                            └── VariantContent.hpp\n                                            └── VariantData.hpp\n                                            └── VariantDataVisitor.hpp\n                                            └── VariantImpl.hpp\n                                            └── VariantOperators.hpp\n                                            └── VariantRefBase.hpp\n                                            └── VariantRefBaseImpl.hpp\n                                            └── VariantTag.hpp\n                                            └── VariantTo.hpp\n                                ├── examples/\n                                ├── src/\n                                └── .gitignore\n                                └── .piopm\n                                └── .travis.yml\n                                └── CHANGES.txt\n                                └── LICENSE.txt\n                                └── README.md\n                                └── keywords.txt\n                                └── library.json\n                                └── library.properties\n                                    ├── mqtt_auth/\n                                    ├── mqtt_basic/\n                                    ├── mqtt_esp8266/\n                                    ├── mqtt_large_message/\n                                    ├── mqtt_publish_in_callback/\n                                    ├── mqtt_reconnect_nonblocking/\n                                    ├── mqtt_stream/\n                                        └── mqtt_auth.ino\n                                        └── mqtt_basic.ino\n                                        └── mqtt_esp8266.ino\n                                        └── mqtt_large_message.ino\n                                        └── mqtt_publish_in_callback.ino\n                                        └── mqtt_reconnect_nonblocking.ino\n                                        └── mqtt_stream.ino\n                                    └── PubSubClient.cpp\n                                    └── PubSubClient.h\n                    ├── config_manager/\n                    ├── mqtt_logger/\n                    ├── ota_handler/\n                    ├── tuya_handler/\n                        └── config_manager.h\n                        └── mqtt_logger.cpp\n                        └── mqtt_logger.h\n                        └── ota_handler.cpp\n                        └── ota_handler.h\n                        └── SHA256.cpp\n                        └── SHA256.h\n                        └── tuya_handler.cpp\n                        └── tuya_handler.h\n                    └── app_main.ino\n                    └── bh1750_driver.cpp\n                    └── bh1750_driver.h\n                ├── .pio/\n                ├── lib/\n                ├── src/\n                └── ota_pusher.py\n                └── platformio.ini\n                └── run_verification.py\n                └── test_result.json\n                    ├── build/\n                    ├── libdeps/\n                        ├── ab87ee0d-6704-4bc3-9d8d-0513e92ed6ea/\n                        └── project.checksum\n                            ├── FrameworkArduino/\n                            ├── lib331/\n                            ├── lib73c/\n                            ├── lib76a/\n                            ├── libab0/\n                            ├── libbc4/\n                            ├── libdc7/\n                            ├── libf4c/\n                            ├── libf91/\n                            ├── src/\n                            └── bootloader.bin\n                            └── firmware.bin\n                            └── firmware.elf\n                            └── firmware.map\n                            └── libFrameworkArduino.a\n                            └── partitions.bin\n                                ├── libb64/\n                                └── Esp.cpp.o\n                                └── FirmwareMSC.cpp.o\n                                └── FunctionalInterrupt.cpp.o\n                                └── HWCDC.cpp.o\n                                └── HardwareSerial.cpp.o\n                                └── IPAddress.cpp.o\n                                └── IPv6Address.cpp.o\n                                └── MD5Builder.cpp.o\n                                └── Print.cpp.o\n                                └── Stream.cpp.o\n                                └── StreamString.cpp.o\n                                └── Tone.cpp.o\n                                └── USB.cpp.o\n                                └── USBCDC.cpp.o\n                                └── USBMSC.cpp.o\n                                └── WMath.cpp.o\n                                └── WString.cpp.o\n                                └── base64.cpp.o\n                                └── cbuf.cpp.o\n                                └── esp32-hal-adc.c.o\n                                └── esp32-hal-bt.c.o\n                                └── esp32-hal-cpu.c.o\n                                └── esp32-hal-dac.c.o\n                                └── esp32-hal-gpio.c.o\n                                └── esp32-hal-i2c-slave.c.o\n                                └── esp32-hal-i2c.c.o\n                                └── esp32-hal-ledc.c.o\n                                └── esp32-hal-matrix.c.o\n                                └── esp32-hal-misc.c.o\n                                └── esp32-hal-psram.c.o\n                                └── esp32-hal-rgb-led.c.o\n                                └── esp32-hal-rmt.c.o\n                                └── esp32-hal-sigmadelta.c.o\n                                └── esp32-hal-spi.c.o\n                                └── esp32-hal-time.c.o\n                                └── esp32-hal-timer.c.o\n                                └── esp32-hal-tinyusb.c.o\n                                └── esp32-hal-touch.c.o\n                                └── esp32-hal-uart.c.o\n                                └── firmware_msc_fat.c.o\n                                └── main.cpp.o\n                                └── stdlib_noniso.c.o\n                                └── wiring_pulse.c.o\n                                └── wiring_shift.c.o\n                                    └── cdecode.c.o\n                                    └── cencode.c.o\n                                ├── HTTPClient/\n                                    └── HTTPClient.cpp.o\n                                ├── WiFi/\n                                    └── WiFi.cpp.o\n                                    └── WiFiAP.cpp.o\n                                    └── WiFiClient.cpp.o\n                                    └── WiFiGeneric.cpp.o\n                                    └── WiFiMulti.cpp.o\n                                    └── WiFiSTA.cpp.o\n                                    └── WiFiScan.cpp.o\n                                    └── WiFiServer.cpp.o\n                                    └── WiFiUdp.cpp.o\n                                ├── mqtt_logger/\n                                    └── mqtt_logger.cpp.d\n                                    └── mqtt_logger.cpp.o\n                                ├── ota_handler/\n                                    └── ota_handler.cpp.d\n                                    └── ota_handler.cpp.o\n                                ├── PubSubClient/\n                                    └── PubSubClient.cpp.d\n                                    └── PubSubClient.cpp.o\n                                ├── HTTPUpdate/\n                                    └── HTTPUpdate.cpp.o\n                                ├── Update/\n                                    └── HttpsOTAUpdate.cpp.o\n                                    └── Updater.cpp.o\n                                ├── WiFiClientSecure/\n                                    └── WiFiClientSecure.cpp.o\n                                    └── esp_crt_bundle.c.o\n                                    └── ssl_client.cpp.o\n                                └── app_main.ino.cpp.d\n                                └── app_main.ino.cpp.o\n                                └── bh1750_driver.cpp.d\n                                └── bh1750_driver.cpp.o\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                        ├── ab87ee0d-6704-4bc3-9d8d-0513e92ed6ea/\n                            ├── ArduinoJson/\n                            ├── PubSubClient/\n                            └── integrity.dat\n                                ├── examples/\n                                ├── src/\n                                └── .piopm\n                                └── ArduinoJson.h\n                                └── LICENSE.txt\n                                └── README.md\n                                └── library.json\n                                └── library.properties\n                                    ├── JsonConfigFile/\n                                    ├── JsonFilterExample/\n                                    ├── JsonGeneratorExample/\n                                    ├── JsonHttpClient/\n                                    ├── JsonParserExample/\n                                    ├── JsonServer/\n                                    ├── JsonUdpBeacon/\n                                    ├── MsgPackParser/\n                                    ├── ProgmemExample/\n                                    ├── StringExample/\n                                        └── JsonConfigFile.ino\n                                        └── JsonFilterExample.ino\n                                        └── JsonGeneratorExample.ino\n                                        └── JsonHttpClient.ino\n                                        └── JsonParserExample.ino\n                                        └── JsonServer.ino\n                                        └── JsonUdpBeacon.ino\n                                        └── MsgPackParser.ino\n                                        └── ProgmemExample.ino\n                                        └── StringExample.ino\n                                    ├── ArduinoJson/\n                                    └── ArduinoJson.h\n                                    └── ArduinoJson.hpp\n                                    └── CMakeLists.txt\n                                        ├── Array/\n                                        ├── Collection/\n                                        ├── Deserialization/\n                                        ├── Document/\n                                        ├── Json/\n                                        ├── Memory/\n                                        ├── Misc/\n                                        ├── MsgPack/\n                                        ├── Numbers/\n                                        ├── Object/\n                                        ├── Polyfills/\n                                        ├── Serialization/\n                                        ├── Strings/\n                                        ├── Variant/\n                                        └── Configuration.hpp\n                                        └── Namespace.hpp\n                                        └── compatibility.hpp\n                                        └── version.hpp\n                                            └── ArrayData.hpp\n                                            └── ArrayImpl.hpp\n                                            └── ElementProxy.hpp\n                                            └── JsonArray.hpp\n                                            └── JsonArrayConst.hpp\n                                            └── JsonArrayIterator.hpp\n                                            └── Utilities.hpp\n                                            └── CollectionData.hpp\n                                            └── CollectionImpl.hpp\n                                            ├── Readers/\n                                            └── DeserializationError.hpp\n                                            └── DeserializationOptions.hpp\n                                            └── Filter.hpp\n                                            └── NestingLimit.hpp\n                                            └── Reader.hpp\n                                            └── deserialize.hpp\n                                                └── ArduinoStreamReader.hpp\n                                                └── ArduinoStringReader.hpp\n                                                └── FlashReader.hpp\n                                                └── IteratorReader.hpp\n                                                └── RamReader.hpp\n                                                └── StdStreamReader.hpp\n                                                └── VariantReader.hpp\n                                            └── JsonDocument.hpp\n                                            └── EscapeSequence.hpp\n                                            └── JsonDeserializer.hpp\n                                            └── JsonSerializer.hpp\n                                            └── Latch.hpp\n                                            └── PrettyJsonSerializer.hpp\n                                            └── TextFormatter.hpp\n                                            └── Utf16.hpp\n                                            └── Utf8.hpp\n                                            └── Alignment.hpp\n                                            └── Allocator.hpp\n                                            └── MemoryPool.hpp\n                                            └── MemoryPoolList.hpp\n                                            └── ResourceManager.hpp\n                                            └── ResourceManagerImpl.hpp\n                                            └── StringBuffer.hpp\n                                            └── StringBuilder.hpp\n                                            └── StringNode.hpp\n                                            └── StringPool.hpp\n                                            └── SerializedValue.hpp\n                                            └── MsgPackBinary.hpp\n                                            └── MsgPackDeserializer.hpp\n                                            └── MsgPackExtension.hpp\n                                            └── MsgPackSerializer.hpp\n                                            └── endianness.hpp\n                                            └── ieee754.hpp\n                                            └── FloatParts.hpp\n                                            └── FloatTraits.hpp\n                                            └── JsonFloat.hpp\n                                            └── JsonInteger.hpp\n                                            └── arithmeticCompare.hpp\n                                            └── convertNumber.hpp\n                                            └── parseNumber.hpp\n                                            └── JsonObject.hpp\n                                            └── JsonObjectConst.hpp\n                                            └── JsonObjectIterator.hpp\n                                            └── JsonPair.hpp\n                                            └── MemberProxy.hpp\n                                            └── ObjectData.hpp\n                                            └── ObjectImpl.hpp\n                                            ├── mpl/\n                                            ├── type_traits/\n                                            └── alias_cast.hpp\n                                            └── assert.hpp\n                                            └── attributes.hpp\n                                            └── ctype.hpp\n                                            └── integer.hpp\n                                            └── limits.hpp\n                                            └── math.hpp\n                                            └── pgmspace.hpp\n                                            └── pgmspace_generic.hpp\n                                            └── preprocessor.hpp\n                                            └── type_traits.hpp\n                                            └── utility.hpp\n                                                └── max.hpp\n                                                └── conditional.hpp\n                                                └── decay.hpp\n                                                └── declval.hpp\n                                                └── enable_if.hpp\n                                                └── function_traits.hpp\n                                                └── integral_constant.hpp\n                                                └── is_array.hpp\n                                                └── is_base_of.hpp\n                                                └── is_class.hpp\n                                                └── is_const.hpp\n                                                └── is_convertible.hpp\n                                                └── is_enum.hpp\n                                                └── is_floating_point.hpp\n                                                └── is_integral.hpp\n                                                └── is_pointer.hpp\n                                                └── is_same.hpp\n                                                └── is_signed.hpp\n                                                └── is_unsigned.hpp\n                                                └── make_unsigned.hpp\n                                                └── remove_const.hpp\n                                                └── remove_cv.hpp\n                                                └── remove_reference.hpp\n                                                └── type_identity.hpp\n                                                └── void_t.hpp\n                                            ├── Writers/\n                                            └── CountingDecorator.hpp\n                                            └── Writer.hpp\n                                            └── measure.hpp\n                                            └── serialize.hpp\n                                                └── ArduinoStringWriter.hpp\n                                                └── DummyWriter.hpp\n                                                └── PrintWriter.hpp\n                                                └── StaticStringWriter.hpp\n                                                └── StdStreamWriter.hpp\n                                                └── StdStringWriter.hpp\n                                            ├── Adapters/\n                                            └── IsString.hpp\n                                            └── JsonString.hpp\n                                            └── StringAdapter.hpp\n                                            └── StringAdapters.hpp\n                                            └── StringTraits.hpp\n                                                └── FlashString.hpp\n                                                └── RamString.hpp\n                                                └── StringObject.hpp\n                                            └── Converter.hpp\n                                            └── ConverterImpl.hpp\n                                            └── JsonVariant.hpp\n                                            └── JsonVariantConst.hpp\n                                            └── JsonVariantCopier.hpp\n                                            └── JsonVariantVisitor.hpp\n                                            └── VariantAttorney.hpp\n                                            └── VariantCompare.hpp\n                                            └── VariantContent.hpp\n                                            └── VariantData.hpp\n                                            └── VariantDataVisitor.hpp\n                                            └── VariantImpl.hpp\n                                            └── VariantOperators.hpp\n                                            └── VariantRefBase.hpp\n                                            └── VariantRefBaseImpl.hpp\n                                            └── VariantTag.hpp\n                                            └── VariantTo.hpp\n                                ├── examples/\n                                ├── src/\n                                └── .gitignore\n                                └── .piopm\n                                └── .travis.yml\n                                └── CHANGES.txt\n                                └── LICENSE.txt\n                                └── README.md\n                                └── keywords.txt\n                                └── library.json\n                                └── library.properties\n                                    ├── mqtt_auth/\n                                    ├── mqtt_basic/\n                                    ├── mqtt_esp8266/\n                                    ├── mqtt_large_message/\n                                    ├── mqtt_publish_in_callback/\n                                    ├── mqtt_reconnect_nonblocking/\n                                    ├── mqtt_stream/\n                                        └── mqtt_auth.ino\n                                        └── mqtt_basic.ino\n                                        └── mqtt_esp8266.ino\n                                        └── mqtt_large_message.ino\n                                        └── mqtt_publish_in_callback.ino\n                                        └── mqtt_reconnect_nonblocking.ino\n                                        └── mqtt_stream.ino\n                                    └── PubSubClient.cpp\n                                    └── PubSubClient.h\n                            ├── ArduinoJson/\n                            ├── PubSubClient/\n                            └── integrity.dat\n                                ├── examples/\n                                ├── src/\n                                └── .piopm\n                                └── ArduinoJson.h\n                                └── LICENSE.txt\n                                └── README.md\n                                └── library.json\n                                └── library.properties\n                                    ├── JsonConfigFile/\n                                    ├── JsonFilterExample/\n                                    ├── JsonGeneratorExample/\n                                    ├── JsonHttpClient/\n                                    ├── JsonParserExample/\n                                    ├── JsonServer/\n                                    ├── JsonUdpBeacon/\n                                    ├── MsgPackParser/\n                                    ├── ProgmemExample/\n                                    ├── StringExample/\n                                        └── JsonConfigFile.ino\n                                        └── JsonFilterExample.ino\n                                        └── JsonGeneratorExample.ino\n                                        └── JsonHttpClient.ino\n                                        └── JsonParserExample.ino\n                                        └── JsonServer.ino\n                                        └── JsonUdpBeacon.ino\n                                        └── MsgPackParser.ino\n                                        └── ProgmemExample.ino\n                                        └── StringExample.ino\n                                    ├── ArduinoJson/\n                                    └── ArduinoJson.h\n                                    └── ArduinoJson.hpp\n                                    └── CMakeLists.txt\n                                        ├── Array/\n                                        ├── Collection/\n                                        ├── Deserialization/\n                                        ├── Document/\n                                        ├── Json/\n                                        ├── Memory/\n                                        ├── Misc/\n                                        ├── MsgPack/\n                                        ├── Numbers/\n                                        ├── Object/\n                                        ├── Polyfills/\n                                        ├── Serialization/\n                                        ├── Strings/\n                                        ├── Variant/\n                                        └── Configuration.hpp\n                                        └── Namespace.hpp\n                                        └── compatibility.hpp\n                                        └── version.hpp\n                                            └── ArrayData.hpp\n                                            └── ArrayImpl.hpp\n                                            └── ElementProxy.hpp\n                                            └── JsonArray.hpp\n                                            └── JsonArrayConst.hpp\n                                            └── JsonArrayIterator.hpp\n                                            └── Utilities.hpp\n                                            └── CollectionData.hpp\n                                            └── CollectionImpl.hpp\n                                            ├── Readers/\n                                            └── DeserializationError.hpp\n                                            └── DeserializationOptions.hpp\n                                            └── Filter.hpp\n                                            └── NestingLimit.hpp\n                                            └── Reader.hpp\n                                            └── deserialize.hpp\n                                                └── ArduinoStreamReader.hpp\n                                                └── ArduinoStringReader.hpp\n                                                └── FlashReader.hpp\n                                                └── IteratorReader.hpp\n                                                └── RamReader.hpp\n                                                └── StdStreamReader.hpp\n                                                └── VariantReader.hpp\n                                            └── JsonDocument.hpp\n                                            └── EscapeSequence.hpp\n                                            └── JsonDeserializer.hpp\n                                            └── JsonSerializer.hpp\n                                            └── Latch.hpp\n                                            └── PrettyJsonSerializer.hpp\n                                            └── TextFormatter.hpp\n                                            └── Utf16.hpp\n                                            └── Utf8.hpp\n                                            └── Alignment.hpp\n                                            └── Allocator.hpp\n                                            └── MemoryPool.hpp\n                                            └── MemoryPoolList.hpp\n                                            └── ResourceManager.hpp\n                                            └── ResourceManagerImpl.hpp\n                                            └── StringBuffer.hpp\n                                            └── StringBuilder.hpp\n                                            └── StringNode.hpp\n                                            └── StringPool.hpp\n                                            └── SerializedValue.hpp\n                                            └── MsgPackBinary.hpp\n                                            └── MsgPackDeserializer.hpp\n                                            └── MsgPackExtension.hpp\n                                            └── MsgPackSerializer.hpp\n                                            └── endianness.hpp\n                                            └── ieee754.hpp\n                                            └── FloatParts.hpp\n                                            └── FloatTraits.hpp\n                                            └── JsonFloat.hpp\n                                            └── JsonInteger.hpp\n                                            └── arithmeticCompare.hpp\n                                            └── convertNumber.hpp\n                                            └── parseNumber.hpp\n                                            └── JsonObject.hpp\n                                            └── JsonObjectConst.hpp\n                                            └── JsonObjectIterator.hpp\n                                            └── JsonPair.hpp\n                                            └── MemberProxy.hpp\n                                            └── ObjectData.hpp\n                                            └── ObjectImpl.hpp\n                                            ├── mpl/\n                                            ├── type_traits/\n                                            └── alias_cast.hpp\n                                            └── assert.hpp\n                                            └── attributes.hpp\n                                            └── ctype.hpp\n                                            └── integer.hpp\n                                            └── limits.hpp\n                                            └── math.hpp\n                                            └── pgmspace.hpp\n                                            └── pgmspace_generic.hpp\n                                            └── preprocessor.hpp\n                                            └── type_traits.hpp\n                                            └── utility.hpp\n                                                └── max.hpp\n                                                └── conditional.hpp\n                                                └── decay.hpp\n                                                └── declval.hpp\n                                                └── enable_if.hpp\n                                                └── function_traits.hpp\n                                                └── integral_constant.hpp\n                                                └── is_array.hpp\n                                                └── is_base_of.hpp\n                                                └── is_class.hpp\n                                                └── is_const.hpp\n                                                └── is_convertible.hpp\n                                                └── is_enum.hpp\n                                                └── is_floating_point.hpp\n                                                └── is_integral.hpp\n                                                └── is_pointer.hpp\n                                                └── is_same.hpp\n                                                └── is_signed.hpp\n                                                └── is_unsigned.hpp\n                                                └── make_unsigned.hpp\n                                                └── remove_const.hpp\n                                                └── remove_cv.hpp\n                                                └── remove_reference.hpp\n                                                └── type_identity.hpp\n                                                └── void_t.hpp\n                                            ├── Writers/\n                                            └── CountingDecorator.hpp\n                                            └── Writer.hpp\n                                            └── measure.hpp\n                                            └── serialize.hpp\n                                                └── ArduinoStringWriter.hpp\n                                                └── DummyWriter.hpp\n                                                └── PrintWriter.hpp\n                                                └── StaticStringWriter.hpp\n                                                └── StdStreamWriter.hpp\n                                                └── StdStringWriter.hpp\n                                            ├── Adapters/\n                                            └── IsString.hpp\n                                            └── JsonString.hpp\n                                            └── StringAdapter.hpp\n                                            └── StringAdapters.hpp\n                                            └── StringTraits.hpp\n                                                └── FlashString.hpp\n                                                └── RamString.hpp\n                                                └── StringObject.hpp\n                                            └── Converter.hpp\n                                            └── ConverterImpl.hpp\n                                            └── JsonVariant.hpp\n                                            └── JsonVariantConst.hpp\n                                            └── JsonVariantCopier.hpp\n                                            └── JsonVariantVisitor.hpp\n                                            └── VariantAttorney.hpp\n                                            └── VariantCompare.hpp\n                                            └── VariantContent.hpp\n                                            └── VariantData.hpp\n                                            └── VariantDataVisitor.hpp\n                                            └── VariantImpl.hpp\n                                            └── VariantOperators.hpp\n                                            └── VariantRefBase.hpp\n                                            └── VariantRefBaseImpl.hpp\n                                            └── VariantTag.hpp\n                                            └── VariantTo.hpp\n                                ├── examples/\n                                ├── src/\n                                └── .gitignore\n                                └── .piopm\n                                └── .travis.yml\n                                └── CHANGES.txt\n                                └── LICENSE.txt\n                                └── README.md\n                                └── keywords.txt\n                                └── library.json\n                                └── library.properties\n                                    ├── mqtt_auth/\n                                    ├── mqtt_basic/\n                                    ├── mqtt_esp8266/\n                                    ├── mqtt_large_message/\n                                    ├── mqtt_publish_in_callback/\n                                    ├── mqtt_reconnect_nonblocking/\n                                    ├── mqtt_stream/\n                                        └── mqtt_auth.ino\n                                        └── mqtt_basic.ino\n                                        └── mqtt_esp8266.ino\n                                        └── mqtt_large_message.ino\n                                        └── mqtt_publish_in_callback.ino\n                                        └── mqtt_reconnect_nonblocking.ino\n                                        └── mqtt_stream.ino\n                                    └── PubSubClient.cpp\n                                    └── PubSubClient.h\n                    ├── config_manager/\n                    ├── mqtt_logger/\n                    ├── ota_handler/\n                    ├── tuya_handler/\n                        └── config_manager.h\n                        └── mqtt_logger.cpp\n                        └── mqtt_logger.h\n                        └── ota_handler.cpp\n                        └── ota_handler.h\n                        └── SHA256.cpp\n                        └── SHA256.h\n                        └── tuya_handler.cpp\n                        └── tuya_handler.h\n                    └── app_main.ino\n                    └── bh1750_driver.cpp\n                    └── bh1750_driver.h\n                ├── .pio/\n                ├── lib/\n                ├── src/\n                └── ota_pusher.py\n                └── platformio.ini\n                └── run_verification.py\n                └── test_result.json\n                    ├── build/\n                    ├── libdeps/\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                        └── project.checksum\n                            ├── FrameworkArduino/\n                            ├── lib087/\n                            ├── lib331/\n                            ├── lib54f/\n                            ├── lib647/\n                            ├── lib73c/\n                            ├── liba53/\n                            ├── libdc7/\n                            ├── libf4c/\n                            ├── libf91/\n                            ├── src/\n                            └── bootloader.bin\n                            └── firmware.bin\n                            └── firmware.elf\n                            └── firmware.map\n                            └── libFrameworkArduino.a\n                            └── partitions.bin\n                                ├── libb64/\n                                └── Esp.cpp.o\n                                └── FirmwareMSC.cpp.o\n                                └── FunctionalInterrupt.cpp.o\n                                └── HWCDC.cpp.o\n                                └── HardwareSerial.cpp.o\n                                └── IPAddress.cpp.o\n                                └── IPv6Address.cpp.o\n                                └── MD5Builder.cpp.o\n                                └── Print.cpp.o\n                                └── Stream.cpp.o\n                                └── StreamString.cpp.o\n                                └── Tone.cpp.o\n                                └── USB.cpp.o\n                                └── USBCDC.cpp.o\n                                └── USBMSC.cpp.o\n                                └── WMath.cpp.o\n                                └── WString.cpp.o\n                                └── base64.cpp.o\n                                └── cbuf.cpp.o\n                                └── esp32-hal-adc.c.o\n                                └── esp32-hal-bt.c.o\n                                └── esp32-hal-cpu.c.o\n                                └── esp32-hal-dac.c.o\n                                └── esp32-hal-gpio.c.o\n                                └── esp32-hal-i2c-slave.c.o\n                                └── esp32-hal-i2c.c.o\n                                └── esp32-hal-ledc.c.o\n                                └── esp32-hal-matrix.c.o\n                                └── esp32-hal-misc.c.o\n                                └── esp32-hal-psram.c.o\n                                └── esp32-hal-rgb-led.c.o\n                                └── esp32-hal-rmt.c.o\n                                └── esp32-hal-sigmadelta.c.o\n                                └── esp32-hal-spi.c.o\n                                └── esp32-hal-time.c.o\n                                └── esp32-hal-timer.c.o\n                                └── esp32-hal-tinyusb.c.o\n                                └── esp32-hal-touch.c.o\n                                └── esp32-hal-uart.c.o\n                                └── firmware_msc_fat.c.o\n                                └── main.cpp.o\n                                └── stdlib_noniso.c.o\n                                └── wiring_pulse.c.o\n                                └── wiring_shift.c.o\n                                    └── cdecode.c.o\n                                    └── cencode.c.o\n                                ├── ota_handler/\n                                    └── ota_handler.cpp.d\n                                    └── ota_handler.cpp.o\n                                ├── HTTPClient/\n                                    └── HTTPClient.cpp.o\n                                ├── mqtt_logger/\n                                    └── mqtt_logger.cpp.d\n                                    └── mqtt_logger.cpp.o\n                                ├── PubSubClient/\n                                    └── PubSubClient.cpp.d\n                                    └── PubSubClient.cpp.o\n                                ├── WiFi/\n                                    └── WiFi.cpp.o\n                                    └── WiFiAP.cpp.o\n                                    └── WiFiClient.cpp.o\n                                    └── WiFiGeneric.cpp.o\n                                    └── WiFiMulti.cpp.o\n                                    └── WiFiSTA.cpp.o\n                                    └── WiFiScan.cpp.o\n                                    └── WiFiServer.cpp.o\n                                    └── WiFiUdp.cpp.o\n                                ├── tuya_handler/\n                                    └── SHA256.cpp.d\n                                    └── SHA256.cpp.o\n                                    └── tuya_handler.cpp.d\n                                    └── tuya_handler.cpp.o\n                                ├── HTTPUpdate/\n                                    └── HTTPUpdate.cpp.o\n                                ├── Update/\n                                    └── HttpsOTAUpdate.cpp.o\n                                    └── Updater.cpp.o\n                                ├── WiFiClientSecure/\n                                    └── WiFiClientSecure.cpp.o\n                                    └── esp_crt_bundle.c.o\n                                    └── ssl_client.cpp.o\n                                └── app_main.ino.cpp.d\n                                └── app_main.ino.cpp.o\n                                └── bh1750_driver.cpp.d\n                                └── bh1750_driver.cpp.o\n                        ├── 65b275d4-dbe1-491b-bab7-1de2ab72f29d/\n                            ├── ArduinoJson/\n                            ├── PubSubClient/\n                            └── integrity.dat\n                                ├── examples/\n                                ├── src/\n                                └── .piopm\n                                └── ArduinoJson.h\n                                └── LICENSE.txt\n                                └── README.md\n                                └── library.json\n                                └── library.properties\n                                    ├── JsonConfigFile/\n                                    ├── JsonFilterExample/\n                                    ├── JsonGeneratorExample/\n                                    ├── JsonHttpClient/\n                                    ├── JsonParserExample/\n                                    ├── JsonServer/\n                                    ├── JsonUdpBeacon/\n                                    ├── MsgPackParser/\n                                    ├── ProgmemExample/\n                                    ├── StringExample/\n                                        └── JsonConfigFile.ino\n                                        └── JsonFilterExample.ino\n                                        └── JsonGeneratorExample.ino\n                                        └── JsonHttpClient.ino\n                                        └── JsonParserExample.ino\n                                        └── JsonServer.ino\n                                        └── JsonUdpBeacon.ino\n                                        └── MsgPackParser.ino\n                                        └── ProgmemExample.ino\n                                        └── StringExample.ino\n                                    ├── ArduinoJson/\n                                    └── ArduinoJson.h\n                                    └── ArduinoJson.hpp\n                                    └── CMakeLists.txt\n                                        ├── Array/\n                                        ├── Collection/\n                                        ├── Deserialization/\n                                        ├── Document/\n                                        ├── Json/\n                                        ├── Memory/\n                                        ├── Misc/\n                                        ├── MsgPack/\n                                        ├── Numbers/\n                                        ├── Object/\n                                        ├── Polyfills/\n                                        ├── Serialization/\n                                        ├── Strings/\n                                        ├── Variant/\n                                        └── Configuration.hpp\n                                        └── Namespace.hpp\n                                        └── compatibility.hpp\n                                        └── version.hpp\n                                            └── ArrayData.hpp\n                                            └── ArrayImpl.hpp\n                                            └── ElementProxy.hpp\n                                            └── JsonArray.hpp\n                                            └── JsonArrayConst.hpp\n                                            └── JsonArrayIterator.hpp\n                                            └── Utilities.hpp\n                                            └── CollectionData.hpp\n                                            └── CollectionImpl.hpp\n                                            ├── Readers/\n                                            └── DeserializationError.hpp\n                                            └── DeserializationOptions.hpp\n                                            └── Filter.hpp\n                                            └── NestingLimit.hpp\n                                            └── Reader.hpp\n                                            └── deserialize.hpp\n                                                └── ArduinoStreamReader.hpp\n                                                └── ArduinoStringReader.hpp\n                                                └── FlashReader.hpp\n                                                └── IteratorReader.hpp\n                                                └── RamReader.hpp\n                                                └── StdStreamReader.hpp\n                                                └── VariantReader.hpp\n                                            └── JsonDocument.hpp\n                                            └── EscapeSequence.hpp\n                                            └── JsonDeserializer.hpp\n                                            └── JsonSerializer.hpp\n                                            └── Latch.hpp\n                                            └── PrettyJsonSerializer.hpp\n                                            └── TextFormatter.hpp\n                                            └── Utf16.hpp\n                                            └── Utf8.hpp\n                                            └── Alignment.hpp\n                                            └── Allocator.hpp\n                                            └── MemoryPool.hpp\n                                            └── MemoryPoolList.hpp\n                                            └── ResourceManager.hpp\n                                            └── ResourceManagerImpl.hpp\n                                            └── StringBuffer.hpp\n                                            └── StringBuilder.hpp\n                                            └── StringNode.hpp\n                                            └── StringPool.hpp\n                                            └── SerializedValue.hpp\n                                            └── MsgPackBinary.hpp\n                                            └── MsgPackDeserializer.hpp\n                                            └── MsgPackExtension.hpp\n                                            └── MsgPackSerializer.hpp\n                                            └── endianness.hpp\n                                            └── ieee754.hpp\n                                            └── FloatParts.hpp\n                                            └── FloatTraits.hpp\n                                            └── JsonFloat.hpp\n                                            └── JsonInteger.hpp\n                                            └── arithmeticCompare.hpp\n                                            └── convertNumber.hpp\n                                            └── parseNumber.hpp\n                                            └── JsonObject.hpp\n                                            └── JsonObjectConst.hpp\n                                            └── JsonObjectIterator.hpp\n                                            └── JsonPair.hpp\n                                            └── MemberProxy.hpp\n                                            └── ObjectData.hpp\n                                            └── ObjectImpl.hpp\n                                            ├── mpl/\n                                            ├── type_traits/\n                                            └── alias_cast.hpp\n                                            └── assert.hpp\n                                            └── attributes.hpp\n                                            └── ctype.hpp\n                                            └── integer.hpp\n                                            └── limits.hpp\n                                            └── math.hpp\n                                            └── pgmspace.hpp\n                                            └── pgmspace_generic.hpp\n                                            └── preprocessor.hpp\n                                            └── type_traits.hpp\n                                            └── utility.hpp\n                                                └── max.hpp\n                                                └── conditional.hpp\n                                                └── decay.hpp\n                                                └── declval.hpp\n                                                └── enable_if.hpp\n                                                └── function_traits.hpp\n                                                └── integral_constant.hpp\n                                                └── is_array.hpp\n                                                └── is_base_of.hpp\n                                                └── is_class.hpp\n                                                └── is_const.hpp\n                                                └── is_convertible.hpp\n                                                └── is_enum.hpp\n                                                └── is_floating_point.hpp\n                                                └── is_integral.hpp\n                                                └── is_pointer.hpp\n                                                └── is_same.hpp\n                                                └── is_signed.hpp\n                                                └── is_unsigned.hpp\n                                                └── make_unsigned.hpp\n                                                └── remove_const.hpp\n                                                └── remove_cv.hpp\n                                                └── remove_reference.hpp\n                                                └── type_identity.hpp\n                                                └── void_t.hpp\n                                            ├── Writers/\n                                            └── CountingDecorator.hpp\n                                            └── Writer.hpp\n                                            └── measure.hpp\n                                            └── serialize.hpp\n                                                └── ArduinoStringWriter.hpp\n                                                └── DummyWriter.hpp\n                                                └── PrintWriter.hpp\n                                                └── StaticStringWriter.hpp\n                                                └── StdStreamWriter.hpp\n                                                └── StdStringWriter.hpp\n                                            ├── Adapters/\n                                            └── IsString.hpp\n                                            └── JsonString.hpp\n                                            └── StringAdapter.hpp\n                                            └── StringAdapters.hpp\n                                            └── StringTraits.hpp\n                                                └── FlashString.hpp\n                                                └── RamString.hpp\n                                                └── StringObject.hpp\n                                            └── Converter.hpp\n                                            └── ConverterImpl.hpp\n                                            └── JsonVariant.hpp\n                                            └── JsonVariantConst.hpp\n                                            └── JsonVariantCopier.hpp\n                                            └── JsonVariantVisitor.hpp\n                                            └── VariantAttorney.hpp\n                                            └── VariantCompare.hpp\n                                            └── VariantContent.hpp\n                                            └── VariantData.hpp\n                                            └── VariantDataVisitor.hpp\n                                            └── VariantImpl.hpp\n                                            └── VariantOperators.hpp\n                                            └── VariantRefBase.hpp\n                                            └── VariantRefBaseImpl.hpp\n                                            └── VariantTag.hpp\n                                            └── VariantTo.hpp\n                                ├── examples/\n                                ├── src/\n                                └── .gitignore\n                                └── .piopm\n                                └── .travis.yml\n                                └── CHANGES.txt\n                                └── LICENSE.txt\n                                └── README.md\n                                └── keywords.txt\n                                └── library.json\n                                └── library.properties\n                                    ├── mqtt_auth/\n                                    ├── mqtt_basic/\n                                    ├── mqtt_esp8266/\n                                    ├── mqtt_large_message/\n                                    ├── mqtt_publish_in_callback/\n                                    ├── mqtt_reconnect_nonblocking/\n                                    ├── mqtt_stream/\n                                        └── mqtt_auth.ino\n                                        └── mqtt_basic.ino\n                                        └── mqtt_esp8266.ino\n                                        └── mqtt_large_message.ino\n                                        └── mqtt_publish_in_callback.ino\n                                        └── mqtt_reconnect_nonblocking.ino\n                                        └── mqtt_stream.ino\n                                    └── PubSubClient.cpp\n                                    └── PubSubClient.h\n                    ├── config_manager/\n                    ├── mqtt_logger/\n                    ├── ota_handler/\n                    ├── tuya_handler/\n                        └── config_manager.h\n                        └── mqtt_logger.cpp\n                        └── mqtt_logger.h\n                        └── ota_handler.cpp\n                        └── ota_handler.h\n                        └── SHA256.cpp\n                        └── SHA256.h\n                        └── tuya_handler.cpp\n                        └── tuya_handler.h\n                    └── app_main.ino\n                    └── bh1750_driver.cpp\n                    └── bh1750_driver.h\n```\n\n--- FILE: run.py ---\n# run.py

import os
from app import create_app, db
# 【核心修正】在这里导入 Project 和新增的 WorkflowState 模型
from app.models import User, Device, Project, WorkflowState
from flask import render_template

# 使用开发环境配置创建应用
app = create_app(os.getenv('FLASK_CONFIG') or 'development')

# 处理根路径请求，返回前端页面
@app.route('/')
def index():
    return render_template('index.html')

@app.shell_context_processor
def make_shell_context():
    # 为flask shell提供上下文，同样加入 Project
    return dict(db=db, User=User, Device=Device, Project=Project)

# 创建一个自定义的Flask CLI命令来初始化数据库
@app.cli.command("init-db")
def init_db_command():
    """创建所有数据库表。"""
    db.create_all()
    print('Initialized the database and created all tables.')

if __name__ == '__main__':
    # 添加 use_reloader=False 来禁用文件监控和自动重启
    app.run(debug=True, host='0.0.0.0', port=5000, use_reloader=False)
\n--- FILE: config.py ---\n# config.py
# 这个文件用于存放我们应用的所有配置。
# 通过使用类来组织配置，我们可以轻松地为不同环境（如开发、测试、生产）提供不同的设置。

import os

# 获取项目根目录的绝对路径
basedir = os.path.abspath(os.path.dirname(__file__))

class Config:
    """
    基础配置类，包含所有环境通用的配置。
    其他特定环境的配置类将继承自这个类。
    """
    # 用于保护表单免受CSRF攻击以及加密session的密钥
    # 在生产环境中，这应该是一个复杂且保密的字符串，并从环境变量加载
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'a-very-secret-and-hard-to-guess-string'

    # 数据库配置
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # 为将来可能的邮件功能预留配置
    MAIL_SERVER = os.environ.get('MAIL_SERVER', 'smtp.googlemail.com')
    MAIL_PORT = int(os.environ.get('MAIL_PORT', '587'))
    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']
    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')

    @staticmethod
    def init_app(app):
        # 这个方法可以用来执行一些应用级别的初始化操作
        pass

class DevelopmentConfig(Config):
    """
    开发环境配置。
    """
    DEBUG = True
    # 开发环境使用SQLite数据库，因为它简单、无需额外服务
    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'dev-db.sqlite')

class TestingConfig(Config):
    """
    测试环境配置。
    """
    TESTING = True
    # 测试环境也使用一个独立的SQLite数据库
    SQLALCHEMY_DATABASE_URI = os.environ.get('TEST_DATABASE_URL') or \
        'sqlite://' # 使用内存数据库

class ProductionConfig(Config):
    """
    生产环境配置。
    """
    # 生产环境通常使用更健壮的数据库，如PostgreSQL或MySQL
    # 其URI应该从环境变量中加载
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'data.sqlite')

# 将配置名称与配置类关联起来
config = {
    'development': DevelopmentConfig,
    'testing': TestingConfig,
    'production': ProductionConfig,
    'default': DevelopmentConfig
}\n--- FILE: api_test_script.py ---\n# api_test_script.py
# -*- coding: utf-8 -*-

import json
import urllib.request

# --- 配置 ---
BASE_URL = "http://127.0.0.1:5000/api/v1"
USER_CREDENTIALS = {
    "username": "testuser",
    "password": "password123"
}
DEVICE_DATA = {
    "nickname": "我的第一个ESP32设备",
    "board_model": "ESP32-WROOM-32"
}


def make_request(url, data=None, headers={}):
    """一个通用的请求函数"""
    req = urllib.request.Request(url, headers=headers)

    # 如果有data，说明是POST请求
    if data:
        req.data = json.dumps(data).encode('utf-8')
        req.add_header('Content-Type', 'application/json')

    try:
        with urllib.request.urlopen(req) as response:
            print(f"请求成功: {response.status} {response.reason}")
            response_body = response.read().decode('utf-8')
            return json.loads(response_body)
    except urllib.error.HTTPError as e:
        print(f"请求失败: {e.code} {e.reason}")
        print(f"错误详情: {e.read().decode('utf-8')}")
        return None


def run_test_flow():
    """执行完整的API测试流程"""
    access_token = None

    print("\n--- 1. 注册新用户 ---")
    register_url = f"{BASE_URL}/auth/register"
    make_request(register_url, data=USER_CREDENTIALS)

    print("\n--- 2. 登录并获取Token ---")
    login_url = f"{BASE_URL}/auth/login"
    login_response = make_request(login_url, data=USER_CREDENTIALS)

    if login_response and 'access_token' in login_response:
        access_token = login_response['access_token']
        print(f"成功获取Access Token: {access_token[:20]}...")
    else:
        print("登录失败，测试中止。")
        return

    # 准备带有认证的请求头
    auth_headers = {
        "Authorization": f"Bearer {access_token}"
    }

    print("\n--- 3. 注册新设备 (携带Token) ---")
    devices_url = f"{BASE_URL}/devices"
    make_request(devices_url, data=DEVICE_DATA, headers=auth_headers)

    print("\n--- 4. 获取设备列表 (携带Token) ---")
    get_devices_response = make_request(devices_url, headers=auth_headers)
    if get_devices_response is not None:
        print("成功获取设备列表:")
        print(json.dumps(get_devices_response, indent=2, ensure_ascii=False))

    print("\n--- 测试流程结束 ---")


if __name__ == "__main__":
    run_test_flow()\n--- FILE: workflow_test_script.py ---\n# workflow_test_script.py
# -*- coding: utf-8 -*-

import json
import urllib.request
import time
import sys

# --- 配置 ---
BASE_URL = "http://127.0.0.1:5000/api/v1"
USER_CREDENTIALS = {
    "username": f"testuser_{int(time.time())}",  # Use a unique username each time
    "password": "password123"
}
# V3 API
WORKFLOW_PAYLOAD = {
    "project_name": "智能光照传感器",
    "internal_device_id": None,  # Will be filled in after device registration
    "peripherals": [
        {"name": "模拟光照传感器", "pin": 34}
    ],
    "description": "一款连接到涂鸦云的光照传感器，能上报光照强度(illumination)，并能通过云端开关(enable_report)控制是否上报。"
}


def make_request(url, data=None, headers={}, method=None):
    """一个通用的请求函数，支持指定方法(如PUT)"""
    # 如果没有显式提供方法，则根据是否有data判断是GET还是POST
    if method is None:
        method = 'POST' if data else 'GET'

    req = urllib.request.Request(url, headers=headers, method=method)

    if data:
        req.data = json.dumps(data).encode('utf-8')
        req.add_header('Content-Type', 'application/json')

    try:
        with urllib.request.urlopen(req) as response:
            print(f"请求 {method} {url} 成功: {response.status} {response.reason}")
            response_body = response.read().decode('utf-8')
            # Handle empty response body
            if not response_body:
                return {}
            return json.loads(response_body)
    except urllib.error.HTTPError as e:
        print(f"请求 {method} {url} 失败: {e.code} {e.reason}")
        error_details = e.read().decode('utf-8')
        print(f"错误详情: {error_details}")
        # 在关键步骤失败时退出脚本
        if e.code >= 400:
            sys.exit(f"关键步骤失败，测试中止。")
        return None


def run_workflow_test():
    """执行完整的API测试流程"""
    access_token = None

    # --- 阶段一: 准备工作 (登录和注册设备) ---
    print("\\n--- 1. 注册新用户 ---")
    make_request(f"{BASE_URL}/auth/register", data=USER_CREDENTIALS)

    print("\\n--- 2. 登录并获取Token ---")
    login_response = make_request(f"{BASE_URL}/auth/login", data=USER_CREDENTIALS)
    if login_response and 'access_token' in login_response:
        access_token = login_response['access_token']
        print(f"成功获取Token!")
    else:
        return

    auth_headers = {"Authorization": f"Bearer {access_token}"}

    print("\\n--- 3. 注册一个新设备 ---")
    device_payload = {"nickname": "测试用的ESP32", "board_model": "esp32dev"}
    device_response = make_request(f"{BASE_URL}/devices", data=device_payload, headers=auth_headers)

    # 从响应中获取系统生成的设备ID
    internal_device_id = device_response.get("device", {}).get("internal_device_id")
    if not internal_device_id:
        print("注册设备失败，无法获取 internal_device_id，测试中止。")
        return
    print(f"设备注册成功, ID: {internal_device_id}")

    # --- 阶段二: 核心工作流测试 ---
    print("\\n--- 4. 启动工作流 ---")
    WORKFLOW_PAYLOAD["internal_device_id"] = internal_device_id
    start_response = make_request(f"{BASE_URL}/workflows", data=WORKFLOW_PAYLOAD, headers=auth_headers)
    workflow_id = start_response.get("workflow_id")
    if not workflow_id:
        print("启动工作流失败，测试中止。")
        return
    print(f"工作流已启动, ID: {workflow_id}")

    print("\\n--- 5. 开始轮询工作流状态... ---")
    file_content_printed = False
    while True:
        time.sleep(3)  # 每3秒轮询一次
        status_response = make_request(f"{BASE_URL}/workflows/{workflow_id}", headers=auth_headers)
        if not status_response:
            break

        status = status_response.get("status")
        step_name = status_response.get("current_step", {}).get("name")
        log_snippet = status_response.get("log_snippet", "N/A")
        print(f"  [状态: {status}] [当前步骤: {step_name}] - {log_snippet}")

        # 当文件生成后，尝试读取一次文件内容
        if not file_content_printed:
            files_tree = make_request(f"{BASE_URL}/workflows/{workflow_id}/files", headers=auth_headers)
            if files_tree:  # 检查是否返回了非空的文件树
                print("\\n  --- 检测到文件已生成, 正在读取 src/app_main.ino ---")
                file_content_response = make_request(f"{BASE_URL}/workflows/{workflow_id}/files?path=src/app_main.ino",
                                                     headers=auth_headers)
                if file_content_response and "content" in file_content_response:
                    print("-" * 20 + " 文件内容 " + "-" * 20)
                    print(file_content_response["content"][:300] + "...")  # 打印前300个字符
                    print("-" * 52)
                    file_content_printed = True

        # 检查是否需要用户交互
        if status == "PAUSED":
            available_actions = status_response.get("available_actions", [])
            print(f"  检测到工作流暂停，可用操作: {available_actions}")
            if available_actions:
                # 简单起见，我们总是选择第一个可用操作
                action_to_take = available_actions[0]
                print(f"  --- 自动执行操作: {action_to_take} ---")
                action_payload = {"action": action_to_take}
                make_request(f"{BASE_URL}/workflows/{workflow_id}/actions", data=action_payload, headers=auth_headers)
            else:
                print("  工作流暂停但无可用操作，可能出现问题，测试中止。")
                break

        # 检查是否结束
        if status in ["COMPLETED", "FAILED"]:
            print(f"\\n--- 工作流结束，最终状态: {status} ---")
            break

    print("\\n--- 工作流测试脚本执行完毕 ---")


if __name__ == "__main__":
    run_workflow_test()\n--- FILE: e2e_test_script.py ---\n# e2e_test_script.py
# -*- coding: utf-8 -*-

import json
import urllib.request
import time
import sys
import os

# --- 配置 ---
BASE_URL = "http://127.0.0.1:5000/api/v1"
UNIQUE_ID = int(time.time())
USER_CREDENTIALS = {
    "username": f"e2e_user_{UNIQUE_ID}",
    "password": "password123"
}
# 模拟用户在前端输入框中的内容
RAW_PROJECT_REQUEST = {
    "raw_text": "我想用我的测试ESP32开发一个连接到涂鸦的智能光照传感器，它能上报光照强度(illumination)，并能通过云端开关(enable_report)控制是否上报。"
}


def make_request(url, data=None, headers={}, method=None):
    """一个通用的请求函数，支持指定方法(如PUT)"""
    if method is None:
        method = 'POST' if data else 'GET'
    req = urllib.request.Request(url, headers=headers, method=method)

    if data:
        req.data = json.dumps(data).encode('utf-8')
        req.add_header('Content-Type', 'application/json')

    try:
        with urllib.request.urlopen(req) as response:
            print(f"SUCCESS: {method} {url} - {response.status}")
            response_body = response.read().decode('utf-8')
            return json.loads(response_body) if response_body else {}
    except urllib.error.HTTPError as e:
        print(f"!!! ERROR: {method} {url} - {e.code} {e.reason}")
        print(f"    Details: {e.read().decode('utf-8')}")
        sys.exit("关键步骤失败，测试中止。")


def run_e2e_test():
    """执行完整的端到端测试流程"""
    # --- 1. 认证与准备 ---
    print("\n--- [1/6] 用户注册与登录 ---")
    make_request(f"{BASE_URL}/auth/register", data=USER_CREDENTIALS)
    login_response = make_request(f"{BASE_URL}/auth/login", data=USER_CREDENTIALS)
    access_token = login_response['access_token']
    auth_headers = {"Authorization": f"Bearer {access_token}", "Content-Type": "application/json"}
    print("    -> Token 获取成功")

    print("\n--- [2/6] 注册测试设备 ---")
    device_payload = {"nickname": "E2E测试设备", "board_model": "esp32dev"}
    device_response = make_request(f"{BASE_URL}/devices", data=device_payload, headers=auth_headers)
    internal_device_id = device_response.get("device", {}).get("internal_device_id")
    print(f"    -> 设备注册成功, ID: {internal_device_id}")

    # --- 2. 智能分析 ---
    print("\n--- [3/6] 调用AI需求分析器 ---")
    analysis_response = make_request(f"{BASE_URL}/projects/analyze", data=RAW_PROJECT_REQUEST, headers=auth_headers)
    print("    -> AI分析完成，生成结构化需求:")
    print(json.dumps(analysis_response, indent=4, ensure_ascii=False))

    # 从分析结果中补全启动工作流所需的payload
    workflow_payload = analysis_response
    workflow_payload['internal_device_id'] = internal_device_id
    # 模拟用户在弹窗中输入缺失的引脚信息
    for peripheral in workflow_payload.get("peripherals", []):
        if peripheral.get("pin") == "USER_INPUT_REQUIRED":
            peripheral["pin"] = 34  # 假设用户输入了34

    # --- 3. 启动与轮询 ---
    print("\n--- [4/6] 启动工作流 ---")
    start_response = make_request(f"{BASE_URL}/workflows", data=workflow_payload, headers=auth_headers)
    workflow_id = start_response.get("workflow_id")
    print(f"    -> 工作流已启动, ID: {workflow_id}")

    print("\n--- [5/6] 轮询工作流状态，直至完成 ---")
    while True:
        time.sleep(5)  # 轮询间隔
        status_response = make_request(f"{BASE_URL}/workflows/{workflow_id}", headers=auth_headers)

        status = status_response.get("status")
        print(f"    [Poll] Status: {status}")

        # 打印当前正在运行的步骤
        if status == "RUNNING" and status_response.get("workflow_steps"):
            running_step = next((s['name'] for s in status_response["workflow_steps"] if s['status'] == 'running'),
                                "N/A")
            print(f"           Running Step: {running_step}")

        # 自动处理用户交互
        if status == "PAUSED":
            available_actions = status_response.get("available_actions", [])
            if available_actions:
                action_to_take = available_actions[0]
                print(f"    -> 检测到暂停，自动执行操作: {action_to_take}")
                action_payload = {"action": action_to_take}
                make_request(f"{BASE_URL}/workflows/{workflow_id}/actions", data=action_payload, headers=auth_headers)
            else:
                print("    !!! WARNING: 工作流暂停但无可用操作，可能存在问题。")

        if status in ["COMPLETED", "FAILED"]:
            print(f"    -> 工作流结束，最终状态: {status}")
            assert status == "COMPLETED", "工作流最终状态不是COMPLETED!"
            break

    # --- 4. 最终产物验证 ---
    print("\n--- [6/6] 验证最终产物 ---")
    files_tree = make_request(f"{BASE_URL}/workflows/{workflow_id}/files", headers=auth_headers)

    # 递归查找文件
    def find_file(tree, filename):
        for item in tree:
            if item['type'] == 'file' and item['name'] == filename:
                return True
            if item['type'] == 'folder' and item.get('children'):
                if find_file(item['children'], filename):
                    return True
        return False

    is_found = find_file(files_tree, 'tuya_dp_template.xlsx')

    if is_found:
        print("    -> [PASS] 最终产物 'tuya_dp_template.xlsx' 已成功生成！")
    else:
        print(
            f"    -> [FAIL] 未在工作区找到最终产物 'tuya_dp_template.xlsx'！ 文件树: {json.dumps(files_tree, indent=2)}")
        sys.exit("产物验证失败！")

    print("\n端到端测试成功完成！")


if __name__ == "__main__":
    run_e2e_test()
\n--- FILE: app/__init__.py ---\n# app/__init__.py
# -*- coding: utf-8 -*-

from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate  # <-- 新增导入
from config import config

db = SQLAlchemy()
migrate = Migrate()  # <-- 新增实例化


def create_app(config_name='default'):
    app = Flask(__name__)
    app.config.from_object(config[config_name])
    config[config_name].init_app(app)

    db.init_app(app)
    migrate.init_app(app, db)  # <-- 新增初始化

    # 注册蓝图 (保持不变)
    from .api.auth_routes import auth_blueprint
    app.register_blueprint(auth_blueprint, url_prefix='/api/v1/auth')

    from .api.device_routes import device_blueprint
    app.register_blueprint(device_blueprint, url_prefix='/api/v1/devices')

    from .api.workflow_routes import workflow_blueprint
    app.register_blueprint(workflow_blueprint, url_prefix='/api/v1/workflows')

    from .api.project_routes import project_blueprint
    app.register_blueprint(project_blueprint, url_prefix='/api/v1/projects')

    from .api.user_routes import user_blueprint
    app.register_blueprint(user_blueprint, url_prefix='/api/v1/user')

    from .api.log_stream_routes import log_stream_blueprint
    app.register_blueprint(log_stream_blueprint, url_prefix='/api/v1/stream')

    return app
\n--- FILE: app/models.py ---\n# app/models.py

import uuid
import json
from werkzeug.security import generate_password_hash, check_password_hash
from . import db


class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, index=True, nullable=False)
    password_hash = db.Column(db.String(256), nullable=False)

    # 用户的个人配置
    wifi_ssid = db.Column(db.String(64), nullable=True)
    wifi_password = db.Column(db.String(64), nullable=True)

    # 'User'和'Device'之间的一对多关系
    devices = db.relationship('Device', backref='owner', lazy='dynamic')

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)


class Device(db.Model):
    __tablename__ = 'devices'
    id = db.Column(db.Integer, primary_key=True)
    # 使用UUID确保系统生成的ID全局唯一
    internal_device_id = db.Column(db.String(36), unique=True, nullable=False,
                                   default=lambda: str(uuid.uuid4()))
    nickname = db.Column(db.String(64), nullable=False)
    board_model = db.Column(db.String(64), nullable=False)

    # 云平台信息
    cloud_platform = db.Column(db.String(32), default='tuya')
    cloud_product_id = db.Column(db.String(64), nullable=True)
    cloud_device_id = db.Column(db.String(64), nullable=True)
    cloud_device_secret = db.Column(db.String(64), nullable=True)

    # 【核心修改】使用Text字段存储JSON字符串形式的外设列表
    # 我们使用一个"私有"的列名 _peripherals
    _peripherals = db.Column('peripherals', db.Text, nullable=True)

    # 指向'User'模型的外键
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))

    @property
    def peripherals(self):
        """
        获取外设列表的属性。
        这个getter方法会自动将存储在数据库中的JSON字符串反序列化为Python列表。
        这使得在代码的其他部分可以像操作普通列表一样操作 device.peripherals。
        """
        if self._peripherals is None:
            return []
        try:
            return json.loads(self._peripherals)
        except (json.JSONDecodeError, TypeError):
            # 如果数据库中的数据格式不正确，返回一个空列表以避免程序崩溃
            return []

    @peripherals.setter
    def peripherals(self, value):
        """
        设置外设列表的属性。
        这个setter方法会自动将传入的Python列表或字典序列化为JSON字符串以便存入数据库。
        """
        if value is None:
            self._peripherals = None
        elif isinstance(value, (list, dict)):
            self._peripherals = json.dumps(value, ensure_ascii=False)
        else:
            # 如果传入了不支持的类型，则抛出异常
            raise ValueError('Peripherals must be a list or dictionary')


class Project(db.Model):
    __tablename__ = 'projects'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    # 使用Text字段存储完整的项目配置JSON字符串
    config_json = db.Column(db.Text, nullable=False)

    # 指向 User 模型的外键
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))

    # 与User建立关系
    owner = db.relationship('User', backref=db.backref('projects', lazy='dynamic'))

    def to_dict(self):
        return {
            'id': self.id,
            'name': self.name,
            'config_json': json.loads(self.config_json)  # 返回时反序列化
        }


class WorkflowState(db.Model):
    __tablename__ = 'workflow_states'
    # 使用工作流ID作为主键
    workflow_id = db.Column(db.String(36), primary_key=True)

    # 使用Text字段存储序列化后的整个工作流状态JSON
    state_json = db.Column(db.Text, nullable=False)

    # 记录最后更新时间，便于未来可能的清理
    updated_at = db.Column(db.DateTime, default=db.func.now(), onupdate=db.func.now())

    # 【核心新增】添加一个Text字段用于存储实时日志
    logs = db.Column(db.Text, default='')\n--- FILE: app/analyzer_test_script.py ---\n# analyzer_test_script.py
# -*- coding: utf-8 -*-

import requests
import json

# --- 配置 ---
BASE_URL = "http://127.0.0.1:5000/api/v1"
USER_CREDENTIALS = {
    "username": "testuser",
    "password": "password123"
}
# 要分析的自然语言文本
ANALYSIS_TEXT = "我想做一个能用手机控制开关的智能插座，它需要连接到家里的WiFi，并使用一个继电器模块来控制电源。"

def run_analyzer_test():
    """执行完整的分析器接口测试流程"""
    session = requests.Session()
    access_token = None

    # --- 1. 登录并获取Token ---
    print("--- 步骤 1: 登录并获取Token ---")
    login_url = f"{BASE_URL}/auth/login"
    try:
        response = session.post(login_url, json=USER_CREDENTIALS)
        response.raise_for_status()  # 如果请求失败 (非2xx状态码), 则抛出异常

        login_data = response.json()
        access_token = login_data.get("access_token")
        if not access_token:
            print(" 登录失败: 未在响应中找到 access_token。")
            return

        print(f" 登录成功! 获取到Token。")

    except requests.exceptions.RequestException as e:
        print(f" 登录请求失败: {e}")
        # 尝试打印更详细的错误信息
        try:
            print(f"   服务器返回: {e.response.json()}")
        except:
            pass
        return

    # --- 2. 调用分析接口 ---
    print("\n--- 步骤 2: 调用项目分析接口 ---")
    analyze_url = f"{BASE_URL}/projects/analyze"
    headers = {
        "Authorization": f"Bearer {access_token}"
    }
    payload = {
        "raw_text": ANALYSIS_TEXT
    }
    try:
        response = session.post(analyze_url, json=payload, headers=headers)
        response.raise_for_status()

        analysis_result = response.json()
        print(" 分析接口调用成功!")
        print("--- 分析结果 ---")
        # 使用json.dumps美化输出
        print(json.dumps(analysis_result, indent=2, ensure_ascii=False))
        print("--------------------")

    except requests.exceptions.RequestException as e:
        print(f" 分析接口请求失败: {e}")
        try:
            print(f"   服务器返回: {e.response.json()}")
        except:
            pass
        return

    print("\n🎉 验证流程执行完毕。")


if __name__ == "__main__":
    run_analyzer_test()
\n--- FILE: app/api/__init__.py ---\n\n--- FILE: app/api/auth_routes.py ---\n# app/api/auth_routes.py
# -*- coding: utf-8 -*-

from flask import Blueprint, request, jsonify
from app.services import auth_service

# 创建一个蓝图对象
auth_blueprint = Blueprint('auth_api', __name__)


@auth_blueprint.route('/register', methods=['POST'])
def register():
    """用户注册接口"""
    data = request.get_json()
    if not data or not data.get('username') or not data.get('password'):
        return jsonify({"error": "缺少用户名或密码"}), 400

    user, message = auth_service.register_user(data['username'], data['password'])
    if not user:
        return jsonify({"error": message}), 409  # 409 Conflict

    return jsonify({"message": message, "user_id": user.id}), 201


@auth_blueprint.route('/login', methods=['POST'])
def login():
    """用户登录接口"""
    data = request.get_json()
    if not data or not data.get('username') or not data.get('password'):
        return jsonify({"error": "缺少用户名或密码"}), 400

    user = auth_service.verify_user(data['username'], data['password'])
    if not user:
        return jsonify({"error": "用户名或密码错误"}), 401

    # 生成Token
    token = auth_service.generate_auth_token(user.id)

    # 遵循API规约返回Token和用户信息
    return jsonify({
        "access_token": token,
        "user_info": {
            "id": user.id,
            "username": user.username
        }
    }), 200\n--- FILE: app/api/device_routes.py ---\n# app/api/device_routes.py
# -*- coding: utf-8 -*-

from functools import wraps
from flask import Blueprint, request, jsonify, g
from app.services import device_service, auth_service
from app.models import User, Device
from app import db  # 导入db实例

device_blueprint = Blueprint('device_api', __name__)


# --- Token验证装饰器 ---
def token_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        token = None
        if 'Authorization' in request.headers:
            token = request.headers['Authorization'].split(" ")[1]

        if not token:
            return jsonify({'error': '未提供认证Token'}), 401

        user = auth_service.verify_auth_token(token)
        if not user:
            return jsonify({'error': 'Token无效或已过期'}), 401

        g.current_user = user
        return f(*args, **kwargs)

    return decorated_function


@device_blueprint.route('', methods=['POST'])
@token_required
def register_device():
    """注册新设备接口"""
    data = request.get_json()
    if not data or not data.get('nickname') or not data.get('board_model'):
        return jsonify({"error": "缺少必要的设备信息"}), 400

    device = device_service.register_device(g.current_user, data)

    if not device:
        return jsonify({"error": "设备注册失败"}), 500

    return jsonify({
        "message": "设备注册成功",
        "device": {
            "internal_device_id": device.internal_device_id,
            "nickname": device.nickname,
            "board_model": device.board_model
        }
    }), 201


@device_blueprint.route('', methods=['GET'])
@token_required
def get_devices():
    """获取当前用户的所有设备列表"""
    user_devices = device_service.get_user_devices(g.current_user)

    devices_list = [{
        "internal_device_id": dev.internal_device_id,
        "nickname": dev.nickname,
        "board_model": dev.board_model,
        "cloud_platform": dev.cloud_platform,
        "cloud_product_id": dev.cloud_product_id,
        "cloud_device_id": dev.cloud_device_id,
        "cloud_device_secret": dev.cloud_device_secret,
        # 【核心修改】在API响应中包含外设列表
        # dev.peripherals 会自动调用模型中的getter方法
        "peripherals": dev.peripherals
    } for dev in user_devices]

    return jsonify(devices_list), 200


# 【核心修改】更新设备信息的API
@device_blueprint.route('/<internal_device_id>', methods=['PUT'])
@token_required
def update_device(internal_device_id):
    """更新指定设备的信息"""
    device = Device.query.filter_by(internal_device_id=internal_device_id, user_id=g.current_user.id).first_or_404()
    data = request.get_json()
    if not data:
        return jsonify({"error": "请求体不能为空"}), 400

    # 更新设备的基本信息
    device.nickname = data.get('nickname', device.nickname)
    device.board_model = data.get('board_model', device.board_model)
    device.cloud_platform = data.get('cloud_platform', device.cloud_platform)
    device.cloud_product_id = data.get('cloud_product_id', device.cloud_product_id)
    device.cloud_device_id = data.get('cloud_device_id', device.cloud_device_id)
    device.cloud_device_secret = data.get('cloud_device_secret', device.cloud_device_secret)

    # 【核心修改】如果请求数据中包含 'peripherals'，则更新它
    if 'peripherals' in data:
        # device.peripherals 会自动调用模型中的setter方法，处理JSON序列化
        device.peripherals = data.get('peripherals')

    db.session.commit()
    return jsonify({"message": "设备信息更新成功"}), 200


# 【新增】删除设备的API
@device_blueprint.route('/<internal_device_id>', methods=['DELETE'])
@token_required
def delete_device(internal_device_id):
    """删除指定设备"""
    device = Device.query.filter_by(internal_device_id=internal_device_id, user_id=g.current_user.id).first_or_404()
    db.session.delete(device)
    db.session.commit()
    return jsonify({"message": "设备删除成功"}), 200
\n--- FILE: app/api/log_stream_routes.py ---\n# app/api/log_stream_routes.py
# -*- coding: utf-8 -*-

import time
from flask import Blueprint, Response, stream_with_context
from app.models import WorkflowState
import json

log_stream_blueprint = Blueprint('log_stream_api', __name__)


@log_stream_blueprint.route('/<workflow_id>')
def stream(workflow_id):
    """
    为指定的工作流ID建立一个Server-Sent Events (SSE)连接，
    通过轮询数据库来流式传输日志。
    """

    def generate_logs():
        last_sent_length = 0
        try:
            while True:
                # 从数据库获取当前工作流的状态和日志
                workflow = WorkflowState.query.get(workflow_id)
                if not workflow:
                    # 如果工作流被删除或不存在，则结束流
                    yield f"data: {{\"error\": \"Workflow not found.\"}}\n\n"
                    break

                current_logs = workflow.logs
                if len(current_logs) > last_sent_length:
                    # 如果有新的日志，只发送增量部分
                    new_log_chunk = current_logs[last_sent_length:]
                    # 按行发送，以获得更好的前端体验
                    for line in new_log_chunk.strip().split('\n'):
                        yield f"data: {{\"log\": \"{line}\"}}\n\n"
                    last_sent_length = len(current_logs)

                # 检查工作流是否已结束
                state = json.loads(workflow.state_json)
                if state.get('status') in ['COMPLETED', 'FAILED']:
                    yield f"data: {{\"status\": \"{state.get('status')}\"}}\n\n"
                    break

                # 等待一段时间再进行下一次轮询
                time.sleep(1)  # 1秒轮询间隔
        except Exception as e:
            print(f"Log stream for {workflow_id} error: {e}")
            yield f"data: {{\"error\": \"An internal error occurred.\"}}\n\n"

    return Response(stream_with_context(generate_logs()), mimetype='text/event-stream')
\n--- FILE: app/api/project_routes.py ---\n# app/api/project_routes.py
# -*- coding: utf-8 -*-

import shutil
import tempfile
import zipfile
import uuid
from pathlib import Path
from flask import Blueprint, request, jsonify, g
from app.services import project_analyzer_service, workflow_service, syntax_analyzer_service
from .device_routes import token_required
from app.models import Project
import json
from app import db

project_blueprint = Blueprint('project_api', __name__)

# --- V2 新增：用于管理已同步的本地项目的内存字典 ---
# 在生产环境中，这应该被替换为数据库或Redis
SYNCED_LOCAL_PROJECTS = {}


# --- 文件分析与工作流相关的路由 ---

@project_blueprint.route('/analyze', methods=['POST'])
@token_required
def analyze_project_request():
    data = request.get_json()
    if not data or not data.get('raw_text'):
        return jsonify({"error": "raw_text field is required"}), 400
    try:
        structured_request = project_analyzer_service.analyze_requirement(
            user_id=g.current_user.id, raw_text=data['raw_text']
        )
        return jsonify(structured_request), 200
    except ValueError as e:
        return jsonify({"error": str(e)}), 404
    except Exception as e:
        print(f"ERROR in /projects/analyze: {e}")
        return jsonify({"error": f"Failed to analyze requirement: {str(e)}"}), 500


@project_blueprint.route('/sync-local', methods=['POST'])
@token_required
def sync_local_project():
    """【V2 新增】接收前端上传的本地项目zip包"""
    if 'project_zip' not in request.files:
        return jsonify({"error": "Missing 'project_zip' file in request"}), 400

    file = request.files['project_zip']

    # 为这个同步项目创建一个唯一的ID和临时工作区
    project_id = f"local-{uuid.uuid4()}"
    # 使用与云端工作流相同的根目录
    project_root = Path(__file__).resolve().parent.parent
    workspace_path = project_root / "temp_workspaces" / project_id
    workspace_path.mkdir(parents=True, exist_ok=True)

    try:
        # 保存并解压zip文件
        zip_path = workspace_path / "project.zip"
        file.save(zip_path)
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(workspace_path)

        # 清理zip文件
        zip_path.unlink()

        # 存储ID和路径的映射关系
        SYNCED_LOCAL_PROJECTS[project_id] = str(workspace_path)

        print(f"Synced local project. ID: {project_id}, Path: {workspace_path}")
        return jsonify({"localProjectId": project_id, "message": "Project synced successfully"}), 201

    except Exception as e:
        # 如果出错，清理已创建的目录
        if workspace_path.exists():
            shutil.rmtree(workspace_path)
        return jsonify({"error": f"Failed to process project zip: {str(e)}"}), 500


@project_blueprint.route('/analyze-syntax', methods=['POST'])
@token_required
def analyze_syntax():
    """【V5 简化重构版】"""
    data = request.get_json()
    if not data or 'code' not in data or 'language' not in data:
        return jsonify({"error": "请求体中缺少'code'或'language'字段"}), 400

    language = data.get('language')
    code = data.get('code')
    workflow_id = data.get('workflowId')
    local_project_id = data.get('localProjectId')

    analysis_result = {"success": True, "errors": []}
    workspace_path = None

    if language == 'cpp':
        # 尝试获取工作区路径
        if workflow_id:
            try:
                status = workflow_service.get_workflow_status(workflow_id)
                if status and 'latest_state' in status:
                    workspace_path = status['latest_state'].get('workspace_path')
            except Exception as e:
                print(f"无法为云端项目 {workflow_id} 获取工作区路径: {e}")
        elif local_project_id:
            workspace_path = SYNCED_LOCAL_PROJECTS.get(local_project_id)
            if workspace_path:
                # 实时更新被编辑的文件内容，以确保分析的是最新版本
                file_path_to_update = data.get('filePath')
                if file_path_to_update:
                    full_path = Path(workspace_path) / file_path_to_update
                    try:
                        full_path.parent.mkdir(parents=True, exist_ok=True)
                        full_path.write_text(code, encoding='utf-8')
                    except Exception as e:
                        print(f"无法更新同步的本地文件 {full_path}: {e}")

        # 调用统一的分析服务入口
        analysis_result = syntax_analyzer_service.analyze_cpp_code(code, workspace_path)

    elif language == 'python':
        analysis_result = syntax_analyzer_service.analyze_python_syntax(code)

    return jsonify(analysis_result), 200

# --- 项目模板相关的路由 (保持不变) ---
@project_blueprint.route('', methods=['POST'])
@token_required
def save_project():
    data = request.get_json()
    if not data or not data.get('name') or not data.get('config_json'):
        return jsonify({"error": "Missing project name or config_json"}), 400
    project = Project(name=data['name'], config_json=json.dumps(data['config_json']), owner=g.current_user)
    db.session.add(project)
    db.session.commit()
    return jsonify(project.to_dict()), 201


@project_blueprint.route('/<int:project_id>', methods=['GET'])
@token_required
def get_project(project_id):
    project = Project.query.filter_by(id=project_id, user_id=g.current_user.id).first_or_404()
    return jsonify(project.to_dict()), 200


@project_blueprint.route('', methods=['GET'])
@token_required
def list_projects():
    projects = Project.query.filter_by(user_id=g.current_user.id).order_by(Project.id.desc()).all()
    return jsonify([{'id': p.id, 'name': p.name} for p in projects]), 200


@project_blueprint.route('/<int:project_id>', methods=['DELETE'])
@token_required
def delete_project(project_id):
    project = Project.query.filter_by(id=project_id, user_id=g.current_user.id).first_or_404()
    db.session.delete(project)
    db.session.commit()
    return jsonify({"message": "项目模板删除成功"}), 200\n--- FILE: app/api/user_routes.py ---\n# app/api/user_routes.py
# -*- coding: utf-8 -*-

from flask import Blueprint, request, jsonify, g
from app.services import user_service
from .device_routes import token_required

user_blueprint = Blueprint('user_api', __name__)

# 【核心修改】将原来的一个函数拆分为两个，分别处理 GET 和 PUT
@user_blueprint.route('/config', methods=['GET'])
@token_required
def get_config():
    """获取当前登录用户的配置信息。"""
    # g.current_user 是由 @token_required 装饰器注入的
    config = user_service.get_user_config(g.current_user)
    return jsonify(config), 200


@user_blueprint.route('/config', methods=['PUT'])
@token_required
def update_config():
    """更新当前登录用户的配置信息。"""
    data = request.get_json()
    if not data:
        return jsonify({"error": "Request body cannot be empty."}), 400

    # g.current_user 是由 @token_required 装饰器注入的
    user_service.update_user_config(g.current_user, data)

    return jsonify({"message": "Configuration updated successfully."}), 200
\n--- FILE: app/api/workflow_routes.py ---\n# app/api/workflow_routes.py
# -*- coding: utf-8 -*-

import shutil
from pathlib import Path # 【核心修正】添加了这一行导入
from flask import Blueprint, request, jsonify, g
from app.services import workflow_service
from .device_routes import token_required

workflow_blueprint = Blueprint('workflow_api', __name__)


@workflow_blueprint.route('', methods=['POST'])
@token_required
def create_workflow():
    """
    【V3 修正后】接收一个包含多设备任务的项目配置，并启动工作流。
    """
    data = request.get_json()
    if not data or not data.get('device_tasks'):
        return jsonify({"error": "请求体中必须包含 'device_tasks' 列表。"}), 400

    try:
        initial_status = workflow_service.start_workflow(g.current_user.id, data)
        return jsonify(initial_status), 202
    except ValueError as e:
        return jsonify({"error": str(e)}), 404
    except Exception as e:
        return jsonify({"error": f"Internal server error: {e}"}), 500


@workflow_blueprint.route('/<workflow_id>', methods=['GET'])
@token_required
def get_status(workflow_id):
    try:
        status = workflow_service.get_workflow_status(workflow_id)
        return jsonify(status), 200
    except ValueError as e:
        return jsonify({"error": str(e)}), 404


@workflow_blueprint.route('/history', methods=['GET'])
@token_required
def get_history():
    """获取当前用户的所有工作流历史记录。"""
    history = []
    with workflow_service.WORKFLOW_LOCK:
        for wf_id, wf_data in workflow_service.WORKFLOWS.items():
            if wf_data.get('latest_state', {}).get('user_id') == g.current_user.id:
                history.append({
                    "workflow_id": wf_id,
                    "project_name": wf_data.get('latest_state', {}).get('project_name', '未命名项目'),
                    "status": wf_data.get('status', 'UNKNOWN'),
                })
    history.sort(key=lambda x: x['workflow_id'], reverse=True)
    return jsonify(history), 200


@workflow_blueprint.route('/<workflow_id>/actions', methods=['POST'])
@token_required
def perform_action(workflow_id):
    data = request.get_json()
    if not data or not data.get('action'):
        return jsonify({"error": "Action not specified"}), 400

    try:
        workflow_service.post_workflow_action(workflow_id, data)
        return jsonify({"message": "Action accepted"}), 202
    except ValueError as e:
        return jsonify({"error": str(e)}), 404


@workflow_blueprint.route('/<workflow_id>/files', methods=['GET'])
@token_required
def list_files(workflow_id):
    path = request.args.get('path')
    try:
        if path:
            content = workflow_service.get_file_content(workflow_id, path)
            return jsonify({"path": path, "content": content}), 200
        else:
            tree = workflow_service.get_file_tree(workflow_id)
            return jsonify(tree), 200
    except FileNotFoundError as e:
        # 捕获明确的“文件未找到”错误
        return jsonify({"error": str(e)}), 404
    except Exception as e:
        # 【核心修正】捕获所有其他可能的异常 (例如权限问题, 字典key不存在等)
        # 打印详细错误到后台日志，并向前台返回一个结构化的错误信息
        print(f"ERROR during file access for workflow '{workflow_id}': {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"获取文件列表时发生内部错误: {str(e)}"}), 500

@workflow_blueprint.route('/<workflow_id>/files', methods=['PUT'])
@token_required
def update_file(workflow_id):
    path = request.args.get('path')
    data = request.get_json()
    if not path or not data or 'content' not in data:
        return jsonify({"error": "Missing path or content"}), 400

    try:
        workflow_service.save_file_content(workflow_id, path, data['content'])
        return jsonify({"message": f"File '{path}' saved successfully."}), 200
    except (ValueError, FileNotFoundError) as e:
        return jsonify({"error": str(e)}), 404

@workflow_blueprint.route('/<workflow_id>', methods=['DELETE'])
@token_required
def delete_workflow(workflow_id):
    """【新增】删除一个工作流及其所有相关文件。"""
    with workflow_service.WORKFLOW_LOCK:
        workflow = workflow_service.WORKFLOWS.get(workflow_id)
        if not workflow:
            return jsonify({"error": "Workflow not found."}), 404

        if workflow.get('latest_state', {}).get('user_id') != g.current_user.id:
            return jsonify({"error": "Permission denied."}), 403

        workspace_path_str = workflow.get('latest_state', {}).get('workspace_path')
        del workflow_service.WORKFLOWS[workflow_id]

    if workspace_path_str:
        try:
            workspace_path = Path(workspace_path_str)
            if workspace_path.exists() and workspace_path.is_dir():
                shutil.rmtree(workspace_path)
        except Exception as e:
            print(f"Error deleting workspace for {workflow_id}: {e}")
            return jsonify({"message": f"Workflow record deleted, but failed to delete files: {e}"}), 500

    return jsonify({"message": "Workflow and all associated files deleted successfully."}), 200
\n--- FILE: app/services/__init__.py ---\n\n--- FILE: app/services/auth_service.py ---\n# app/services/auth_service.py
# -*- coding: utf-8 -*-

from flask import current_app
from itsdangerous import URLSafeTimedSerializer, SignatureExpired, BadTimeSignature
from app import db
from app.models import User


def register_user(username, password):
    """创建新用户并存入数据库"""
    if User.query.filter_by(username=username).first():
        return None, "用户名已存在"

    user = User(username=username)
    user.set_password(password)
    db.session.add(user)
    db.session.commit()
    return user, "用户注册成功"


def verify_user(username, password):
    """验证用户名和密码"""
    user = User.query.filter_by(username=username).first()
    if user and user.check_password(password):
        return user
    return None


def generate_auth_token(user_id, expires_in=864000):
    """为用户ID生成一个有时效性的认证Token"""
    s = URLSafeTimedSerializer(current_app.config['SECRET_KEY'])
    return s.dumps({'id': user_id})


def verify_auth_token(token):
    """验证Token并返回用户对象"""
    s = URLSafeTimedSerializer(current_app.config['SECRET_KEY'])
    try:
        data = s.loads(token, max_age=3600 * 24 * 10)  # 设置一个比生成时更长的有效期用于验证
    except (SignatureExpired, BadTimeSignature):
        return None  # Token无效或已过期

    user = User.query.get(data['id'])
    return user\n--- FILE: app/services/device_service.py ---\n# app/services/device_service.py
# -*- coding: utf-8 -*-

from app import db
from app.models import Device, User

def register_device(user: User, device_data: dict) -> Device:
    """
    为指定用户创建新设备，包含云平台和三元组信息。
    """
    new_device = Device(
        owner=user,
        nickname=device_data.get('nickname'),
        board_model=device_data.get('board_model'),
        # 【核心修改】从请求数据中获取云平台和三元组信息
        cloud_platform=device_data.get('cloud_platform', 'tuya'),
        cloud_product_id=device_data.get('cloud_product_id'),
        cloud_device_id=device_data.get('cloud_device_id'),
        cloud_device_secret=device_data.get('cloud_device_secret')
    )
    db.session.add(new_device)
    db.session.commit()
    return new_device

def get_user_devices(user: User):
    """获取指定用户的所有设备"""
    # 按id降序排序，让最新注册的设备显示在最前面
    return Device.query.filter_by(user_id=user.id).order_by(Device.id.desc()).all()
\n--- FILE: app/services/project_analyzer_service.py ---\n# app/services/project_analyzer_service.py
# -*- coding: utf-8 -*-

import json
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage
from langchain_core.output_parsers import JsonOutputParser

from app.services import device_service
from app.models import User

API_KEY = "a985545a-1c6b-4bf4-8956-8c93ffc2181f"
BASE_URL = "https://ark.cn-beijing.volces.com/api/v3"

analyzer_model = ChatOpenAI(model="ep-20250223112748-lthgv", temperature=0.1, api_key=API_KEY, base_url=BASE_URL)

def get_analyzer_prompt(raw_text: str, user_devices: list) -> str:
    device_context = "\\n".join(
        [f"- {d.nickname} (ID: {d.internal_device_id}, Model: {d.board_model})" for d in user_devices]
    )
    if not device_context:
        device_context = "用户当前未注册任何设备。"

    prompt = f"""
<Prompt>
    <Role>你是一位顶级的物联网解决方案架构师，擅长将复杂的项目需求分解为多个协作的设备任务。</Role>
    <Goal>你的任务是将用户涉及多个设备的、口语化的项目构想，转换成一个包含所有设备任务和它们之间通信关系的、结构化的JSON对象。</Goal>
    <Context>
        <UserRawRequest>{raw_text}</UserRawRequest>
        <UserRegisteredDevices>
        {device_context}
        </UserRegisteredDevices>
    </Context>
    <Instructions>
    1.  **识别项目全局信息**: 从用户请求中提取总体的 `project_name` (项目名称) 和 `project_description` (对整个多设备系统的描述)。
    2.  **识别并定义每个设备 (Device Tasks)**:
        * 在用户的请求中，识别出所有独立工作的物理设备 (例如 "大绿板", "小黑板", "网关")。
        * 为每一个识别出的设备创建一个独立的JSON对象，并放入 `device_tasks` 列表中。
        * 在每个设备对象中：
            * `device_role`: 填写用户描述中对该设备的角色称呼 (e.g., "光照采集端", "报警器")。
            * `internal_device_id`: 根据角色描述，从 `<UserRegisteredDevices>` 列表中选择最匹配的一个设备，将其ID填入。如果找不到匹配或列表为空，留空此字段。
            * `peripherals`: 识别并列出【只属于这个设备】的物理外设 (传感器、执行器等)，并推断其`model`和`pin` (如果引脚未提及，设为 "USER_INPUT_REQUIRED")。
            * `description`: 简要描述【这个设备自己】的核心职责。
    3.  **定义设备间通信 (Inter-Device Communication)**:
        * 分析设备任务之间的信息流动。
        * 在 `inter_device_communication` 列表中为每一条单向数据流创建一个对象。
        * 每个通信对象应包含：`source_device_role` (发送方角色名), `target_device_role` (接收方角色名), `data_description` (描述传输的数据内容), `protocol` (推断通信协议, 默认为 "MQTT")。
    4.  **格式化输出**: 你的最终输出必须是一个遵循下述格式的、不包含任何额外解释的、单一且有效的JSON对象。
    </Instructions>
    <OutputFormat>
    ```json
    {{
      "project_name": "多设备光照监控报警系统",
      "project_description": "一个由光照采集端和云端报警器组成的系统，当光照过强时通过云平台报警。",
      "device_tasks": [
        {{
          "device_role": "光照采集端",
          "internal_device_id": "device-uuid-of-green-board",
          "peripherals": [
            {{ "name": "光照传感器", "model": "BH1750", "pin": 34 }}
          ],
          "description": "使用BH1750传感器读取光照强度，并将数据发送给小黑板。"
        }},
        {{
          "device_role": "报警器",
          "internal_device_id": "device-uuid-of-black-board",
          "peripherals": [],
          "description": "接收来自大绿板的光照强度数据，如果强度高于50lux，就向云平台发送报警信息。"
        }}
      ],
      "inter_device_communication": [
        {{
          "source_device_role": "光照采集端",
          "target_device_role": "报警器",
          "data_description": "光照强度数值 (illumination value)",
          "protocol": "MQTT"
        }}
      ]
    }}
    ```
    </OutputFormat>
</Prompt>
"""
    return prompt

def analyze_requirement(user_id: int, raw_text: str) -> dict:
    user = User.query.get(user_id)
    if not user:
        raise ValueError("User not found")
    user_devices = device_service.get_user_devices(user)
    prompt = get_analyzer_prompt(raw_text, user_devices)
    parser = JsonOutputParser()
    chain = analyzer_model | parser
    try:
        structured_json = chain.invoke([HumanMessage(content=prompt)])
        if 'device_tasks' not in structured_json or not isinstance(structured_json['device_tasks'], list):
            raise ValueError("AI返回的JSON格式不正确，缺少'device_tasks'列表。")
        return structured_json
    except Exception as e:
        print(f"Error invoking LLM or parsing JSON: {e}")
        raise RuntimeError(f"Failed to get a valid JSON response from the analyzer model. Error: {str(e)}")


def analyze_inter_device_communication(device_tasks: list) -> dict:
    """
    【V2 修正后】一个专用的函数，仅根据设备任务列表分析通信关系，并能理解别名。
    """
    # 将设备任务列表格式化为文本，包含角色和昵称，供AI理解
    task_descriptions = "\\n".join(
        [f"- **Role**: {task.get('device_role', 'N/A')}, **Nickname**: {task.get('nickname', 'N/A')}, **Description**: {task.get('description', 'N/A')}" for task in device_tasks]
    )

    prompt = f"""
<Prompt>
    <Role>你是一位顶级的物联网系统架构师，专注于设备间的通信协议和数据流。</Role>
    <Goal>根据下面描述的设备任务列表，分析并定义它们之间所有必要的数据通信链路，请特别注意别名。</Goal>
    <Context>
        <DeviceTasksList>
        {task_descriptions}
        </DeviceTasksList>
    </Context>
    <Instructions>
    1.  **识别实体**: 列表中的每一项代表一个设备，它由唯一的 `Role` 标识。`Nickname` 是该设备的一个别名。
    2.  **解析别名**: 在分析描述时，请理解一个 `Nickname` (例如: "大绿板") 和它对应的 `Role` (例如: "光照采集端") 指的是【完全相同】的实体。不要为它们创建重复的通信路径。
    3.  **分析数据流**: 阅读每个设备的描述，判断哪个设备是数据源，哪个是目标。
    4.  **使用规范角色名**: 在你的最终输出中，必须使用设备的 `Role` 作为 `source_device_role` 和 `target_device_role` 的标识符。不要使用 `Nickname`。
    5.  **创建通信对象**: 为每一条识别出的单向数据流，创建一个包含 `source_device_role`, `target_device_role`, `data_description`, 和 `protocol` (默认为 'MQTT') 的JSON对象。
    6.  **最终格式**: 你的输出必须是一个只包含一个key "inter_device_communication" 的JSON对象，其value是一个包含所有通信对象的列表。如果设备间无需通信，则返回空列表。
    </Instructions>
    <OutputFormat>
    ```json
    {{
      "inter_device_communication": [
        {{
          "source_device_role": "光照采集端",
          "target_device_role": "报警器",
          "data_description": "光照强度数值 (illumination value)",
          "protocol": "MQTT"
        }}
      ]
    }}
    ```
    </OutputFormat>
</Prompt>
"""
    parser = JsonOutputParser()
    chain = analyzer_model | parser
    try:
        result = chain.invoke([HumanMessage(content=prompt)])
        return result
    except Exception as e:
        print(f"Error invoking communication analyzer: {e}")
        raise RuntimeError("Failed to get a valid communication plan from the model.")
\n--- FILE: app/services/user_service.py ---\n# app/services/user_service.py
# -*- coding: utf-8 -*-

from app import db
from app.models import User


def update_user_config(user: User, config_data: dict) -> User:
    """
    更新指定用户的配置信息 (wifi_ssid, wifi_password).

    :param user: 当前登录的用户对象.
    :param config_data: 包含待更新配置的字典.
    :return: 更新后的用户对象.
    """
    if 'wifi_ssid' in config_data:
        user.wifi_ssid = config_data['wifi_ssid']

    if 'wifi_password' in config_data:
        user.wifi_password = config_data['wifi_password']

    db.session.commit()

    return user


# 【新增】获取用户配置的函数
def get_user_config(user: User) -> dict:
    """
    获取指定用户的配置信息。

    :param user: 当前登录的用户对象。
    :return: 包含用户配置的字典。
    """
    return {
        "wifi_ssid": user.wifi_ssid,
        "wifi_password": user.wifi_password
    }
\n--- FILE: app/services/syntax_analyzer_service.py ---\nimport subprocess
import tempfile
import re
import os
import py_compile
import json
from typing import Optional

ERROR_PATTERN = re.compile(r'^\[.+?\]:(\d+):(\d+):\s+\((error|warning|style)\)\s+\[.+?\]\s+(.+)$', re.MULTILINE)


def _to_pos_int(value, default=1):
    """
    把任何行号 / 列号转换为 >=1 的 int。
    非法值统一返回 default。
    """
    try:
        iv = int(value)
        return iv if iv > 0 else default
    except (TypeError, ValueError):
        return default

def analyze_cpp_code(code: str, workspace_path: Optional[str] = None):
    """
    【V3 重构版】C++代码分析的统一入口。
    自动根据是否存在有效工作区路径来选择最佳分析引擎。
    """
    # 决策：如果提供了有效的工作区路径，则使用功能更强大的项目分析器
    if workspace_path and os.path.isdir(workspace_path):
        print(f"\n--- [ANALYZE ENGINE] Using PROJECT mode (PlatformIO) for workspace: {workspace_path} ---")
        return _analyze_cpp_project_with_pio(code, workspace_path)

    # 否则，回退到单文件分析器
    print("\n--- [ANALYZE ENGINE] Using SINGLE-FILE mode (cppcheck) ---")
    return _analyze_cpp_file_with_cppcheck(code)


def _analyze_cpp_project_with_pio(code: str, workspace_path: str):
    """项目分析模式：使用 PlatformIO check 工具进行静态分析。"""
    errors = []
    # 假设需要更新的文件是 app_main.ino，这可以根据需要进行扩展
    main_ino_path = os.path.join(workspace_path, 'src', 'app_main.ino')
    original_content = ""
    if not os.path.exists(main_ino_path):
        # 如果项目结构不完整，无法进行分析
        return {"success": True, "errors": [
            {'line': 1, 'column': 1, 'message': '项目文件 (src/app_main.ino) 不存在，无法执行项目级分析。'}]}

    try:
        with open(main_ino_path, 'r', encoding='utf-8') as f:
            original_content = f.read()
        with open(main_ino_path, 'w', encoding='utf-8') as f:
            f.write(code)

        command = ['platformio', 'check', '--fail-on-error', '--json-output']
        print(f"--- [DEBUG] Executing command in '{workspace_path}': {' '.join(command)}")
        result = subprocess.run(command, capture_output=True, text=True, cwd=workspace_path, timeout=60,
                                encoding='utf-8')

        print(f"--- [DEBUG] pio check return code: {result.returncode}")
        print(f"--- [DEBUG] pio check stdout:\n{result.stdout.strip()}")
        print(f"--- [DEBUG] pio check stderr:\n{result.stderr.strip()}")

        try:
            # PlatformIO check 的 JSON 输出是每行一个对象
            for line in result.stdout.strip().splitlines():
                if line.startswith('{') and line.endswith('}'):
                    issue = json.loads(line)
                    errors.append({
                        'line': _to_pos_int(issue.get('line', 1)),
                        'column': _to_pos_int(issue.get('column', 1)),
                        'message': f"[{issue.get('tool', 'pio')}] {issue.get('message', 'Unknown error')}",
                        'severity': issue.get('severity', 'error').lower()
                    })
        except json.JSONDecodeError:
            error_output = result.stderr or result.stdout
            if error_output:
                errors.append({'line': 1, 'column': 1, 'severity': 'error',
                               'message': f'PlatformIO check failed: {error_output}'})

    except Exception as e:
        errors.append({'line': 1, 'column': 1, 'severity': 'error',
                       'message': f'An unexpected error occurred during analysis: {e}'})
    finally:
        # 无论成功失败，都恢复原始文件内容
        if original_content:
            with open(main_ino_path, 'w', encoding='utf-8') as f:
                f.write(original_content)

    return {"success": True, "errors": errors}


def _analyze_cpp_file_with_cppcheck(code: str):
    """基础分析模式：使用 cppcheck 对单个C++文件进行分析。"""
    errors = []
    temp_file_path = None
    try:
        with tempfile.NamedTemporaryFile(mode='w+', suffix='.cpp', delete=False, encoding='utf-8') as temp_file:
            temp_file.write(code)
            temp_file_path = temp_file.name

        command = [
            'cppcheck', '--enable=all', '--suppress=missingIncludeSystem',
            f'--template=[{{file}}]:{{line}}:{{column}}: ({{severity}}) [{{id}}] {{message}}',
            temp_file_path
        ]
        result = subprocess.run(command, capture_output=True, text=True, timeout=30, encoding='utf-8', errors='ignore')
        combined_output = result.stdout + result.stderr

        if combined_output:
            for match in ERROR_PATTERN.finditer(combined_output):
                errors.append({
                    'line': _to_pos_int(match.group(1)),
                    'column': _to_pos_int(match.group(2)),
                    'severity': match.group(3).lower(),
                    'message': match.group(4).strip()
                })

    except FileNotFoundError:
        errors.append(
            {'line': 1, 'column': 1, 'severity': 'error', 'message': '代码检查器 (cppcheck) 未在服务器上找到。'})
    except Exception as e:
        errors.append({'line': 1, 'column': 1, 'severity': 'error',
                       'message': f'An unexpected error during cppcheck analysis: {e}'})
    finally:
        if temp_file_path and os.path.exists(temp_file_path):
            os.remove(temp_file_path)

    return {"success": True, "errors": errors}


def analyze_python_syntax(code: str):
    """(保持不变) 对Python代码进行静态语法分析。"""
    errors = []
    try:
        with tempfile.NamedTemporaryFile(mode='w+', suffix='.py', delete=False, encoding='utf-8') as temp_file:
            temp_file.write(code)
            temp_file_path = temp_file.name
        py_compile.compile(temp_file_path, doraise=True)
    except py_compile.PyCompileError as e:
        errors.append({
            'line': _to_pos_int(getattr(e, 'lineno', 1)),
            'column': _to_pos_int(getattr(e, 'offset', 1)),
            'severity': 'error',
            'message': e.msg
        })
    except Exception as e:
        errors.append({'line': 1, 'column': 1, 'severity': 'error', 'message': f'Python analysis failed: {e}'})
    finally:
        if 'temp_file_path' in locals() and os.path.exists(temp_file_path):
            os.remove(temp_file_path)
    return {"success": True, "errors": errors}\n--- FILE: app/services/workflow_service.py ---\n# app/services/workflow_service.py
# -*- coding: utf-8 -*-

import threading
import uuid
import time
from pathlib import Path
from langgraph.graph import END
from flask import current_app
import json
import traceback
from sqlalchemy import text  # 核心导入: 用于执行原生SQL以实现原子更新

# 核心修改: 导入数据库模型和实例
from app.langgraph_def.graph_builder import build_graph
from app.langgraph_def.agent_state import AgentState, WorkflowStep
from app.models import Device, WorkflowState, User
from app import db

# 核心重构: 移除内存字典，改为延迟加载图
_GRAPH = None
_GRAPH_LOCK = threading.Lock()

# 【兼容性修正】重新添加 WORKFLOWS 和 WORKFLOW_LOCK 以解决旧模块的 ImportError
# 注意：这些变量不再用于主工作流状态管理，仅为兼容 log_stream_routes.py。
WORKFLOWS = {}
WORKFLOW_LOCK = threading.Lock()

# 为节点ID提供一个友好的UI显示名称映射
NODE_FRIENDLY_NAMES = {
    "master_router": "总路由",
    "device_dispatcher": "设备分发",
    "module_architect": "模块规划",
    "module_dispatcher": "任务分发",
    "api_designer": "API设计",
    "developer": "代码生成与修复",
    "integrator": "代码集成",
    "test_plan_designer": "测试规划",
    "deployment_and_verification": "准备工作区",
    "compile_node": "编译固件",
    "pre_deployment_pause": "等待部署",
    "usb_upload_node": "USB部署",
    "ota_deployment_node": "OTA部署",
    "deploy_and_verify_node": "部署与验证",
    "dp_extractor": "功能点提取",
    "resume_router": "恢复流程"
}


def get_graph():
    """
    延迟初始化函数，确保昂贵的图编译操作只在应用生命周期中执行一次。
    """
    global _GRAPH
    if _GRAPH is None:
        with _GRAPH_LOCK:
            if _GRAPH is None:
                print("--- [System Startup] Compiling workflow graph for the first time... ---")
                _GRAPH = build_graph()
                print("--- [System Startup] Graph compilation complete. ---")
    return _GRAPH


def find_step(steps: list, step_id: str) -> dict | None:
    """在步骤列表中通过ID查找特定步骤。"""
    return next((s for s in steps if s['id'] == step_id), None)


# --- 核心重构: 数据库状态管理辅助函数 ---

def _load_state(workflow_id: str) -> dict | None:
    """从数据库加载并反序列化工作流状态。"""
    record = WorkflowState.query.get(workflow_id)
    if record:
        return json.loads(record.state_json)
    return None


def _save_state(workflow_id: str, state_data: dict):
    """序列化并保存工作流状态到数据库。"""
    record = WorkflowState.query.get(workflow_id)
    state_json_str = json.dumps(state_data)
    if record:
        record.state_json = state_json_str
    else:
        record = WorkflowState(workflow_id=workflow_id, state_json=state_json_str)
        db.session.add(record)
    db.session.commit()


def _delete_state(workflow_id: str):
    """从数据库删除工作流状态。"""
    record = WorkflowState.query.get(workflow_id)
    if record:
        db.session.delete(record)
        db.session.commit()


def _log(workflow_id: str, message: str):
    """
    【核心新增】将日志消息附加到数据库记录中，并同时在终端打印。
    """
    try:
        timestamp = time.strftime('%H:%M:%S', time.localtime())
        log_line_for_print = f"[{timestamp}] {message}"
        log_line_for_db = f"{log_line_for_print}\n"

        # 1. 立即在终端打印，用于实时调试
        print(log_line_for_print)

        # 2. 使用 SQLAlchemy Core API 以确保在多线程环境下的原子性追加操作
        stmt = (
            text("UPDATE workflow_states SET logs = logs || :log_line WHERE workflow_id = :wid")
        )
        db.session.execute(stmt, {"log_line": log_line_for_db, "wid": workflow_id})
        db.session.commit()
    except Exception as e:
        print(f"FATAL ERROR: Failed to write log to database for {workflow_id}: {e}")
        db.session.rollback()


# --- 重构后的服务函数 ---

def _run_graph_in_thread(app, workflow_id: str, initial_state: AgentState):
    """
    【V3.3 架构重构版】在后台线程中执行LangGraph工作流。
    此版本拥有一个更健壮、更符合逻辑的状态更新循环。
    """
    with app.app_context():
        try:
            graph_to_run = get_graph()
            config = {"recursion_limit": 100, "configurable": {"thread_id": workflow_id}}

            # 在图开始前，我们并不知道第一个节点是什么，所以我们让循环来处理第一个节点的启动状态

            for step in graph_to_run.stream(initial_state, config):
                # --- 1. 健壮地解析 stream 的每一步 ---
                # stream 的产物是一个字典，key是节点名，value是该节点的返回状态更新
                if not isinstance(step, dict) or not step:
                    continue

                try:
                    # 使用 list(step.items())[0] 来安全地获取第一个键值对
                    current_node_id, state_update_from_node = list(step.items())[0]
                except IndexError:
                    continue  # 如果是空字典，则跳过

                # --- 2. 核心保护：防止 'NoneType' 错误 ---
                # 如果节点的返回值为 None，我们将其视为空字典，避免后续操作崩溃。
                if state_update_from_node is None:
                    state_update_from_node = {}

                # --- 3. 加载最新的工作流数据 ---
                workflow_data = _load_state(workflow_id)
                if not workflow_data:
                    print(f"工作流 {workflow_id} 状态从数据库中消失，线程中止。")
                    break

                # --- 4. 实现更清晰的状态更新逻辑 ---
                latest_state = workflow_data['latest_state']
                steps_list = latest_state['workflow_steps']
                latest_state.update(state_update_from_node)

                # --- [最终修正] 在设备分发节点完成后，打印设备切换的分隔符 ---
                if current_node_id == "device_dispatcher":
                    new_device_task = latest_state.get('current_device_task')
                    if new_device_task:
                        device_role = new_device_task.get('device_role', 'Unknown Device')
                        _log(workflow_id, f"\\n========================================================")
                        _log(workflow_id, f"===== 开始处理设备: {device_role} =====")
                        _log(workflow_id, f"========================================================")
                # --- 修正结束 ---

                # 找到刚刚运行完成的节点
                completed_step = find_step(steps_list, current_node_id)
                if completed_step:
                    # 如果它之前是 'running'，现在更新它的最终状态
                    if completed_step['status'] == 'running' or completed_step['status'] == 'pending':
                        completed_step['end_time'] = time.time()
                        feedback = state_update_from_node.get('feedback', '')

                        if "FAIL:" in feedback:
                            completed_step['status'] = 'failed'
                            # 将详细错误信息记录到步骤日志
                            completed_step['log'] = feedback.split('FAIL:', 1)[-1].strip()
                            _log(workflow_id, f"步骤 '{completed_step['name']}' FAILED.")
                        else:
                            completed_step['status'] = 'completed'
                            _log(workflow_id, f"步骤 '{completed_step['name']}' 已完成.")

                        # 如果有产出物，也记录下来 (可选)
                        if 'output' in state_update_from_node:
                            completed_step['output'] = str(state_update_from_node['output'])

                # d) 更新工作流的总体状态
                if current_node_id == "pre_deployment_pause":
                    workflow_data['status'] = "PAUSED"
                elif current_node_id == END or current_node_id == "__end__":
                    # 只有在图自然结束后才标记为COMPLETED
                    if workflow_data['status'] != "PAUSED":
                        workflow_data['status'] = "COMPLETED"
                else:
                    workflow_data['status'] = "RUNNING"

                # 找到下一个将要运行的节点并标记为 'running' (这是一个最佳实践，但较难实现)
                # 为了简化，我们只在日志中打印节点的开始信息
                # _log(workflow_id, f"步骤 '{next_node_name}' 已开始.")

                # --- 6. 保存更新后的状态 ---
                workflow_data['latest_state'] = latest_state
                _save_state(workflow_id, workflow_data)

            # --- 7. 循环结束后的最终处理 ---
            # 循环结束后，再次加载状态，检查是否需要更新最终状态
            final_workflow_data = _load_state(workflow_id)
            if final_workflow_data and final_workflow_data['status'] == "RUNNING":
                final_workflow_data['status'] = 'COMPLETED'
                _save_state(workflow_id, final_workflow_data)
                _log(workflow_id, "工作流 COMPLETED.")

        except Exception as e:
            # 异常处理逻辑保持不变
            error_message = f"工作流线程 {workflow_id} 崩溃: {e}"
            print(error_message)
            traceback.print_exc()

            workflow_data = _load_state(workflow_id)
            if workflow_data:
                workflow_data['status'] = "FAILED"
                steps_list = workflow_data['latest_state']['workflow_steps']
                # 查找最后一个状态为 'running' 的步骤并标记为失败
                running_step = next((s for s in steps_list if s['status'] == 'running'), None)
                if running_step:
                    running_step['status'] = 'failed'
                    error_log_content = f"ERROR: {str(e)}\n{traceback.format_exc()}"
                    running_step['log'] = error_log_content
                    running_step['end_time'] = time.time()
                    _log(workflow_id, f"步骤 '{running_step['name']}' FAILED.")
                _save_state(workflow_id, workflow_data)


def start_workflow(user_id: int, request_data: dict) -> dict:
    """启动一个新的工作流，并将初始状态存入数据库。"""
    workflow_id = f"wf-{uuid.uuid4()}"
    device_tasks_from_request = request_data.get('device_tasks', [])
    if not device_tasks_from_request:
        raise ValueError("Request must contain a list of device_tasks.")

    for task in device_tasks_from_request:
        device_id = task.get('internal_device_id')
        if not device_id:
            raise ValueError(f"Device task for role '{task.get('device_role')}' is missing an internal_device_id.")
        device = Device.query.filter_by(internal_device_id=device_id, user_id=user_id).first()
        if not device:
            raise ValueError(f"Device with ID {device_id} not found or does not belong to the user.")
        task['board'] = device.board_model

    project_root = Path(__file__).resolve().parent.parent
    workspace_path = project_root / "temp_workspaces" / workflow_id
    workspace_path.mkdir(parents=True, exist_ok=True)

    # 【性能优化修正】确保共享缓存目录在工作流开始时就存在
    cache_path = project_root / "temp_workspaces" / ".build_cache"
    cache_path.mkdir(exist_ok=True)
    print(f"--- [Workflow Start] Ensured shared build cache exists at: {cache_path} ---")

    initial_steps: list[WorkflowStep] = []
    for node_id in NODE_FRIENDLY_NAMES.keys():
        initial_steps.append({
            "id": node_id,
            "name": NODE_FRIENDLY_NAMES.get(node_id, node_id.replace("_", " ").title()),
            "status": "pending", "log": "", "start_time": 0.0, "end_time": 0.0, "output": None,
        })

    communication_plan = request_data.get('inter_device_communication', [])

    # 从数据库加载用户和设备信息以填充初始状态
    user = User.query.get(user_id)
    initial_wifi_ssid = user.wifi_ssid if user else ""
    initial_wifi_password = user.wifi_password if user else ""

    initial_state = AgentState(
        workflow_id=workflow_id, user_id=user_id,
        project_name=request_data.get('project_name', '未命名多设备项目'),
        status="RUNNING", workflow_steps=initial_steps,
        user_input=request_data.get('project_description', ''),
        device_tasks_queue=device_tasks_from_request,
        system_plan={"communication": communication_plan},
        workspace_path=str(workspace_path.resolve()),
        available_actions=[], current_device_task=None, current_api_spec=None,
        module_tasks=[], current_module_task=None, completed_modules={},
        feedback="", project_files={}, test_plan=None, original_module_plan=None,
        build_dir="", firmware_path=None, deployment_choice=None,
        dp_info_list=[], faulty_module=None, user_action=None,
        # 填充初始的WiFi信息
        wifi_ssid=initial_wifi_ssid,
        wifi_password=initial_wifi_password,
        cloud_product_id=None,
        cloud_device_id=None,
        cloud_device_secret=None
    )

    workflow_data = {"status": "STARTING", "latest_state": initial_state}
    _save_state(workflow_id, workflow_data)
    _log(workflow_id, f"New workflow created for project: {initial_state['project_name']}")

    app = current_app._get_current_object()
    thread = threading.Thread(target=_run_graph_in_thread, args=(app, workflow_id, initial_state))
    thread.daemon = True
    thread.start()

    return {"workflow_id": workflow_id, "status": "RUNNING", "workflow_steps": initial_steps, "available_actions": []}

def get_workflow_status(workflow_id: str) -> dict:
    """从数据库获取工作流状态。"""
    workflow_data = _load_state(workflow_id)
    if not workflow_data:
        raise ValueError("Workflow not found.")

    status = workflow_data['status']
    state = workflow_data['latest_state']

    available_actions = []
    if status == "PAUSED":
        available_actions = state.get('available_actions', [])
        if not available_actions:
            available_actions.extend(["DEPLOY_USB", "DEPLOY_OTA"])

    return {"workflow_id": workflow_id, "status": status, "workflow_steps": state.get('workflow_steps', []),
            "available_actions": available_actions}


def post_workflow_action(workflow_id: str, action_data: dict):
    """接收用户操作，更新数据库状态，并启动恢复线程。"""
    action = action_data.get("action")
    workflow_data = _load_state(workflow_id)

    if not workflow_data:
        raise ValueError("Workflow not found.")
    if workflow_data['status'] != 'PAUSED':
        raise ValueError(f"Workflow is in '{workflow_data['status']}' state, cannot perform actions.")

    state_to_resume = workflow_data['latest_state']
    state_to_resume['user_action'] = action
    state_to_resume['deployment_choice'] = "usb" if action == "DEPLOY_USB" else "ota"

    workflow_data['status'] = "RUNNING"
    workflow_data['latest_state'] = state_to_resume
    _save_state(workflow_id, workflow_data)
    _log(workflow_id, f"Action '{action}' received. Resuming graph execution.")

    app = current_app._get_current_object()
    thread = threading.Thread(target=_run_graph_in_thread, args=(app, workflow_id, state_to_resume))
    thread.daemon = True
    thread.start()


# --- 文件操作函数 (保持不变) ---
def get_file_tree(workflow_id: str) -> list:
    workflow_data = _load_state(workflow_id)
    if not workflow_data:
        raise ValueError("Workflow not found.")

    workspace_path_str = workflow_data['latest_state'].get('workspace_path')
    if not workspace_path_str: return []

    workspace_path = Path(workspace_path_str)
    if not workspace_path.exists(): return []

    def build_tree(dir_path: Path):
        tree = []
        for item in sorted(dir_path.iterdir(), key=lambda x: (x.is_file(), x.name.lower())):
            if item.name.startswith('.'): continue
            node = {"name": item.name, "path": str(item.relative_to(workspace_path)).replace("\\", "/")}
            if item.is_dir():
                node["type"] = "folder"
                node["children"] = build_tree(item)
            else:
                node["type"] = "file"
            tree.append(node)
        return tree

    return build_tree(workspace_path)


def get_file_content(workflow_id: str, file_path: str) -> str:
    workflow_data = _load_state(workflow_id)
    if not workflow_data: raise ValueError("Workflow not found.")

    workspace_path = Path(workflow_data['latest_state']['workspace_path'])
    full_path = (workspace_path / file_path).resolve()

    if not str(full_path).startswith(str(workspace_path.resolve())):
        raise ValueError("Access denied: path is outside the workspace.")

    if not full_path.is_file():
        raise FileNotFoundError(f"File not found: {file_path}")

    return full_path.read_text(encoding='utf-8')


def save_file_content(workflow_id: str, file_path: str, content: str):
    workflow_data = _load_state(workflow_id)
    if not workflow_data: raise ValueError("Workflow not found.")

    workspace_path = Path(workflow_data['latest_state']['workspace_path'])
    full_path = (workspace_path / file_path).resolve()

    if not str(full_path).startswith(str(workspace_path.resolve())):
        raise ValueError("Access denied: path is outside the workspace.")

    if not full_path.exists():
        raise FileNotFoundError(f"File not found, cannot save: {file_path}")

    full_path.write_text(content, encoding='utf-8')
\n--- FILE: app/langgraph_def/__init__.py ---\n\n--- FILE: app/langgraph_def/agent_state.py ---\n# app/langgraph_def/agent_state.py
# -*- coding: utf-8 -*-

from typing import TypedDict, List, Dict, Optional, Any


from typing import TypedDict, List, Dict, Optional, Any


class WorkflowStep(TypedDict):
    """Defines the structure for a single step in the workflow dashboard."""
    id: str  # The node's unique ID, e.g., "module_architect"
    name: str  # The user-friendly name for the UI, e.g., "模块规划"
    status: str  # 'pending', 'running', 'completed', 'failed'
    log: str  # The log output from this step
    start_time: float
    end_time: float
    output: Optional[str]  # 新增：用于存储步骤的核心产出物


class AgentState(TypedDict):
    """
    Defines the entire state of the workflow graph, adapted for a visual dashboard.
    """
    # --- V3 API and Dashboard Fields ---
    workflow_id: str
    user_id: Optional[int]
    status: str  # Overall workflow status (RUNNING, PAUSED, COMPLETED, FAILED)
    workflow_steps: List[WorkflowStep]  # New structured list for dashboard visualization
    available_actions: List[str]
    workspace_path: str
    user_action: Optional[str]

    # 【核心修改】新增项目名称字段
    project_name: str

    # --- 【核心修正】新增用于传递数据库上下文的字段 ---
    wifi_ssid: Optional[str]
    wifi_password: Optional[str]
    cloud_product_id: Optional[str]
    cloud_device_id: Optional[str]
    cloud_device_secret: Optional[str]


    # --- Core Fields from original logic ---
    user_input: str
    system_plan: Optional[Any]
    device_tasks_queue: List[Any]
    current_device_task: Optional[Any]
    current_api_spec: Optional[str]
    module_tasks: List[Any]
    current_module_task: Optional[Any]
    completed_modules: Dict[str, Any]
    feedback: str
    project_files: Dict[str, Dict[str, str]]
    test_plan: Optional[Dict]
    original_module_plan: Optional[List[Any]]
    build_dir: str
    firmware_path: Optional[str]
    deployment_choice: Optional[str]
    dp_info_list: List[Dict[str, str]]
    faulty_module: Optional[str]

\n--- FILE: app/langgraph_def/graph_builder.py ---\n# app/langgraph_def/graph_builder.py
# -*- coding: utf-8 -*-

# =================================================================================
# 1. Imports & Setup (无变动)
# =================================================================================
import json
import sys
import os
import re
import shutil
import subprocess
from copy import deepcopy
from pathlib import Path
from pprint import pprint
import time
import textwrap
import socket
from typing import Dict, Optional, List

from langchain_core.messages import HumanMessage
from langchain_openai import ChatOpenAI
from langgraph.graph import StateGraph, END
from langchain_core.output_parsers import JsonOutputParser
from langchain_core.prompts import ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate
from thefuzz import process

from .agent_state import AgentState
from app.models import User, Device
from openpyxl import Workbook
from openpyxl.utils import get_column_letter

# =================================================================================
# 2. 模型初始化 (无变动)
# =================================================================================
API_KEY = "a985545a-1c6b-4bf4-8956-8c93ffc2181f"
BASE_URL = "https://ark.cn-beijing.volces.com/api/v3"

system_architect_model = ChatOpenAI(model="ep-20250223112748-lthgv", temperature=0.5, api_key=API_KEY,
                                    base_url=BASE_URL)
module_architect_model = ChatOpenAI(model="ep-20250223112748-lthgv", temperature=0.4, api_key=API_KEY,
                                    base_url=BASE_URL)
api_designer_model = ChatOpenAI(model="ep-20250223112748-lthgv", temperature=0.3, api_key=API_KEY, base_url=BASE_URL)
developer_model = ChatOpenAI(model="ep-20250223112748-lthgv", temperature=0.2, api_key=API_KEY, base_url=BASE_URL)
tester_model = ChatOpenAI(model="ep-20250223112748-lthgv", temperature=0.1, api_key=API_KEY, base_url=BASE_URL)
dp_extractor_model = ChatOpenAI(model="ep-20250223112748-lthgv", temperature=0.2, api_key=API_KEY, base_url=BASE_URL)


# =================================================================================
# 3. 辅助函数及核心模块生成器 (无变动)
# =================================================================================

def robust_rmtree(path: Path, retries: int = 5, delay: int = 1):
    """
    一个更健壮的删除函数，可以处理文件和目录，并在遇到权限错误时重试。
    """
    for i in range(retries):
        if not path.exists():
            return

        try:
            if path.is_dir():
                shutil.rmtree(path)
            else:
                path.unlink()

            if not path.exists():
                return

        except (PermissionError, OSError) as e:
            print(
                f"  [robust_rmtree] Warn: Attempt {i + 1}/{retries} to delete '{path}' failed: {e}. Retrying in {delay}s...")
            time.sleep(delay)

    if path.exists():
        raise OSError(f"Failed to delete path '{path}' after {retries} retries. It might be locked by another process.")


API_PACKAGE_DIR = Path(__file__).resolve().parent.parent.parent / 'API_Package'

BOARD_ID_MAP = {
    "esp32": "esp32dev",
    "esp32dev": "esp32dev",
    "esp32-wroom-32": "esp32dev",
    "esp32-wroom-32d": "esp32dev",
    "esp32-wroom-32u": "esp32dev",
    "esp32s3": "esp32-s3-devkitc-1",
    "esp32s2": "esp32-s2-saola-1",
    "esp32c3": "esp32-c3-devkitm-1",
}


def find_board_id(user_board_name: str) -> Optional[str]:
    """使用映射表和模糊搜索来查找最匹配的官方开发板ID。"""
    if not user_board_name: return None
    clean_name = user_board_name.strip().lower().replace("-", "").replace("_", "")

    for alias, official_id in BOARD_ID_MAP.items():
        if clean_name == alias.replace("-", "").replace("_", ""):
            print(f"  通过精确匹配找到: '{user_board_name}' -> '{official_id}'")
            return official_id

    best_match, score = process.extractOne(clean_name, BOARD_ID_MAP.keys())
    if score > 85:
        matched_id = BOARD_ID_MAP[best_match]
        print(f"  通过模糊搜索找到匹配: '{user_board_name}' -> '{best_match}' (相似度: {score}%) -> '{matched_id}'")
        return matched_id

    print(f"  在本地映射中未找到 '{user_board_name}' 的高可信度匹配。将使用默认值。")
    return None


def find_api_spec(peripheral_name: str) -> Optional[str]:
    """
    通过两阶段流程在本地查找外设的API规范：
    1. 精确文件名匹配。
    2. 模糊文件名匹配。
    如果找到，返回文件内容；否则返回 None。
    """
    if not API_PACKAGE_DIR.exists():
        print(f"  警告: API包目录 '{API_PACKAGE_DIR}' 不存在。跳过本地搜索。")
        return None

    exact_filename = f"{peripheral_name.upper().replace(' ', '_')}_API_Package.json"
    exact_filepath = API_PACKAGE_DIR / exact_filename
    if exact_filepath.is_file():
        print(f"  API found via exact match in local cache: '{exact_filename}'")
        try:
            return exact_filepath.read_text(encoding='utf-8')
        except Exception as e:
            print(f"  错误: 读取缓存的API文件失败 {exact_filepath}: {e}")
            return None

    all_api_files = [f.name for f in API_PACKAGE_DIR.glob('*_API_Package.json')]
    if not all_api_files:
        return None

    file_map = {f.replace('_API_Package.json', ''): f for f in all_api_files}
    best_match_core, score = process.extractOne(peripheral_name.upper(), file_map.keys())

    CONFIDENCE_THRESHOLD = 85
    if score >= CONFIDENCE_THRESHOLD:
        fuzzy_filename = file_map[best_match_core]
        fuzzy_filepath = API_PACKAGE_DIR / fuzzy_filename
        print(f"  API found via fuzzy match (Confidence: {score}%): '{peripheral_name}' -> '{fuzzy_filename}'")
        try:
            return fuzzy_filepath.read_text(encoding='utf-8')
        except Exception as e:
            print(f"  错误: 读取缓存的API文件失败 {fuzzy_filepath}: {e}")
            return None

    return None


def get_local_ip() -> str:
    s = None
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(('8.8.8.8', 53))
        ip = s.getsockname()[0]
        return ip
    except Exception as e:
        return "127.0.0.1"
    finally:
        if s: s.close()


def extract_code(content: str, lang: str = "cpp", block_name: str = None) -> str:
    if block_name:
        pattern = re.compile(rf'\[{block_name.upper()}\]\s*```{lang}\s*([\s\S]*?)\s*```', re.DOTALL)
    else:
        pattern = re.compile(rf'```{lang}\s*([\s\S]*?)\s*```', re.DOTALL)
    match = pattern.search(content)
    return match.group(1).strip() if match else f"// Error: Could not extract code block '{block_name or lang}'."


def generate_mbedtls_sha256_header() -> str:
    return """
#ifndef CUSTOM_SHA256_H
#define CUSTOM_SHA256_H
#include <Arduino.h>
#include "mbedtls/sha256.h"
class SHA256 {
public:
    SHA256();
    void update(const void *data, size_t len);
    void finalize(byte *hash);
    static String toString(const byte* hash, int len = 32);
private:
    mbedtls_sha256_context ctx;
};
#endif // CUSTOM_SHA256_H
"""


def generate_mbedtls_sha256_source() -> str:
    return """
#include "SHA256.h"
SHA256::SHA256() {
    mbedtls_sha256_init(&ctx);
    mbedtls_sha256_starts_ret(&ctx, 0);
}
void SHA256::update(const void *data, size_t len) {
    if (len == 0) return;
    mbedtls_sha256_update_ret(&ctx, (const unsigned char *)data, len);
}
void SHA256::finalize(byte *hash) {
    mbedtls_sha256_finish_ret(&ctx, hash);
    mbedtls_sha256_starts_ret(&ctx, 0);
}
String SHA256::toString(const byte* hash, int len) {
    char hex_string[len * 2 + 1];
    for (int i = 0; i < len; i++) {
        sprintf(&hex_string[i * 2], "%02x", hash[i]);
    }
    hex_string[len * 2] = '\\0';
    return String(hex_string);
}
"""


def generate_tuya_handler_header() -> str:
    return """
#ifndef TUYA_HANDLER_H
#define TUYA_HANDLER_H
#include <Arduino.h>
#include <WiFiClientSecure.h>
#include <PubSubClient.h>

// Define a function pointer type for the application callback
typedef void (*TuyaAppCallback)(String &topic, String &payload);

// Provides the calculated credentials for app_main to use in its connection logic
void tuya_get_mqtt_credentials(char* out_client_id, char* out_username, char* out_password);

// A non-blocking, passive initialization function
void tuya_init(WiFiClientSecure& wifiClient, PubSubClient& mqttClient, TuyaAppCallback app_callback);

// A function to be called by app_main AFTER a successful connection
void tuya_subscribe_topics();

void tuya_loop();

// Publishes data to the Tuya cloud
bool tuya_publish_data(const String& data_json_string);

// A function for app_main's master callback to dispatch Tuya messages
void tuya_handle_mqtt_message(char *topic, byte *payload, unsigned int length);

#endif // TUYA_HANDLER_H
"""


def generate_config_manager_header(
    device_id: str,
    wifi_ssid: str,
    wifi_password: str,
    product_id: str,
    cloud_device_id: str,
    device_secret: str
) -> str:
    local_pc_ip = get_local_ip()

    # 使用传入的参数，如果为空则使用占位符
    final_wifi_ssid = wifi_ssid if wifi_ssid else "YOUR_WIFI_SSID"
    final_wifi_password = wifi_password if wifi_password else "YOUR_WIFI_PASSWORD"
    final_product_id = product_id if product_id else "YOUR_PRODUCT_ID"
    final_cloud_device_id = cloud_device_id if cloud_device_id else "YOUR_DEVICE_ID"
    final_device_secret = device_secret if device_secret else "YOUR_DEVICE_SECRET"

    print("--- [generate_config_manager_header] Generating with following data: ---")
    print(f"  WIFI_SSID: {final_wifi_ssid}")
    print(f"  WIFI_PASSWORD: {'*' * len(final_wifi_password) if final_wifi_password else '(empty)'}")
    print(f"  TUYA_PRODUCT_ID: {final_product_id}")
    print(f"  TUYA_DEVICE_ID: {final_cloud_device_id}")
    print(f"  TUYA_DEVICE_SECRET: {'*' * len(final_device_secret) if final_device_secret else '(empty)'}")
    print("---------------------------------------------------------------------")

    return f'''
#ifndef CONFIG_MANAGER_H
#define CONFIG_MANAGER_H

// --- Wi-Fi Credentials ---
#define WIFI_SSID "{final_wifi_ssid}"
#define WIFI_PASSWORD "{final_wifi_password}"

// --- Tuya Cloud Credentials ---
#define TUYA_PRODUCT_ID "{final_product_id}"
#define TUYA_DEVICE_ID  "{final_cloud_device_id}"
#define TUYA_DEVICE_SECRET "{final_device_secret}"

// --- Local Network Configuration ---
#define MQTT_BROKER "{local_pc_ip}"
#define MQTT_PORT 1883
#define OTA_HTTP_SERVER "{local_pc_ip}"
#define OTA_HTTP_PORT 8000

// --- Device Identity ---
#define DEVICE_ID "{device_id}"
#define FIRMWARE_VERSION "1.0.0"

// --- MQTT Topics ---
#define OTA_TOPIC_BASE "/ota/"
#define DEBUG_TOPIC_BASE "/debug/"

#endif // CONFIG_MANAGER_H
'''


def generate_tuya_handler_source() -> str:
    # V2 Refactored: This handler is now a passive library.
    # It provides credentials but does not manage the connection itself.
    # FIX: Corrected the formatting of the multi-line CA certificate string to resolve C++ compilation errors.
    return """
#include "tuya_handler.h"
#include "config_manager.h"
#include <ArduinoJson.h>
#include <time.h>
#include "SHA256.h"

// The root CA certificate for Tuya's MQTT broker
static const char tuya_ca_cert[] PROGMEM =
    "-----BEGIN CERTIFICATE-----\\n"
    "MIIGiTCCBXGgAwIBAgIIGkbwkRaiCBgwDQYJKoZIhvcNAQELBQAwgbQxCzAJBgNV\\n"
    "BAYTAlVTMRAwDgYDVQQIEwdBcml6b25hMRMwEQYDVQQHEwpTY290dHNkYWxlMRow\\n"
    "GAYDVQQKExFHb0RhZGR5LmNvbSwgSW5jLjEtMCsGA1UECxMkaHR0cDovL2NlcnRz\\n"
    "LmdvZGFkZHkuY29tL3JlcG9zaXRvcnkvMTMwMQYDVQQDEypHbyBEYWRkeSBTZWN1\\n"
    "cmUgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IC0gRzIwHhcNMjQwODE5MDU1NTM4WhcN\\n"
    "MjUwOTIwMDU1NTM4WjAXMRUwEwYDVQQDDAwqLnR1eWFjbi5jb20wggEiMA0GCSqG\\n"
    "SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDlYq+PYMUih5G0Ob9XX1a57li+CA2YCy38\\n"
    "1gmpStB+/XqC4mHc8GYhEV9rnfd0egs8R6G9J/FwXw0UfNER3UEg1WYEJ0Hi6eMX\\n"
    "0BI65+wZdvJxEpFhwcXU50tPTADxudw8I5haJ5Cv453yH7/kg2M2Qk32YjLwV9Yz\\n"
    "79c6Ogzsg27FCDTghiWuqMq3cImNcYGKC0vNv5D8B+YjI41n1a0hgZXloP9478b/\\n"
    "S/uxPZdg8CpsXRpcTwmxcOScy7ip4aqiYjvjwVB2ZIhprTJiwdInWfiUYitgD5j+\\n"
    "JzW1hahMwu3fgYYozcduYdbbTyicAbGN88EvT1XChTEun72Tw0JfAgMBAAGjggM5\\n"
    "MIIDNTAMBgNVHRMBAf8EAjAAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcD\\n"
    "AjAOBgNVHQ8BAf8EBAMCBaAwOQYDVR0fBDIwMDAuoCygKoYoaHR0cDovL2NybC5n\\n"
    "b2RhZGR5LmNvbS9nZGlnMnMxLTI4ODM0LmNybDBdBgNVHSAEVjBUMEgGC2CGSAGG\\n"
    "/W0BBxcBMDkwNwYIKwYBBQUHAgEWK2h0dHA6Ly9jZXJ0aWZpY2F0ZXMuZ29kYWRk\\n"
    "eS5jb20vcmVwb3NpdG9yeS8wCAYGZ4EMAQIBMHYGCCsGAQUFBwEBBGowaDAkBggr\\n"
    "BgEFBQcwAYYYaHR0cDovL29jc3AuZ29kYWRkeS5jb20vMEAGCCsGAQUFBzAChjRo\\n"
    "dHRwOi8vY2VydGlmaWNhdGVzLmdvZGFkZHkuY29tL3JlcG9zaXRvcnkvZ2RpZzIu\\n"
    "Y3J0MB8GA1UdIwQYMBaAFEDCvSeOzDSDMKIz1/tss/C0LIDOMCMGA1UdEQQcMBqC\\n"
    "DCoudHV5YWNuLmNvbYIKdHV5YWNuLmNvbTAdBgNVHQ4EFgQUGwrpXqEzmkB903gf\\n"

    "iQpZ18e8geMwggF9BgorBgEEAdZ5AgQCBIIBbQSCAWkBZwB2ABLxTjS9U3JMhAYZ\\n"
    "w48/ehP457Vih4icbTAFhOvlhiY6AAABkWk0kgkAAAQDAEcwRQIgfAhWc0NWPQFk\\n"
    "KdCfg4A9A+Io0bWQdAKr6/vYpr3IQaYCIQCbYHiULR0Nkw4cGtFK3HympmuNbgkt\\n"
    "rd51XUQcTfCwTAB1AH1ZHhLheCp7HGFnfF79+NCHXBSgTpWeuQMv2Q6MLnm4AAAB\\n"
    "kWk0ktwAAAQDAEYwRAIgKM9rEIVMjHCUnxUkQYgXeVvVume85E6oiHoFfBaGuIEC\\n"
    "IER4giiSxqR4ftNJkfi8v4ftQrrOt7iZ4FDlnSzKBCpLAHYAzPsPaoVxCWX+lZtT\\n"
    "zumyfCLphVwNl422qX5UwP5MDbAAAAGRaTSTmwAABAMARzBFAiBCqgaBigm1c/hH\\n"
    "owy25qZfn+I8mpc+H1VrVlEZZqAj8gIhAI2ZV/CaarGQ/j8HRwHq7vO+5j/QlXbJ\\n"
    "tI/XHIHqZQW2MA0GCSqGSIb3DQEBCwUAA4IBAQAnWV1if9nZK6aVftzj/w2VkmBY\\n"
    "zBLSO+3Co1Qyc3qxBsCpdLxVCycN9HcmOAAgVdMg5WLs542KGMvIahh0PJzyIrMG\\n"
    "uTeLUvUmb9yGZb+oDLlsqLeAxJZi/Mf4ZN5Ezq52bDotXb6+qrftCrQj+Vz3dp9N\\n"
    "U9XGvts/lM1dpnnoCoVpMTM+kzyzkmIJbb/zSy8U1TLbja5HYdtYVodeMexG+PE/\\n"
    "F+OGeB3AWU5yhSr65XRMWKynNglfspsnvU2azab+3CViOFsCR6Th30ohQKgxjldQ\\n"
    "xfN2SPdPvZjOnmXZT75rMeGahN8PqloYFP12VwsF+IPo3m50U2hstS2IiA3U\\n"
    "-----END CERTIFICATE-----\\n"
    "-----BEGIN CERTIFICATE-----\\n"
    "MIIE0DCCA7igAwIBAgIBBzANBgkqhkiG9w0BAQsFADCBgzELMAkGA1UEBhMCVVMx\\n"
    "EDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxGjAYBgNVBAoT\\n"
    "EUdvRGFkZHkuY29tLCBJbmMuMTEwLwYDVQQDEyhHbyBEYWRkeSBSb290IENlcnRp\\n"
    "ZmljYXRlIEF1dGhvcml0eSAtIEcyMB4XDTExMDUwMzA3MDAwMFoXDTMxMDUwMzA3\\n"
    "MDAwMFowgbQxCzAJBgNVBAYTAlVTMRAwDgYDVQQIEwdBcml6b25hMRMwEQYDVQQH\\n"
    "EwpTY290dHNkYWxlMRowGAYDVQQKExFHb0RhZGR5LmNvbSwgSW5jLjEtMCsGA1UE\\n"
    "CxMkaHR0cDovL2NlcnRzLmdvZGFkZHkuY29tL3JlcG9zaXRvcnkvMTMwMQYDVQQD\\n"
    "EypHbyBEYWRkeSBTZWN1cmUgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IC0gRzIwggEi\\n"
    "MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC54MsQ1K92vdSTYuswZLiBCGzD\\n"
    "BNliF44v/z5lz4/OYuY8UhzaFkVLVat4a2ODYpDOD2lsmcgaFItMzEUz6ojcnqOv\\n"
    "K/6AYZ15V8TPLvQ/MDxdR/yaFrzDN5ZBUY4RS1T4KL7QjL7wMDge87Am+GZHY23e\\n"
    "cSZHjzhHU9FGHbTj3ADqRay9vHHZqm8A29vNMDp5T19MR/gd71vCxJ1gO7GyQ5HY\\n"
    "pDNO6rPWJ0+tJYqlxvTV0KaudAVkV4i1RFXULSo6Pvi4vekyCgKUZMQWOlDxSq7n\\n"
    "eTOvDCAHf+jfBDnCaQJsY1L6d8EbyHSHyLmTGFBUNUtpTrw700kuH9zB0lL7AgMB\\n"
    "AAGjggEaMIIBFjAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNV\\n"
    "HQ4EFgQUQMK9J47MNIMwojPX+2yz8LQsgM4wHwYDVR0jBBgwFoAUOpqFBxBnKLbv\\n"
    "9r0FQW4gwZTaD94wNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8v\\n"
    "b2NzcC5nb2RhZGR5LmNvbS8wNQYDVR0fBC4wLDAqoCigJoYkaHR0cDovL2NybC5n\\n"
    "b2RhZGR5LmNvbS9nZHJvb3QtZzIuY3JsMEYGA1UdIAQ/MD0wOwYEVR0gADAzMDEG\\n"

    "CCsGAQUFBwIBFiVodHRwczovL2NlcnRzLmdvZGFkZHkuY29tL3JlcG9zaXRvcnkv\\n"
    "MA0GCSqGSIb3DQEBCwUAA4IBAQAIfmyTEMg4uJapkEv/oV9PBO9sPpyIBslQj6Zz\\n"
    "91cxG7685C/b+LrTW+C05+Z5Yg4MotdqY3MxtfWoSKQ7CC2iXZDXtHwlTxFWMMS2\\n"
    "RJ17LJ3lXubvDGGqv+QqG+6EnriDfcFDzkSnE3ANkR/0yBOtg2DZ2HKocyQetawi\\n"
    "DsoXiWJYRBuriSUBAA/NxBti21G00w9RKpv0vHP8ds42pM3Z2Czqrpv1KrKQ0U11\\n"
    "GIo/ikGQI31bS/6kA1ibRrLDYGCD+H1QQc7CoZDDu+8CL9IVVO5EFdkKrqeKM+2x\\n"
    "LXY2JtwE65/3YR8V3Idv7kaWKK2hJn0KCacuBKONvPi8BDAB\\n"
    "-----END CERTIFICATE-----\\n"
    "-----BEGIN CERTIFICATE-----\\n"
    "MIIEfTCCA2WgAwIBAgIDG+cVMA0GCSqGSIb3DQEBCwUAMGMxCzAJBgNVBAYTAlVT\\n"
    "MSEwHwYDVQQKExhUaGUgR28gRGFkZHkgR3JvdXAsIEluYy4xMTAvBgNVBAsTKEdv\\n"
    "IERhZGR5IENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTQwMTAx\\n"
    "MDcwMDAwWhcNMzEwNTMwMDcwMDAwWjCBgzELMAkGA1UEBhMCVVMxEDAOBgNVBAgT\\n"
    "B0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxGjAYBgNVBAoTEUdvRGFkZHku\\n"
    "Y29tLCBJbmMuMTEwLwYDVQQDEyhHbyBEYWRkeSBSb290IENlcnRpZmljYXRlIEF1\\n"
    "dGhvcml0eSAtIEcyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAv3Fi\\n"
    "CPH6WTT3G8kYo/eASVjpIoMTpsUgQwE7hPHmhUmfJ+r2hBtOoLTbcJjHMgGxBT4H\\n"
    "Tu70+k8vWTAi56sZVmvigAf88xZ1gDlRe+X5NbZ0TqmNghPktj+pA4P6or6KFWp/\\n"
    "3gvDthkUBcrqw6gElDtGfDIN8wBmIsiNaW02jBEYt9OyHGC0OPoCjM7T3UYH3go+\\n"
    "6118yHz7sCtTpJJiaVElBWEaRIGMLKlDliPfrDqBmg4pxRyp6V0etp6eMAo5zvGI\\n"
    "gPtLXcwy7IViQyU0AlYnAZG0O3AqP26x6JyIAX2f1PnbU21gnb8s51iruF9G/M7E\\n"
    "GwM8CetJMVxpRrPgRwIDAQABo4IBFzCCARMwDwYDVR0TAQH/BAUwAwEB/zAOBgNV\\n"
    "HQ8BAf8EBAMCAQYwHQYDVR0OBBYEFDqahQcQZyi27/a9BUFuIMGU2g/eMB8GA1Ud\\n"
    "IwQYMBaAFNLEsNKR1EwRcbNhyz2h/t2oatTjMDQGCCsGAQUFBwEBBCgwJjAkBggr\\n"
    "BgEFBQcwAYYYaHR0cDovL29jc3AuZ29kYWRkeS5jb20vMDIGA1UdHwQrMCkwJ6Al\\n"
    "oCOGIWh0dHA6Ly9jcmwuZ29kYWRkeS5jb20vZ2Ryb290LmNybDBGBgNVHSAEPzA9\\n"
    "MDsGBFUdIAAwMzAxBggrBgEFBQcCARYlaHR0cHM6Ly9jZXJ0cy5nb2RhZGR5LmNv\\n"
    "bS9yZXBvc2l0b3J5LzANBgkqhkiG9w0BAQsFAAOCAQEAWQtTvZKGEacke+1bMc8d\\n"
    "H2xwxbhuvk679r6XUOEwf7ooXGKUwuN+M/f7QnaF25UcjCJYdQkMiGVnOQoWCcWg\\n"
    "OJekxSOTP7QYpgEGRJHjp2kntFolfzq3Ms3dhP8qOCkzpN1nsoX+oYggHFCJyNwq\\n"
    "9kIDN0zmiN/VryTyscPfzLXs4Jlet0lUIDyUGAzHHFIYSaRt4bNYC8nY7NmuHDKO\\n"
    "KHAN4v6mF56ED71XcLNa6R+ghlO773z/aQvgSMO3kwvIClTErF0UZzdsyqUvMQg3\\n"
    "qm5vjLyb4lddJIGvl5echK1srDdMZvNhkREg5L4wn3qkKQmw4TRfZHcYQFHfjDCm\\n"
    "rw==\\n"
    "-----END CERTIFICATE-----\\n";

static PubSubClient* _mqttClient;
static TuyaAppCallback _app_callback = nullptr;

static String hmac256(const char* key, size_t key_len, const char* message, size_t msg_len) {
    SHA256 sha;
    byte k_ipad[64], k_opad[64];
    memset(k_ipad, 0, sizeof(k_ipad));
    memset(k_opad, 0, sizeof(k_opad));
    memcpy(k_ipad, key, key_len);
    memcpy(k_opad, key, key_len);
    for (int i = 0; i < 64; i++) {
        k_ipad[i] ^= 0x36;
        k_opad[i] ^= 0x5c;
    }
    sha.update(k_ipad, sizeof(k_ipad));
    sha.update(message, msg_len);
    byte hmac[32];
    sha.finalize(hmac);
    sha.update(k_opad, sizeof(k_opad));
    sha.update(hmac, sizeof(hmac));
    sha.finalize(hmac);
    return SHA256::toString(hmac);
}

// This function is now EXPOSED to app_main to get credentials
void tuya_get_mqtt_credentials(char* out_client_id, char* out_username, char* out_password) {
    long int t = time(NULL);
    sprintf(out_client_id, "tuyalink_%s", TUYA_DEVICE_ID);
    sprintf(out_username, "%s|signMethod=hmacSha256,timestamp=%ld,secureMode=1,accessType=1", TUYA_DEVICE_ID, t);
    String sign_content = String("deviceId=") + TUYA_DEVICE_ID + ",timestamp=" + t + ",secureMode=1,accessType=1";
    String pass_hash = hmac256(TUYA_DEVICE_SECRET, strlen(TUYA_DEVICE_SECRET), sign_content.c_str(), sign_content.length());
    strcpy(out_password, pass_hash.c_str());
}

// The new "init" function, which is non-blocking and passive.
void tuya_init(WiFiClientSecure& wifiClient, PubSubClient& mqttClient, TuyaAppCallback app_callback) {
    _mqttClient = &mqttClient;
    _app_callback = app_callback;

    // Configure the WiFiClientSecure with the necessary CA certificate
    wifiClient.setCACert(tuya_ca_cert);

    // The main app will set the server and port before connecting
}

void tuya_subscribe_topics() {
    if (_mqttClient && _mqttClient->connected()) {
        char topic_sub[128];
        sprintf(topic_sub, "tylink/%s/thing/property/set", TUYA_DEVICE_ID);
        _mqttClient->subscribe(topic_sub);
    }
}

void tuya_loop() {
    // The main app is responsible for the MQTT loop. This function does nothing.
}

bool tuya_publish_data(const String& data_json_string) {
    if (!_mqttClient || !_mqttClient->connected()) {
        return false;
    }
    char topic[128];
    sprintf(topic, "tylink/%s/thing/property/report", TUYA_DEVICE_ID);
    return _mqttClient->publish(topic, data_json_string.c_str());
}

// The internal callback that dispatches messages to the user-defined app callback
void tuya_handle_mqtt_message(char *topic, byte *payload, unsigned int length) {
    String topicStr(topic);
    // Check if this message is a Tuya message
    if (topicStr.indexOf(String("tylink/") + TUYA_DEVICE_ID) != -1) {
        String payloadStr;
        for (unsigned int i = 0; i < length; i++) {
            payloadStr += (char)payload[i];
        }
        if (_app_callback) {
            _app_callback(topicStr, payloadStr);
        }
    }
}
"""


def generate_ota_handler_header() -> str:
    return """
#ifndef OTA_HANDLER_H
#define OTA_HANDLER_H
#include <WiFi.h>
#include <PubSubClient.h>
#include <HTTPUpdate.h>

void ota_init(WiFiClient& wifiClient, PubSubClient& mqttClient, HTTPUpdate& httpUpdateClient);
void ota_loop();
const char* ota_get_device_id();

// [最终修正] 将接口升级为使用安全的String对象
void ota_handle_mqtt_message(const String& topic, const String& payload);

#endif // OTA_HANDLER_H
"""


# 文件: app/langgraph_def/graph_builder.py

def generate_ota_handler_source() -> str:
    return """
#include <WiFi.h>
#include <HTTPUpdate.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include "config_manager.h"
#include "ota_handler.h"
#include "mqtt_logger.h"

static WiFiClient* _wifiClient;
static PubSubClient* _mqttClient;
static HTTPUpdate* _httpUpdateClient;
static String status_topic, specific_cmd_topic, broadcast_cmd_topic;

static void perform_ota(String fileName) {
    logger.println("====== [OTA DIAGNOSIS] Step 4: perform_ota() entered. ======");
    logger.printf("Attempting OTA for file: /%s\\n", fileName.c_str());
    logger.printf("Target Server: %s:%d\\n", OTA_HTTP_SERVER, OTA_HTTP_PORT);
    if (!_wifiClient || !_httpUpdateClient) {
        logger.println("FATAL: WiFiClient or HTTPUpdateClient pointer is NULL before update!");
        return;
    }
    WiFiClient updateClient;
    logger.println("Calling httpUpdate.update()... This is a blocking call.");
    t_httpUpdate_return ret = _httpUpdateClient->update(updateClient, OTA_HTTP_SERVER, OTA_HTTP_PORT, "/" + fileName);
    logger.printf("httpUpdate.update() returned with code: %d\\n", ret);
    JsonDocument doc;
    char buffer[256];
    switch (ret) {
        case HTTP_UPDATE_FAILED:
            logger.printf("OTA RESULT: FAILED. Error (%d): %s\\n", _httpUpdateClient->getLastError(), _httpUpdateClient->getLastErrorString().c_str());
            doc["status"] = "failed";
            doc["error_code"] = _httpUpdateClient->getLastError();
            doc["error_message"] = _httpUpdateClient->getLastErrorString();
            serializeJson(doc, buffer);
            _mqttClient->publish(status_topic.c_str(), buffer);
            break;
        case HTTP_UPDATE_NO_UPDATES:
            logger.println("OTA RESULT: NO UPDATES.");
            doc["status"] = "no_update";
            serializeJson(doc, buffer);
            _mqttClient->publish(status_topic.c_str(), buffer);
            break;
        case HTTP_UPDATE_OK:
            logger.println("OTA RESULT: SUCCESS. Device will reboot.");
            doc["status"] = "success";
            serializeJson(doc, buffer);
            _mqttClient->publish(status_topic.c_str(), buffer);
            break;
    }
    logger.println("====== [OTA DIAGNOSIS] Step 5: perform_ota() finished. ======");
}

void ota_init(WiFiClient& wifiClient, PubSubClient& mqttClient, HTTPUpdate& httpUpdateClient) {
    _wifiClient = &wifiClient;
    _mqttClient = &mqttClient;
    _httpUpdateClient = &httpUpdateClient;
    status_topic = String(OTA_TOPIC_BASE) + DEVICE_ID + "/status";
    specific_cmd_topic = String(OTA_TOPIC_BASE) + DEVICE_ID + "/command";
    broadcast_cmd_topic = String(OTA_TOPIC_BASE) + "all/command";

    // [DIAGNOSTIC LOG] 确认ota_init被调用，并打印出它将要监听的主题
    logger.println("====== [OTA DIAGNOSIS] Step 0: ota_init() called. ======");
    logger.printf(" - OTA command topic set to: %s\\n", specific_cmd_topic.c_str());

    if (_mqttClient->connected()) {
        _mqttClient->subscribe(specific_cmd_topic.c_str());
        _mqttClient->subscribe(broadcast_cmd_topic.c_str());
    }
}

void ota_loop() {}
const char* ota_get_device_id() { return DEVICE_ID; }

// [最终修正] 更新函数定义，并使用安全的String对象进行操作
    void ota_handle_mqtt_message(const String& topic, const String& payload) {
        logger.println("====== [OTA DIAGNOSIS] Step 2: ota_handle_mqtt_message() entered. ======");
        
        logger.printf(" - Incoming topic: %s\\n", topic.c_str());
        logger.printf(" - Expected topic: %s\\n", specific_cmd_topic.c_str());

        if (topic != specific_cmd_topic && topic != broadcast_cmd_topic) {
            logger.println(" - Verdict: Topic MISMATCH. Exiting handler.");
            return; 
        }

        logger.println(" - Verdict: Topic MATCH. Proceeding to parse payload.");
        
        JsonDocument doc;
        DeserializationError error = deserializeJson(doc, payload);
        if (error) { 
            logger.printf("OTA JSON parsing failed: %s\\n", error.c_str()); 
            return; 
        }

        const char* action = doc["action"];
        if (action && strcmp(action, "update") == 0) {
            logger.println("====== [OTA DIAGNOSIS] Step 3: Action 'update' confirmed. ======");
            String fileName = doc["file"] | "";
            if (fileName.length() > 0) { 
                perform_ota(fileName); 
            } else {
                logger.println("ERROR: Action was 'update' but file name was missing!");
            }
        }
    }
"""

def generate_mqtt_logger_header() -> str:
    """
    V3 - 生成 MqttLogger 的头文件 (Singleton Implementation) - 已修正
    """
    return """
#ifndef MQTT_LOGGER_H
#define MQTT_LOGGER_H
#include <PubSubClient.h>
#include <Print.h>

class MqttLogger : public Print {
public:
    // 获取单例实例
    static MqttLogger& getInstance();

    // 使用MQTT客户端和设备ID初始化日志记录器
    void begin(PubSubClient& client, const char* device_id);

    // 在主循环中调用此函数以处理缓冲区刷新
    void loop();

    // Print 接口方法
    virtual size_t write(uint8_t);
    virtual size_t write(const uint8_t *buffer, size_t size);

private:
    // 私有构造函数以强制执行单例模式
    MqttLogger();

    // 私有析构函数
    ~MqttLogger();

    // 删除拷贝构造函数和赋值运算符
    MqttLogger(const MqttLogger&) = delete;
    MqttLogger& operator=(const MqttLogger&) = delete;

    PubSubClient* _client;
    String _topic;
    char _buffer[256];
    size_t _buffer_pos;
    unsigned long _last_flush;
    bool _initialized;

    void flush();
};

// V3.2 修正: 添加 extern 声明，让所有包含此头文件的文件都知道 logger 的存在。
// 它的实体将在 app_main.ino 中被定义。
extern Print& logger;

#endif // MQTT_LOGGER_H
"""

def generate_mqtt_logger_source() -> str:
    """
    V3 - 生成 MqttLogger 的源文件 (Singleton Implementation)
    """
    return """
#include "mqtt_logger.h"
#include "config_manager.h" // For DEBUG_TOPIC_BASE

// 唯一的静态实例
MqttLogger& MqttLogger::getInstance() {
    static MqttLogger instance;
    return instance;
}

// 私有构造函数
MqttLogger::MqttLogger()
    : _client(nullptr), _buffer_pos(0), _last_flush(0), _initialized(false) {}

// 私有析构函数
MqttLogger::~MqttLogger() {}

// 初始化方法
void MqttLogger::begin(PubSubClient& client, const char* device_id) {
    _client = &client;
    _topic = String(DEBUG_TOPIC_BASE) + device_id + "/log";
    _initialized = true;
}

void MqttLogger::loop() {
    if (_initialized && _buffer_pos > 0 && (millis() - _last_flush > 1000)) {
        flush();
    }
}

size_t MqttLogger::write(uint8_t c) {
    if (!_initialized) return 0;
    if (_buffer_pos >= sizeof(_buffer) - 1) {
        flush();
    }
    _buffer[_buffer_pos++] = c;
    if (c == '\\n') { // 在换行时刷新以获得更好的响应性
        flush();
    }
    return 1;
}

size_t MqttLogger::write(const uint8_t *buffer, size_t size) {
    if (!_initialized) return 0;
    for (size_t i = 0; i < size; i++) {
        write(buffer[i]);
    }
    return size;
}

void MqttLogger::flush() {
    if (_initialized && _buffer_pos > 0 && _client && _client->connected()) {
        _buffer[_buffer_pos] = '\\0';
        _client->publish(_topic.c_str(), _buffer);
        _buffer_pos = 0;
    }
    _last_flush = millis();
}
"""

# =================================================================================
# 4. Agent Node Definitions (无变动)
# =================================================================================

def module_architect_node(state: AgentState) -> Dict:
    device_task = state['current_device_task']
    device_id = device_task['internal_device_id']
    print(f"--- L2: MODULE ARCHITECT: Designing firmware for '{device_id}' ---")

    peripherals_info_parts = []
    for p in device_task.get('peripherals', []):
        model_str = f" (Model: {p['model']})" if p.get('model') and p['model'].lower() not in ['generic', ''] else ""
        peripherals_info_parts.append(f"- {p['name']}{model_str}")
    peripherals_info = "\\n".join(peripherals_info_parts)

    prompt = textwrap.dedent(f"""
    <Prompt>
        <Role>You are an expert embedded firmware architect.</Role>
        <Goal>For the given device, design a modular firmware architecture that includes all necessary functionalities.</Goal>
        <Context>
            <Device>{device_id} ({device_task['board']})</Device>
            <DeviceRole>{device_task['description']}</DeviceRole>
            <Peripherals>
            {peripherals_info}
            </Peripherals>
        </Context>
        <Instructions>
        1.  **Driver Modules**: For each physical peripheral, define a 'driver' module. The `task_id` should be based on the peripheral's Model or Name, ending with `_driver`.
        2.  **Application Module**: Define one single 'application' module named `app_main` that uses all other modules.
        3.  **Core Services (Mandatory)**: You MUST ALWAYS include these three core service modules: `config_manager`, `ota_handler`, and `mqtt_logger`. They are essential for any network-connected device.
        4.  **Cloud Service (Conditional)**: If the device's description or peripherals explicitly mention "Tuya", you MUST ADDITIONALLY include the `tuya_handler` module.
        5.  **Dependencies**: The `app_main` module MUST list all other generated modules as its dependencies.
        6.  **Output Format**: Your final output MUST be a single, valid JSON object containing one key: "modules".
        7.  **No Peripherals Rule**: If a device has no physical peripherals listed in its `<Peripherals>` context, you MUST NOT generate any hardware-specific driver modules for it (e.g., no `light_sensor_driver`). The only modules should be the mandatory Core Services, an optional Cloud Service, and the Application module.
        </instructions>
        <ExampleOutput>
        ```json
        {{
            "modules": [
                {{ "task_id": "config_manager", "task_type": "driver", "peripheral": "Core", "description": "Manages all network and device configurations.", "dependencies": [] }},
                {{ "task_id": "ota_handler", "task_type": "driver", "peripheral": "Core", "description": "Handles over-the-air firmware updates.", "dependencies": [] }},
                {{ "task_id": "mqtt_logger", "task_type": "driver", "peripheral": "Core", "description": "Handles remote logging over MQTT for debugging and verification.", "dependencies": [] }},
                {{ "task_id": "tuya_handler", "task_type": "driver", "peripheral": "Core", "description": "Handles connection and data exchange with the Tuya Cloud.", "dependencies": [] }},
                {{ "task_id": "bh1750_driver", "task_type": "driver", "peripheral": "BH1750", "description": "A driver for the BH1750 light sensor.", "dependencies": [] }},
                {{ "task_id": "app_main", "task_type": "application", "description": "The main application logic.", "dependencies": ["config_manager", "ota_handler", "mqtt_logger", "tuya_handler", "bh1750_driver"] }}
            ]
        }}
        ```
        </ExampleOutput>
    </Prompt>
    """)
    response = module_architect_model.invoke([HumanMessage(content=prompt)])
    try:
        plan = json.loads(extract_code(response.content, "json"))
        return {"module_tasks": plan['modules'], "original_module_plan": plan['modules']}
    except (json.JSONDecodeError, KeyError, TypeError) as e:
        print(f"MODULE ARCHITECT PARSING ERROR: {e}")
        return {"feedback": f"FAIL: Module Architect failed. Error: {e}", "module_tasks": []}


def plan_enrichment_node(state: AgentState) -> Dict:
    """
    [V3 - Refined]: An AI node that refines user-friendly requirements into machine-friendly instructions in English.
    It now generates specific, structured MQTT topics.
    """
    print("--- [PLAN ENRICHMENT V3]: Refining device task descriptions into English and generating MQTT topics... ---")

    project_name = state.get('project_name', 'default_project')
    device_tasks = state.get('device_tasks_queue', [])
    communication_plan = state.get('system_plan', {}).get('communication', [])

    if not device_tasks:
        return {}

    # 1. Create communication map with structured topics
    topic_map = {}
    # Sanitize project name for use in topic
    safe_project_name = re.sub(r'[^a-zA-Z0-9_-]', '', project_name.lower().replace(' ', '_'))

    for comm in communication_plan:
        source_role = comm.get('source_device_role')
        target_role = comm.get('target_device_role')

        safe_source_role = re.sub(r'[^a-zA-Z0-9_-]', '', source_role.lower().replace(' ', '_'))
        topic = f"/{safe_project_name}/{safe_source_role}/data"

        if source_role not in topic_map: topic_map[source_role] = {"pub": [], "sub": []}
        if target_role not in topic_map: topic_map[target_role] = {"pub": [], "sub": []}

        if topic not in topic_map[source_role]["pub"]:
            topic_map[source_role]["pub"].append(topic)
        if topic not in topic_map[target_role]["sub"]:
            topic_map[target_role]["sub"].append(topic)

    # 2. Iterate through each device task and call LLM to rewrite
    for task in device_tasks:
        role = task.get('device_role')
        original_description = task.get('description', '')

        comm_context = "This device has no assigned inter-device communication tasks."
        if role in topic_map:
            pub_info = f"It MUST publish data to the following MQTT topics: {', '.join(topic_map[role]['pub'])}." if \
            topic_map[role]["pub"] else ""
            sub_info = f"It MUST subscribe to the following MQTT topics to receive data: {', '.join(topic_map[role]['sub'])}." if \
            topic_map[role]["sub"] else ""
            comm_context = " ".join(filter(None, [pub_info, sub_info]))

        rewrite_prompt = textwrap.dedent(f"""
        <Prompt>
            <Role>You are a technical writer specializing in embedded systems. Your task is to rewrite a high-level functional description into a precise, unambiguous technical specification in English for a developer.</Role>
            <Goal>Combine the device's core function with its specific communication tasks into a single, clear paragraph in English.</Goal>
            <Context>
                <DeviceRole>{role}</DeviceRole>
                <OriginalDescription>{original_description}</OriginalDescription>
                <TechnicalCommunicationPlan>{comm_context}</TechnicalCommunicationPlan>
            </Context>
            <Instructions>
                1.  Translate the core function from the `<OriginalDescription>` into clear, concise English.
                2.  Integrate the specific actions from the `<TechnicalCommunicationPlan>`. Replace vague phrases like "send data to another device" with explicit technical actions like "publish data to the MQTT topic ...".
                3.  The final output MUST be a single, concise paragraph in English.
                4.  Do not add any new functionality. Your job is to translate and specify, not invent.
            </Instructions>
            <Example>
                <Input>
                    <OriginalDescription>使用BH1750传感器读取光照强度，并将数据发送给小黑板和涂鸦云。</OriginalDescription>
                    <TechnicalCommunicationPlan>It MUST publish data to the following MQTT topics: /smart_light_system/light_sensor/data.</TechnicalCommunicationPlan>
                </Input>
                <Output>
                Periodically read the light intensity from the BH1750 sensor. Publish the illumination data to the MQTT topic /smart_light_system/light_sensor/data for inter-device communication. Simultaneously, report the same data to the Tuya Cloud.
                </Output>
            </Example>
            <FinalOutput>
            {{Your rewritten English description here as a single string.}}
            </FinalOutput>
        </Prompt>
        """)

        response = system_architect_model.invoke([HumanMessage(content=rewrite_prompt)])
        new_description = response.content.strip()

        task['description'] = new_description
        print(f"  -> Rewrote description for '{role}':")
        print(f"     [Before]: {original_description}")
        print(f"     [After]:  {task['description']}")

    return {"device_tasks_queue": device_tasks}

def device_dispatcher_node(state: AgentState) -> Dict:
    queue = state.get('device_tasks_queue', [])
    if not queue:
        # 所有设备处理完毕，返回一个特殊的None值，用于路由到最终的文件生成节点
        return {"current_device_task": None}

    # 准备处理下一个设备
    next_device_task = queue[0]
    remaining_queue = queue[1:]

    # --- [最终修正] 为下一个设备循环创建一个全新的、干净的返回字典 ---

    # 1. 保留需要在设备间传递的持久化状态
    persistent_state = {
        "user_input": state.get('user_input'),
        "system_plan": state.get('system_plan'),
        "user_id": state.get('user_id'),
        "workflow_id": state.get('workflow_id'),
        "workspace_path": state.get('workspace_path'),
        "project_name": state.get('project_name'),
        "dp_info_list": state.get('dp_info_list', []),  # 累积DP列表
        "project_files": state.get('project_files', {})  # 累积项目文件
    }

    # 2. 重置UI步骤状态
    current_steps = state.get('workflow_steps', [])
    dev_loop_steps = [
        "module_architect", "module_dispatcher", "api_designer", "developer",
        "integrator", "test_plan_designer", "deployment_and_verification",
        "compile_node", "pre_deployment_pause", "usb_upload_node",
        "ota_deployment_node", "deploy_and_verify_node", "dp_extractor"
    ]
    for step in current_steps:
        if step['id'] in dev_loop_steps:
            step['status'] = 'pending'
            # 保留历史日志，不清空 step['log']
            step['start_time'] = 0.0
            step['end_time'] = 0.0
            step['output'] = None

    # 3. 从数据库加载新设备所需的信息
    user = User.query.get(state['user_id'])
    device = Device.query.filter_by(internal_device_id=next_device_task['internal_device_id']).first()

    # 4. 构建最终的返回字典
    update_dict = {
        **persistent_state,
        "workflow_steps": current_steps,  # 使用我们刚刚重置过的列表
        "device_tasks_queue": remaining_queue,
        "current_device_task": next_device_task,
        # 显式重置所有临时开发状态
        "module_tasks": [],
        "current_module_task": None,
        "completed_modules": {},
        "feedback": "",
        "original_module_plan": None,
        "current_api_spec": None,
        "test_plan": None,
        "build_dir": "",
        "firmware_path": None,
    }

    # 填充数据库信息到新状态中
    if user:
        print(f"  -> Found User '{user.username}'. Loading WiFi credentials.")
        update_dict['wifi_ssid'] = user.wifi_ssid
        update_dict['wifi_password'] = user.wifi_password

    if device:
        print(f"  -> Found Device '{device.nickname}'. Loading Tuya credentials.")
        update_dict['cloud_product_id'] = device.cloud_product_id
        update_dict['cloud_device_id'] = device.cloud_device_id
        update_dict['cloud_device_secret'] = device.cloud_device_secret

    return update_dict


def module_dispatcher_node(state: AgentState) -> Dict:
    if state.get('module_tasks'):
        next_task = state['module_tasks'][0]
        print(f"--- L3 DISPATCHER: Selecting module task -> '{next_task['task_id']}' ---")
        return {"current_module_task": next_task, "module_tasks": state['module_tasks'][1:], "feedback": ""}
    return {"current_module_task": None}


def api_designer_node(state: AgentState) -> Dict:
    """
    通过“本地缓存 -> 本地模糊搜索 -> AI生成”三段式流程获取API。
    """
    task = state['current_module_task']
    if not task or task['task_type'] != 'driver' or task['task_id'] in ['config_manager', 'ota_handler', 'mqtt_logger',
                                                                        'tuya_handler']:
        return {"current_api_spec": None}

    peripheral = task['peripheral']
    print(f"--- L3: API DESIGNER: Searching for API for '{peripheral}' ---")

    # 阶段 1 & 2: 本地精确/模糊搜索
    cached_spec_str = find_api_spec(peripheral)
    if cached_spec_str:
        try:
            spec_json = json.loads(cached_spec_str)
            interface = None
            if isinstance(spec_json, dict):
                for key, value in spec_json.items():
                    if isinstance(value, dict) and 'functions' in value:
                        interface = value
                        break

            if interface:
                functions = interface.get("functions", [])
                formatted_spec = json.dumps(functions, indent=2, ensure_ascii=False)
                print(f"--- API DESIGNER: Successfully loaded API for '{peripheral}' from local cache. ---")
                return {"current_api_spec": formatted_spec}
            else:
                print(
                    f"--- API DESIGNER: Found local file for '{peripheral}', but content format is unexpected. Proceeding to AI generation. ---")
        except Exception as e:
            print(
                f"--- API DESIGNER: Error parsing local API file for '{peripheral}': {e}. Proceeding to AI generation. ---")

    # 阶段 3: AI 生成 (作为备选)
    print(f"--- L3: API DESIGNER: No local API found. Generating with AI for '{peripheral}' ---")
    prompt = textwrap.dedent(f"""
    <Prompt>
        <Role>You are an expert API designer for embedded C/C++ drivers.</Role>
        <Goal>Generate a high-quality, detailed API specification in JSON format for the given peripheral or logical module.</Goal>
        <Context>
            <PeripheralOrModule>{peripheral}</PeripheralOrModule>
            <Task>{task['description']}</Task>
        </Context>
        <Instructions>
            1. Design a set of C-style functions.
            2. For communication modules like MQTT, design high-level functions like `connect`, `publish`, `subscribe`.
            3. The output must be a single, valid JSON object containing a root key `"{peripheral.upper().replace(' ', '_')}_Interface"` which contains a list of functions.
        </Instructions>
        <Example>
        For a 'DHT11', a good output would be:
        ```json
        {{
            "DHT11_Interface": {{
                "functions": [
                    {{ "name": "dht11_setup", "description": "Initializes the DHT11 sensor on a specific pin.", "return_type": "void", "parameters": [{{"name": "pin", "type": "int"}}] }},
                    {{ "name": "dht11_read_temperature", "description": "Reads the temperature in Celsius.", "return_type": "float", "parameters": [] }},
                    {{ "name": "dht11_read_humidity", "description": "Reads the humidity in percent.", "return_type": "float", "parameters": [] }}
                ]
            }}
        }}
        ```
        </Example>
        <OutputFormat>```json
// Your generated JSON code here
```</OutputFormat>
    </Prompt>
    """)
    response = api_designer_model.invoke([HumanMessage(content=prompt)])
    generated_spec_str = extract_code(response.content, lang="json")
    try:
        spec_json = json.loads(generated_spec_str)
        interface_key_from_llm = f"{peripheral.upper().replace(' ', '_')}_Interface"
        interface = spec_json.get(interface_key_from_llm, {})
        functions = interface.get("functions", [])
        formatted_spec = json.dumps(functions, indent=2, ensure_ascii=False)
        print(f"--- API DESIGNER: Successfully generated API for '{peripheral}' using AI. ---")

        try:
            save_content = {interface_key_from_llm: {"functions": functions}}
            save_filename = f"{peripheral.upper().replace(' ', '_')}_API_Package.json"
            save_filepath = API_PACKAGE_DIR / save_filename
            if not API_PACKAGE_DIR.exists():
                API_PACKAGE_DIR.mkdir(parents=True, exist_ok=True)
            save_filepath.write_text(json.dumps(save_content, indent=4, ensure_ascii=False), encoding='utf-8')
            print(f"--- API DESIGNER: Saved newly generated API to local cache: '{save_filename}' ---")
        except Exception as e:
            print(f"--- API DESIGNER: WARNING - Failed to save newly generated API to cache: {e} ---")

        return {"current_api_spec": formatted_spec}
    except Exception as e:
        print(f"API DESIGNER GENERATION ERROR: {e}")
        return {"current_api_spec": f"// Failed to generate API for {peripheral}"}


def developer_node(state: AgentState) -> Dict:
    feedback = state.get('feedback', '')
    task = state.get('current_module_task')

    if not task and "FAIL" in feedback:
        print("--- [DEVELOPER] Received compilation failure, attempting to identify faulty module for repair. ---")
        faulty_module_id = None
        primary_pattern = re.compile(r'^(.*?[/\\](src|lib)[/\\][^/\\:]+\.cpp):\d+:\d+:\s+error:', re.MULTILINE)
        match = primary_pattern.search(feedback)

        if match:
            filepath = Path(match.group(1))
            faulty_module_id = filepath.stem
            print(f"--- [DEVELOPER] Inferred faulty module from error line: '{faulty_module_id}' ---")
        else:
            fallback_pattern = re.compile(r"\[\.pio[/\\]build[/\\].*?[/\\](src|lib)[/\\].*?([^\s/\\]+)\.cpp\.o\] Error",
                                          re.MULTILINE)
            match = fallback_pattern.search(feedback)
            if match:
                faulty_module_id_with_ext = match.group(2)
                if '.ino.cpp' in faulty_module_id_with_ext:
                    faulty_module_id = faulty_module_id_with_ext.replace('.ino.cpp', '')
                elif '.cpp' in faulty_module_id_with_ext:
                    faulty_module_id = faulty_module_id_with_ext.replace('.cpp', '')
                elif '.ino' in faulty_module_id_with_ext:
                    faulty_module_id = faulty_module_id_with_ext.replace('.ino', '')
                else:
                    faulty_module_id = faulty_module_id_with_ext
                print(
                    f"--- [DEVELOPER] Inferred faulty module using fallback summary pattern: '{faulty_module_id_with_ext}' -> Cleaned to '{faulty_module_id}' ---")

        if not faulty_module_id:
            faulty_module_id = "app_main"
            print(f"--- [DEVELOPER] Could not infer module from logs. Defaulting to '{faulty_module_id}'. ---")

        original_plan = state.get('original_module_plan', [])
        faulty_task_details = next((m for m in original_plan if m['task_id'] == faulty_module_id), None)

        if faulty_task_details:
            print(f"--- [DEVELOPER] Identified '{faulty_module_id}' as the module to repair. Retrying development. ---")
            task = faulty_task_details
        else:
            print(
                f"--- [DEVELOPER] Could not find details for module '{faulty_module_id}' in original plan. Aborting repair. ---")
            return {"feedback": f"FAIL: Could not identify faulty module '{faulty_module_id}' for repair."}

    if not task:
        return {}

    device_id = state['current_device_task']['internal_device_id']
    task_id = task['task_id']
    print(f"--- L3: DEVELOPER: Coding module '{task_id}' for device '{device_id}' ---")

    feedback_context = ""
    if "FAIL" in feedback:
        # 核心修正：截断过长的错误日志，只保留最后8000个字符
        MAX_FEEDBACK_LENGTH = 8000
        trimmed_feedback = feedback
        if len(trimmed_feedback) > MAX_FEEDBACK_LENGTH:
            print(
                f"  [INFO] Feedback log is too long ({len(trimmed_feedback)} chars). Truncating to last {MAX_FEEDBACK_LENGTH} chars.")
            trimmed_feedback = feedback[-MAX_FEEDBACK_LENGTH:]

        feedback_context = textwrap.dedent(f"""
        <Feedback_From_Previous_Attempt>
        IMPORTANT: Your previous attempt to generate code for this module resulted in a failure. You MUST analyze the following error message and fix the code accordingly.
        Error Details: {trimmed_feedback}
        Common root causes for 'conflicting declaration' errors are due to incorrect singleton implementation or multiple definitions of a global variable. Ensure the logger is defined once as a static instance and accessed via a public static method.
        Another common error is 'was not declared in this scope', which means you forgot to `#include` the header file for a function you are calling.
        You MUST ensure your generated code is complete and correct.
        </Feedback_From_Previous_Attempt>
        """)

    completed_modules = state.get('completed_modules', {})
    version = completed_modules.get(task_id, {}).get('version', 0) + 1

    if task_id == 'config_manager':
        header_code = generate_config_manager_header(
            device_id=state['current_device_task']['internal_device_id'],
            wifi_ssid=state.get('wifi_ssid'),
            wifi_password=state.get('wifi_password'),
            product_id=state.get('cloud_product_id'),
            cloud_device_id=state.get('cloud_device_id'),
            device_secret=state.get('cloud_device_secret')
        )
        completed_modules[task_id] = {"task_id": task_id, "header_code": header_code, "source_code": None,
                                      "main_code": None, "version": version}
        return {"completed_modules": completed_modules, "feedback": "", "current_module_task": task}

    if task_id == 'ota_handler':
        header_code = generate_ota_handler_header()
        source_code = generate_ota_handler_source()
        completed_modules[task_id] = {"task_id": task_id, "header_code": header_code, "source_code": source_code,
                                      "main_code": None, "version": version}
        return {"completed_modules": completed_modules, "feedback": "", "current_module_task": task}

    if task_id == 'mqtt_logger':
        header_code = generate_mqtt_logger_header()
        source_code = generate_mqtt_logger_source()
        completed_modules[task_id] = {"task_id": task_id, "header_code": header_code, "source_code": source_code,
                                      "main_code": None, "version": version}
        return {"completed_modules": completed_modules, "feedback": "", "current_module_task": task}

    if task_id == 'tuya_handler':
        header_code = generate_tuya_handler_header()
        source_code = generate_tuya_handler_source()
        sha256_h_content = generate_mbedtls_sha256_header()
        sha256_cpp_content = generate_mbedtls_sha256_source()
        source_files_dict = {"tuya_handler.cpp": source_code, "SHA256.h": sha256_h_content,
                             "SHA256.cpp": sha256_cpp_content}
        completed_modules[task_id] = {"task_id": task_id, "header_code": header_code,
                                      "source_code": json.dumps(source_files_dict), "main_code": None,
                                      "version": version}
        return {"completed_modules": completed_modules, "feedback": "", "current_module_task": task}

    api_spec = state.get('current_api_spec', 'No API specification provided.')
    context, instructions = "", ""
    if task['task_type'] == 'driver':
        context = f"<APISpecification>\\n{api_spec}\\n</APISpecification>"
        instructions = f"""
                            <Instructions>
                            1.  **Goal**: Your task is to implement the C++ header (.h) and source (.cpp) files for the driver based *only* on the provided `<APISpecification>`.
                            2.  **Strict Adherence**: You MUST implement every function exactly as defined in the spec. Do not add, remove, or modify any functions.
                            3.  **Completeness**: Provide the complete code for both the header and the source file. Do not omit any part.
                            4.  **Header File Guard**: The header file MUST include standard header guards (`#ifndef`, `#define`, `#endif`).
                            5.  **ESP32 I2C Driver**: If implementing an I2C peripheral for ESP32, you MUST use the ESP-IDF driver functions from `<driver/i2c.h>`.
                            6.  For `i2c_master_read`, the final read operation requires `I2C_MASTER_NACK` as the last argument to properly terminate the communication.
                            7.  Do NOT use `0` or `I2C_MASTER_ACK` for the final read.
                            8.  **No `main()`**: Do not include a `main()` function or `setup()`/`loop()` unless the API spec explicitly requires it. These are library files.
                            9.  **No Placeholders**: Your code must be fully implemented and functional. Do not leave placeholder comments like `// Your implementation here`.
                            </Instructions>
                            <CorrectExample for ESP32 I2C Driver>
                           [HEADER]
                           ```cpp
                           #ifndef SIMPLE_I2C_DRIVER_H
                           #define SIMPLE_I2C_DRIVER_H
                           #include "driver/i2c.h"

                           void simple_i2c_init(i2c_port_t port, int sda_pin, int scl_pin);
                           esp_err_t simple_i2c_read_byte(i2c_port_t port, uint8_t device_addr, uint8_t reg_addr, uint8_t *data);
                           #endif
                           ```

                           [SOURCE]
                           ```cpp
                           #include "simple_i2c_driver.h"

                           void simple_i2c_init(i2c_port_t port, int sda_pin, int scl_pin) {{{{
                               i2c_config_t conf;
                               conf.mode = I2C_MODE_MASTER;
                               conf.sda_io_num = sda_pin;
                               conf.scl_io_num = scl_pin;
                               conf.sda_pullup_en = GPIO_PULLUP_ENABLE;
                               conf.scl_pullup_en = GPIO_PULLUP_ENABLE;
                               conf.master.clk_speed = 100000;
                               i2c_param_config(port, &conf);
                               i2c_driver_install(port, conf.mode, 0, 0, 0);
                           }}}}

                           esp_err_t simple_i2c_read_byte(i2c_port_t port, uint8_t device_addr, uint8_t reg_addr, uint8_t *data) {{{{
                               return ESP_OK;
                           }}}}
                           ```
                           </CorrectExample>
                            <OutputFormat>
                           You MUST provide two distinct code blocks, one for the header and one for the source file. Use the specified markdown format.
                            [HEADER]
                            ```cpp
                            // Header file content for {{{{task['task_id']}}}}.h
                            ```
                           [SOURCE]
                            ```cpp
                            // Source file content for {{{{task['task_id']}}}}.cpp
                            ```
                            </OutputFormat>
                            """
        prompt = textwrap.dedent(f"""
        <Prompt>
            <Role>You are an expert embedded systems developer following a strict modular architecture.</Role>
            <Context>
                <TaskDescription>{task['description']}</TaskDescription>
                {feedback_context}
                {context}
            </Context>
            {instructions}
        </Prompt>
        """)
        response = developer_model.invoke([HumanMessage(content=prompt)])
        content = response.content
        header_code = extract_code(content, lang="cpp", block_name="HEADER")
        source_code = extract_code(content, lang="cpp", block_name="SOURCE")
        completed_modules[task_id] = {"task_id": task_id, "header_code": header_code, "source_code": source_code,
                                      "main_code": None, "version": version}
    else:  # application
        print("--- L3: DEVELOPER: Coding main application 'app_main.ino' ---")
        driver_headers = ""
        completed = state.get('completed_modules', {})
        dependencies = task.get('dependencies', [])

        for dep_id in dependencies:
            if dep_id in completed and completed[dep_id].get('header_code'):
                driver_headers += f"--- Interface for {dep_id} from '{dep_id}.h' ---\\n```cpp\\n{completed[dep_id]['header_code']}\\n```\\n\\n"

        is_tuya_device = "tuya_handler" in dependencies

        if is_tuya_device:
            print("  -> Generating DUAL-CLIENT (Tuya + Local) architecture for app_main.ino")
            prompt = textwrap.dedent(f"""
                <Prompt>
                    <Role>You are an expert embedded firmware developer for the ESP32.</Role>
                    <Goal>Generate the complete `app_main.ino` file for a dual-client MQTT application.</Goal>
                    <Architectural_Mandates>
                        1.  **Strict Task Focus**: Your ONLY task is to implement the logic described in `<TaskDescription>`.
                        2.  **Implement ALL Communications**: The `<TaskDescription>` may contain instructions for both public cloud communication and local inter-device communication. Your code in `loop()` MUST implement **ALL** specified communication paths.
                        3.  **No Extra Logic**: Implement the logic exactly as described. Do NOT add any extra conditions or thresholds that were not specified.
                        4.  **Error Handling**: Before publishing sensor data, you MUST check if the reading is valid. For many sensors, a return value of -1 or less indicates an error. If an error is detected, you should log the error (e.g., `logger.println("Failed to read sensor.");`) and skip publishing for that cycle.
                        5.  **Correct Tuya Payload**: When using `tuya_publish_data`, the payload string MUST be a valid JSON formatted as `"{{\\"properties\\":{{\\"your_dp_code\\":...}}}}"`.
                        6.  **Include Headers**: You MUST include the necessary header files for all driver modules used, as detailed in `<DriverInterfaces>`.
                        7.  **Confirmation Logging**: Immediately after any successful `localMqttClient.publish()` or `tuya_publish_data()` call, you MUST add a log line confirming the action, for example: `logger.println("Published data to Tuya cloud.");`. This is mandatory for verification.
                        8.  **Polling Interval**: The main `loop()` function MUST include a non-blocking delay mechanism to ensure it runs at a reasonable interval (e.g., every 5-10 seconds). Use a `static unsigned long ...` and `if (millis() - ... > ...)` pattern.
                        9.  **Dual-Client Architecture & RTOS**: You MUST use two separate `PubSubClient` instances and a dedicated FreeRTOS task (`tuyaConnectionTask`) for the Tuya connection, as shown in the example.
                    </Architectural_Mandates>
                    <Context>
                        <TaskDescription>{task['description']}</TaskDescription>
                        <DriverInterfaces>{driver_headers}</DriverInterfaces>
                        <IsTuyaDevice>{is_tuya_device}</IsTuyaDevice>
                        {feedback_context}
                    </Context>
                    <CorrectExample_for_Tuya_Dual_Client_Architecture>
                    ```cpp
                            // --- 核心库 ---
                            #include <WiFi.h>
                            #include <PubSubClient.h>
                            #include <ArduinoJson.h>
                            #include <WiFiClientSecure.h>
                            #include "time.h"
        
                            // --- 项目中的功能模块库 ---
                            #include "config_manager.h"
                            #include "tuya_handler.h"
                            #include "ota_handler.h"
                            #include "mqtt_logger.h"
                            #include <HTTPUpdate.h>
                            // #include "bh1750_driver.h" // EXAMPLE DRIVER - You must include the actual drivers you use.
        
                            // =======================================================================
                            // 1. 双客户端定义
                            // =======================================================================
                            WiFiClientSecure tuyaWifiClient;
                            PubSubClient tuyaMqttClient(tuyaWifiClient);
                            WiFiClient localWifiClient;
                            HTTPUpdate myHttpUpdate;
                            PubSubClient localMqttClient(localWifiClient);
                            Print& logger = MqttLogger::getInstance();
        
                            // =======================================================================
                            // 2. 回调函数定义
                            // =======================================================================
                            void handle_tuya_app_commands(String &topic, String &payload) {{
                                logger.println("Received application command from Tuya Cloud via handler.");
                                // Add logic here to handle commands like `enable_report`
                            }}
        
                            void tuya_mqtt_callback(char* topic, byte* payload, unsigned int length) {{
                                tuya_handle_mqtt_message(topic, payload, length);
                            }}
        
                            void local_mqtt_callback(char* topic, byte* payload, unsigned int length) {{
                                String topicStr = String(topic);
                                String payloadStr;
                                payloadStr.reserve(length);
                                for (unsigned int i = 0; i < length; i++) {{ payloadStr += (char)payload[i]; }}
                                ota_handle_mqtt_message(topicStr, payloadStr);
                            }}
        
                            // =======================================================================
                            // 3. 连接函数
                            // =======================================================================
                            void connectToTuya() {{
                                logger.println("Attempting to connect to TUYA MQTT Broker...");
                                char clientId[128], username[256], password[128];
                                tuya_get_mqtt_credentials(clientId, username, password);
                                if (tuyaMqttClient.connect(clientId, username, password)) {{
                                    logger.println("SUCCESS: Connected to Tuya MQTT Broker.");
                                    tuya_subscribe_topics();
                                }} else {{
                                    logger.printf("FAILED, Tuya client state=%d.\\n", tuyaMqttClient.state());
                                }}
                            }}
        
                            void tuyaConnectionTask(void *pvParameters) {{
                                logger.println("Tuya Connection Task started.");
                                for (;;) {{
                                    if (!tuyaMqttClient.connected()) {{
                                        connectToTuya();
                                        if (!tuyaMqttClient.connected()) {{
                                            vTaskDelay(5000 / portTICK_PERIOD_MS);
                                        }}
                                    }}
                                    tuyaMqttClient.loop();
                                    vTaskDelay(20 / portTICK_PERIOD_MS);
                                }}
                            }}
        
                            void connectToLocalMqtt() {{
                                while (!localMqttClient.connected()) {{
                                    logger.println("Attempting to connect to LOCAL MQTT Broker...");
                                    if (localMqttClient.connect(DEVICE_ID)) {{
                                        logger.println("SUCCESS: Connected to Local MQTT Broker.");
                                        ota_init(localWifiClient, localMqttClient, myHttpUpdate);
                                    }} else {{
                                        logger.printf("FAILED, rc=%d. Retrying in 5 seconds\\n", localMqttClient.state());
                                        delay(5000);
                                    }}
                                }}
                            }}
        
                            // =======================================================================
                            // 4. 主程序: Setup & Loop
                            // =======================================================================
                            void setup() {{
                                Serial.begin(115200);
                                delay(10);
                                Serial.println("\\n--- Dual-Client Firmware with Dedicated Task ---");
                                WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
                                while (WiFi.status() != WL_CONNECTED) {{ delay(500); Serial.print("."); }}
                                Serial.println("\\nWiFi connected.");
                                configTime(0, 0, "pool.ntp.org", "time.nist.gov");
                                time_t now = time(NULL);
                                while (now < 8 * 3600 * 2) {{ delay(500); now = time(NULL); }}
                                MqttLogger::getInstance().begin(localMqttClient, DEVICE_ID);
                                logger.println("--- System Initializing ---");
        
                                // Initialize handlers
                                tuya_init(tuyaWifiClient, tuyaMqttClient, handle_tuya_app_commands);
        
                                // Configure MQTT clients
                                tuyaMqttClient.setServer("m1.tuyacn.com", 8883);
                                tuyaMqttClient.setCallback(tuya_mqtt_callback);
                                localMqttClient.setServer(MQTT_BROKER, MQTT_PORT);
                                localMqttClient.setCallback(local_mqtt_callback);
        
                                // Connect to local broker and initialize OTA
                                connectToLocalMqtt();
        
                                // Create Tuya connection task
                                xTaskCreate(tuyaConnectionTask, "TuyaTask", 10240, NULL, 1, NULL);
        
                                logger.println("--- Setup Complete, Main Loop is starting ---");
                            }}
                            void loop() {{
                                if (!localMqttClient.connected()) {{ connectToLocalMqtt(); }}
                                localMqttClient.loop();
                                MqttLogger::getInstance().loop();
                                // Add application logic here, e.g., reading sensors and publishing data.
                            }}
                            ```
                            </CorrectExample_for_Tuya_Dual_Client_Architecture>
                            <OutputFormat>You MUST provide a single, complete code block for the main `.ino` file. Your code must strictly follow all rules and the style of the provided example.</OutputFormat>
                        </Prompt>
                    """)
        else:
            print("  -> Generating SINGLE-CLIENT (Local only) architecture for app_main.ino")
            prompt = textwrap.dedent(f"""
                            <Prompt>
                                <Role>You are an expert embedded firmware developer creating a robust IoT application for the ESP32.</Role>
                                <Goal>Your primary task is to generate the *entire* `app_main.ino` file. The firmware only needs to connect to a **local MQTT broker** for debugging and OTA updates.</Goal>
                                <Architectural_Mandates>
                                    1.  **Strict Task Focus**: Your ONLY task is to implement the logic described in `<TaskDescription>`.
                                    2.  **No Extra Logic**: Implement the logic exactly as described. Do NOT add any extra conditions (like `if` statements) or thresholds that were not specified.
                                    3.  **Include Headers**: You MUST include the necessary header files for all driver modules used, as detailed in `<DriverInterfaces>`.
                                    4.  **Confirmation Logging**: Immediately after any successful `localMqttClient.publish()` call, you MUST add a log line confirming the action, for example: `logger.println("Published data to local MQTT.");`. This is mandatory for verification.
                                    5.  **Polling Interval**: The main `loop()` function MUST include a non-blocking delay mechanism to ensure it runs at a reasonable interval (e.g., every 5-10 seconds). Use a `static unsigned long lastActionTime = 0;` and `if (millis() - lastActionTime > 5000) {{ ... }}` pattern.
                                    6.  **Single-Client Architecture**: You MUST define only ONE `PubSubClient` instance: `localMqttClient` (using `WiFiClient`).
                                </Architectural_Mandates>
                                <Context>
                                    <TaskDescription>{task['description']}</TaskDescription>
                                    <DriverInterfaces>{driver_headers}</DriverInterfaces>
                                    <IsTuyaDevice>{is_tuya_device}</IsTuyaDevice>
                                    {feedback_context}
                                </Context>
                                <CorrectExample_for_Single_Client_Architecture>
                                ```cpp
                                // --- Core Libraries ---
                                #include <WiFi.h>
                                #include <PubSubClient.h>
                                #include <ArduinoJson.h>
                                #include <HTTPUpdate.h>
            
                                // --- Project Modules ---
                                #include "config_manager.h"
                                #include "ota_handler.h"
                                #include "mqtt_logger.h"
                                // #include "bh1750_driver.h" // EXAMPLE - You must include the actual drivers you use!
            
                                // --- Client Definitions ---
                                WiFiClient localWifiClient;
                                HTTPUpdate myHttpUpdate;
                                PubSubClient localMqttClient(localWifiClient);
                                Print& logger = MqttLogger::getInstance();
            
                                // --- Callback ---
                                void local_mqtt_callback(char* topic, byte* payload, unsigned int length) {{
                                    String topicStr = String(topic);
                                    String payloadStr;
                                    payloadStr.reserve(length);
                                    for (unsigned int i = 0; i < length; i++) {{ payloadStr += (char)payload[i]; }}
                                    ota_handle_mqtt_message(topicStr, payloadStr);
                                    // Add other command handling here if needed...
                                }}
            
                                // --- Connection ---
                                void connectToLocalMqtt() {{
                                    while (!localMqttClient.connected()) {{
                                        logger.println("Attempting to connect to LOCAL MQTT Broker...");
                                        if (localMqttClient.connect(DEVICE_ID)) {{
                                            logger.println("SUCCESS: Connected to Local MQTT Broker.");
                                            // Initialize OTA after a successful connection
                                            ota_init(localWifiClient, localMqttClient, myHttpUpdate);
                                        }} else {{
                                            logger.printf("FAILED, rc=%d. Retrying in 5 seconds\\n", localMqttClient.state());
                                            delay(5000);
                                        }}
                                    }}
                                }}
            
                                // --- Main Program ---
                                void setup() {{
                                    Serial.begin(115200);
                                    delay(10);
                                    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
                                    while (WiFi.status() != WL_CONNECTED) {{ delay(500); Serial.print("."); }}
                                    Serial.println("\\nWiFi connected.");
            
                                    // Initialize logger after WiFi
                                    MqttLogger::getInstance().begin(localMqttClient, DEVICE_ID);
                                    logger.println("--- System Initializing (Local Mode) ---");
            
                                    // Configure and connect to local MQTT
                                    localMqttClient.setServer(MQTT_BROKER, MQTT_PORT);
                                    localMqttClient.setCallback(local_mqtt_callback);
                                    connectToLocalMqtt();
            
                                    // Initialize your drivers here
                                    // bh1750_setup(34); // Example driver setup
            
                                    logger.println("--- Setup Complete ---");
                                }}
            
                                void loop() {{
                                    if (!localMqttClient.connected()) {{ connectToLocalMqtt(); }}
                                    localMqttClient.loop();
                                    MqttLogger::getInstance().loop();
            
                                    // Correct non-blocking timer for periodic actions
                                    static unsigned long lastPublishTime = 0;
                                    if (millis() - lastPublishTime > 5000) {{ // 5-second interval
                                        lastPublishTime = millis();
                                        
                                        // Application logic to read sensor and publish
                                        JsonDocument doc;
                                        doc["lux"] = bh1750_read_lux(); // Example driver usage
                                        char buffer[64];
                                        serializeJson(doc, buffer);
                                        if (localMqttClient.publish("/data/local/report", buffer)) {{
                                            logger.printf("Published: %s\\n", buffer);
                                        }}
                                    }}
                                }}
                                ```
                                </CorrectExample_for_Single_Client_Architecture>
                                <OutputFormat>You MUST provide a single, complete code block for the main `.ino` file based on the single-client architecture.</OutputFormat>
                            </Prompt>
                            """)
        response = developer_model.invoke([HumanMessage(content=prompt)])
        main_code = extract_code(response.content, lang="cpp")
        completed_modules[task_id] = {"task_id": task_id, "header_code": None, "source_code": None,
                                      "main_code": main_code, "version": version}
    return {"completed_modules": completed_modules, "feedback": "", "current_module_task": task}


def integrator_node(state: AgentState) -> Dict:
    device_id = state['current_device_task']['internal_device_id']
    print(f"--- L6: INTEGRATOR: Assembling final verified firmware for '{device_id}' ---")
    project_files = state.get('project_files', {})
    final_project_files = {}
    completed_modules = state.get('completed_modules', {})
    final_project_files["lib/"] = ""
    final_project_files["src/"] = ""
    for task_id, module in completed_modules.items():
        if task_id == 'tuya_handler':
            module_dir = f"lib/{task_id}/"
            final_project_files[module_dir] = ""
            if module.get('header_code'): final_project_files[f"{module_dir}{task_id}.h"] = module['header_code']
            if module.get('source_code'):
                try:
                    source_files = json.loads(module['source_code'])
                    for filename, content in source_files.items():
                        final_project_files[f"{module_dir}{filename}"] = content
                except (json.JSONDecodeError, TypeError):
                    final_project_files[f"{module_dir}{task_id}.cpp"] = module['source_code']
            continue
        if task_id in ['config_manager', 'ota_handler', 'mqtt_logger']:
            module_dir = f"lib/{task_id}/"
            final_project_files[module_dir] = ""
            if module.get('header_code'): final_project_files[f"{module_dir}{task_id}.h"] = module['header_code']
            if module.get('source_code'): final_project_files[f"{module_dir}{task_id}.cpp"] = module['source_code']
        else:
            if module.get('header_code'): final_project_files[f"src/{task_id}.h"] = module['header_code']
            if module.get('source_code'): final_project_files[f"src/{task_id}.cpp"] = module['source_code']
            if module.get('main_code'): final_project_files[f"src/{task_id}.ino"] = module['main_code']

    user_board_model = state['current_device_task']['board']
    corrected_board_id = find_board_id(user_board_model) or "esp32dev"

    # 【性能优化】添加 lib_archive = false 来加速第三方库的编译链接过程
    final_project_files["platformio.ini"] = f"""
    [platformio]
    build_cache_dir = ../.build_cache

    [env:{device_id}]
    platform = espressif32
    board = {corrected_board_id}
    framework = arduino
    lib_deps =
        knolleary/PubSubClient
        bblanchon/ArduinoJson
    monitor_speed = 115200
    lib_extra_dirs = lib/
    lib_archive = false
    """
    project_files[device_id] = final_project_files
    return {"project_files": project_files}

def test_plan_designer_node(state: AgentState) -> Dict:
    print("--- L4: TEST PLAN DESIGNER: Creating test plan to verify MQTT JSON structure ---")
    app_main_code = state["completed_modules"].get("app_main", {}).get("main_code", "")
    current_device_role = state['current_device_task'].get('device_role', 'Unknown Device')

    prompt = textwrap.dedent(f"""
        <Prompt>
            <Role>You are a quality assurance engineer creating a precise test plan for an IoT device.</Role>
            <Goal>Analyze the provided code to find the MQTT topic and the JSON structure of the message payload. Use this to create a test plan that verifies the message format.</Goal>
            <Context>
                <DeviceRole>{current_device_role}</DeviceRole>
                <ApplicationCode>```cpp
    {app_main_code}```</ApplicationCode>
            </Context>
            <Instructions>
                1.  **Analyze `loop()`**: Focus on the code inside the `loop()` function.
                2.  **Find Publish Call**: Locate the `localMqttClient.publish(topic, payload)` call.
                3.  **Extract Topic**: Find the definition of the `topic` variable. This is the value for `device_log_topic`.
                4.  **Extract Key JSON Structure**: Examine the JSON being built for the `payload`. Identify a key part of the structure, **including quotes and colons**. This makes the check specific. For a payload `{{\\"lux\\":123}}`, the best value for `expected_log_contains` is `"lux":`.
                5.  **Construct JSON**: Fill out the test plan using the extracted topic and JSON structure.
                6.  **Handle No Publishing**: If `loop()` does not contain a recurring `localMqttClient.publish()` call, generate a test plan with an **empty `sequence` array**.
            </Instructions>
            <Example>
               <ApplicationCode>
               ...
               const char* DATA_TOPIC = "/smart_light/sensor/data";
               void loop() {{
                   ...
                   JsonDocument doc;
                   doc["illumination"] = bh1750_read_lux();
                   char buffer[64];
                   serializeJson(doc, buffer);
                   localMqttClient.publish(DATA_TOPIC, buffer);
                   ...
               }}
               </ApplicationCode>
               <Response>
               ```json
               {{
               "test_plan": {{
                   "device_log_topic": "/smart_light/sensor/data",
                   "sequence": [
                     {{
                       "name": "Check for illumination data publication",
                       "expected_log_contains": "\\"illumination\\":",
                       "timeout_seconds": 30
                     }}
                   ],
                   "success_criteria": "ALL_PASS"
               }}
               }}
               ```
               </Response>
            </Example>
            <OutputFormat>You MUST output a single, valid JSON object for the test plan.</OutputFormat>
        </Prompt>
        """)
    response = tester_model.invoke([HumanMessage(content=prompt)])
    try:
        plan_json = json.loads(extract_code(response.content, "json"))
        return {"test_plan": plan_json['test_plan']}
    except (json.JSONDecodeError, KeyError) as e:
        return {"test_plan": None, "feedback": f"FAIL: Could not generate test plan. Error: {e}"}


def deployment_and_verification_node(state: AgentState) -> Dict:
    device_task = state['current_device_task']
    device_id = device_task['internal_device_id']
    device_role = device_task.get('device_role', device_id)

    # 核心修正：创建一个对文件名安全的设备角色名
    safe_device_role = re.sub(r'[^a-zA-Z0-9_-]', '', device_role.lower().replace(' ', '_'))

    print(f"\\n--- L6: DEPLOYMENT & VERIFICATION: Preparing files for '{device_role}' ---")

    project_files = state['project_files'][device_id]

    # 核心修正：在主工作区内，为当前设备创建一个独立的子文件夹
    base_workspace_path = Path(state['workspace_path'])
    device_project_path = base_workspace_path / safe_device_role
    device_project_path.mkdir(parents=True, exist_ok=True)

    print(f"  -> Writing project files to dedicated directory: '{device_project_path}'")

    for filename, content in project_files.items():
        # 核心修正：将文件写入到设备的专属子文件夹中
        dest_path = device_project_path / filename
        if filename.endswith('/'):
            dest_path.mkdir(parents=True, exist_ok=True)
            continue
        dest_path.parent.mkdir(parents=True, exist_ok=True)
        with open(dest_path, "w", encoding="utf-8") as f:
            f.write(content)

    print(f"\n--- [VERIFICATION NODE] PHASE 3/3: Verifying device operation ---")
    test_plan = state.get('test_plan')

    if not test_plan or not isinstance(test_plan, dict) or not test_plan.get("sequence"):
        print("  -> Verification skipped (no test plan or sequence found).")
        # 核心修正：即使跳过验证，也要返回正确的 build_dir
        return {"build_dir": str(device_project_path),
                "feedback": "PASS: Verification skipped (no test plan generated)."}

    local_pc_ip = get_local_ip()
    topic_to_verify = test_plan.get("device_log_topic", f"/debug/{device_id}/log")
    print(f"  -> Test Plan found. Preparing to listen on MQTT topic: '{topic_to_verify}'")

    verifier_code = f"""
# verifier_script.py
import paho.mqtt.client as mqtt
import json, time, sys

MQTT_BROKER = "{local_pc_ip}"
MQTT_PORT = 1883
TEST_PLAN = {json.dumps(test_plan)}
DEVICE_ID = "{device_id}"
TOPIC_TO_VERIFY = "{topic_to_verify}"

test_results = {{}}
current_step_index = 0
start_time = time.time()
client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)

def on_connect(client, userdata, flags, reason_code, properties):
    print(f"Verifier: Connected to MQTT Broker with reason code {{reason_code}}.")
    if reason_code == 0:
        print(f"Verifier: Subscribing to topic: {{TOPIC_TO_VERIFY}}")
        client.subscribe(TOPIC_TO_VERIFY)
    else:
        print("Verifier: MQTT connection failed, exiting.")
        sys.exit(1)

def on_message(client, userdata, msg):
    global current_step_index, start_time
    payload = msg.payload.decode('utf-8').strip()
    print(f"Verifier: Received message on '{{msg.topic}}': '{{payload}}'")

    if current_step_index >= len(TEST_PLAN['sequence']): return
    step = TEST_PLAN['sequence'][current_step_index]

    if step['expected_log_contains'] in payload:
        print(f"  -> MATCH FOUND for step '{{step['name']}}'!")
        test_results[step['name']] = "PASS"
        current_step_index += 1
        start_time = time.time()

client.on_connect = on_connect
client.on_message = on_message

print(f"Verifier: Connecting to {{MQTT_BROKER}}:{{MQTT_PORT}}...")
client.connect(MQTT_BROKER, MQTT_PORT, 60)
client.loop_start()

while current_step_index < len(TEST_PLAN['sequence']):
    step = TEST_PLAN['sequence'][current_step_index]
    timeout = step['timeout_seconds']
    print(f"Verifier: Waiting for message containing '{{step['expected_log_contains']}}'. Timeout in {{timeout - (time.time() - start_time):.1f}}s")
    if time.time() - start_time > timeout:
        print(f"Verifier: TIMEOUT waiting for step '{{step['name']}}'.")
        test_results[step['name']] = "FAIL: Timeout"
        break
    time.sleep(1)

client.loop_stop()
client.disconnect()
print("Verifier: Disconnected from MQTT.")

all_passed = all(res == "PASS" for res in test_results.values()) and len(test_results) == len(TEST_PLAN['sequence'])
final_result = {{"status": "PASS" if all_passed else "FAIL", "details": test_results}}

print(f"Verifier: Final Result -> {{json.dumps(final_result)}}")
with open("test_result.json", "w") as f: json.dump(final_result, f)

if not all_passed:
    sys.exit(1)
"""
    verifier_script_path = device_project_path / "run_verification.py"
    verifier_script_path.write_text(verifier_code, encoding="utf-8")

    # 核心修正：返回正确的、设备专属的文件夹路径
    return {"build_dir": str(device_project_path)}


def compile_node(state: AgentState) -> Dict:
    build_dir = Path(state["build_dir"])
    device_id = state['current_device_task']['internal_device_id']
    print(f"\n--- [COMPILE NODE] PHASE 1/3: Compiling firmware for {device_id} in '{build_dir}' ---")

    # 【诊断代码】打印关键环境变量和 pio 系统信息
    print("--- [DIAGNOSIS] Checking subprocess environment ---")
    try:
        home_dir = os.path.expanduser("~")
        print(f"  - Python's view of HOME: {home_dir}")
        print(f"  - Env Var 'HOME': {os.environ.get('HOME')}")
        print(f"  - Env Var 'USERPROFILE' (Windows): {os.environ.get('USERPROFILE')}")
        print(f"  - Env Var 'PLATFORMIO_HOME_DIR': {os.environ.get('PLATFORMIO_HOME_DIR')}")

        # 运行 pio system info 来查看 PlatformIO 是如何看待自己的环境的
        pio_info_proc = subprocess.run(
            ["platformio", "system", "info"],
            capture_output=True, text=True, encoding='utf-8', errors='ignore'
        )
        print("\n  --- pio system info output ---")
        print(pio_info_proc.stdout)
        print("  ------------------------------\n")

    except Exception as diag_e:
        print(f"  - Diagnosis step failed: {diag_e}")

    # 【诊断代码结束】
    # 性能优化：不再将所有输出捕获到内存，而是直接流式传输到控制台
    try:
        command = ["platformio", "run"]
        print(f"  -> Executing command: {' '.join(command)}")
        process = subprocess.Popen(
            command,
            cwd=build_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT, # 合并标准错误和标准输出
            text=True,
            encoding='utf-8',
            errors='ignore'
        )

        full_log = ""
        # 实时读取和打印输出
        for line in iter(process.stdout.readline, ''):
            print(line, end='') # 实时打印到控制台
            full_log += line
        process.stdout.close()
        return_code = process.wait() # 等待进程结束

        if return_code != 0:
            print(f"--- [COMPILE NODE] COMPILE FAILED with return code {return_code} ---")
            # 为修复流程返回带有 FAIL 前缀的完整日志
            return {"feedback": f"FAIL: Compile process failed.\n{full_log}"}

    except Exception as e:
        error_msg = f"FAIL: An unexpected error occurred during compilation. Exception: {type(e).__name__}: {str(e)}"
        print(f"--- [COMPILE NODE] {error_msg} ---")
        return {"feedback": error_msg}

    # 编译成功后的逻辑保持不变
    firmware_path = build_dir / ".pio" / "build" / device_id / "firmware.bin"
    if not firmware_path.exists():
        return {"feedback": f"FAIL: Compiled firmware.bin not found at {firmware_path}"}

    print(f"--- [COMPILE NODE] COMPILATION SUCCESS. Firmware ready at: {firmware_path.resolve()} ---")
    return {
        "feedback": "PASS: Compilation successful.",
        "firmware_path": str(firmware_path),
        "build_dir": str(build_dir)
    }

def usb_upload_node(state: AgentState) -> Dict:
    build_dir = Path(state["build_dir"])
    device_id = state['current_device_task']['internal_device_id']
    print(f"\n--- [USB UPLOAD NODE] PHASE 2/3: Uploading firmware via USB for {device_id} ---")

    try:
        command = ["platformio", "run", "--target", "upload"]
        print(f"  -> Executing in '{build_dir}': {' '.join(command)}")
        # 同样使用流式输出来提供实时反馈
        process = subprocess.Popen(
            command,
            cwd=build_dir,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True, encoding='utf-8', errors='ignore'
        )
        full_log = ""
        for line in iter(process.stdout.readline, ''):
            print(line, end='')
            full_log += line
        process.stdout.close()
        return_code = process.wait(timeout=300)

        if return_code != 0:
             print(f"--- [USB UPLOAD NODE] UPLOAD FAILED with return code {return_code} ---")
             return {"feedback": f"FAIL: USB Upload process failed.\n\n{full_log}"}

        print("--- [USB UPLOAD NODE] USB UPLOAD COMMAND EXECUTED ---")
        # 即使命令成功，也给予短暂延时，确保设备重启和网络连接
        print("  -> Waiting 10 seconds for device to reboot and connect to network...")
        time.sleep(10)
        return {"feedback": "PASS: USB upload command executed."}

    except subprocess.TimeoutExpired as e:
        msg = f"FAIL: USB Upload process timed out after {e.timeout} seconds."
        print(f"--- [USB UPLOAD NODE] {msg} ---")
        return {"feedback": msg}
    except Exception as e:
        msg = f"FAIL: Unexpected error during USB upload. Exception: {type(e).__name__}: {str(e)}"
        print(f"--- [USB UPLOAD NODE] {msg} ---")
        return {"feedback": msg}

def pre_deployment_pause_node(state: AgentState) -> Dict:
    print("\\n--- Waiting for user to select deployment method... ---")
    return {"available_actions": ["DEPLOY_USB", "DEPLOY_OTA"]}

def ota_deployment_node(state: AgentState) -> Dict:
    print("\\n--- Entering Node: Real OTA Deployment ---")
    build_dir = Path(state["build_dir"])
    firmware_path = Path(state["firmware_path"])
    device_id = state['current_device_task']['internal_device_id']
    local_pc_ip = get_local_ip()
    ota_pusher_code = textwrap.dedent(f"""
    import paho.mqtt.client as mqtt
    import json, time
    MQTT_BROKER = "{local_pc_ip}"
    MQTT_PORT = 1883
    DEVICE_ID = "{device_id}"
    client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)
    client.connect(MQTT_BROKER, MQTT_PORT, 60)
    client.loop_start()
    time.sleep(1)
    if client.is_connected():
        command = {{"action": "update", "file": "firmware.bin"}}
        topic = f"/ota/{{DEVICE_ID}}/command"
        client.publish(topic, json.dumps(command))
    else:
        exit(1)
    time.sleep(1)
    client.loop_stop()
    client.disconnect()
    """)
    ota_pusher_script_path = build_dir / "ota_pusher.py"
    ota_pusher_script_path.write_text(ota_pusher_code, encoding="utf-8")
    http_server_dir = firmware_path.parent
    http_server_process = subprocess.Popen(["python", "-m", "http.server", "8000"], cwd=http_server_dir,
                                           stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    try:
        subprocess.run(["python", ota_pusher_script_path.name], cwd=build_dir, check=True, capture_output=True,
                       text=True, encoding='utf-8', errors='ignore')
        time.sleep(20)
    except subprocess.CalledProcessError as e:
        return {"feedback": f"FAIL: OTA push script failed. Error: {e.stderr}"}
    finally:
        http_server_process.terminate()
    return {"feedback": "PASS: Real OTA deployment command sent."}


def deploy_and_verify_node(state: AgentState) -> Dict:
    print(f"\n--- [VERIFICATION NODE] PHASE 3/3: Verifying device operation ---")
    test_plan = state.get('test_plan')

    if not test_plan or not isinstance(test_plan, dict) or not test_plan.get("sequence"):
        print("  -> Verification skipped (no test plan or sequence found).")
        return {"feedback": "PASS: Verification skipped (no test plan generated)."}

    device_id = state['current_device_task']['internal_device_id']
    build_dir = Path(state["build_dir"])
    local_pc_ip = get_local_ip()

    # 核心修正：从 test_plan 动态获取要验证的 MQTT 主题
    raw_topic = test_plan.get("device_log_topic", f"/debug/{device_id}/log")
    # 确保 topic 中的 {DEVICE_ID} 占位符被正确替换
    topic_to_verify = raw_topic.format(DEVICE_ID=device_id)
    print(f"  -> Test Plan found. Preparing to listen on MQTT topic: '{topic_to_verify}'")

    verifier_code = f"""
# verifier_script.py
import paho.mqtt.client as mqtt
import json, time, sys

MQTT_BROKER = "{local_pc_ip}"
MQTT_PORT = 1883
TEST_PLAN = {json.dumps(test_plan)}
DEVICE_ID = "{device_id}"
# BUGFIX: The topic is now correctly formatted before being embedded in the script
TOPIC_TO_VERIFY = "{topic_to_verify}" 

test_results = {{}}
current_step_index = 0
start_time = time.time()
client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)

def on_connect(client, userdata, flags, reason_code, properties):
    print(f"Verifier: Connected to MQTT Broker with reason code {{reason_code}}.")
    if reason_code == 0:
        # 核心修正：订阅正确的数据主题
        print(f"Verifier: Subscribing to topic: {{TOPIC_TO_VERIFY}}")
        client.subscribe(TOPIC_TO_VERIFY)
    else:
        print("Verifier: MQTT connection failed, exiting.")
        sys.exit(1)

def on_message(client, userdata, msg):
    global current_step_index, start_time
    payload = msg.payload.decode('utf-8').strip()
    print(f"Verifier: Received message on '{{msg.topic}}': '{{payload}}'")

    if current_step_index >= len(TEST_PLAN['sequence']): return
    step = TEST_PLAN['sequence'][current_step_index]

    if step['expected_log_contains'] in payload:
        print(f"  -> MATCH FOUND for step '{{step['name']}}'!")
        test_results[step['name']] = "PASS"
        current_step_index += 1
        start_time = time.time()

client.on_connect = on_connect
client.on_message = on_message

print(f"Verifier: Connecting to {{MQTT_BROKER}}:{{MQTT_PORT}}...")
client.connect(MQTT_BROKER, MQTT_PORT, 60)
client.loop_start()

while current_step_index < len(TEST_PLAN['sequence']):
    step = TEST_PLAN['sequence'][current_step_index]
    timeout = step['timeout_seconds']
    print(f"Verifier: Waiting for message containing '{{step['expected_log_contains']}}'. Timeout in {{timeout - (time.time() - start_time):.1f}}s")
    if time.time() - start_time > timeout:
        print(f"Verifier: TIMEOUT waiting for step '{{step['name']}}'.")
        test_results[step['name']] = "FAIL: Timeout"
        break
    time.sleep(1)

client.loop_stop()
client.disconnect()
print("Verifier: Disconnected from MQTT.")

all_passed = all(res == "PASS" for res in test_results.values()) and len(test_results) == len(TEST_PLAN['sequence'])
final_result = {{"status": "PASS" if all_passed else "FAIL", "details": test_results}}

print(f"Verifier: Final Result -> {{json.dumps(final_result)}}")
with open("test_result.json", "w") as f: json.dump(final_result, f)

if not all_passed:
    sys.exit(1)
"""
    verifier_script_path = build_dir / "run_verification.py"
    verifier_script_path.write_text(verifier_code, encoding="utf-8")

    print(f"  -> Verification script created at '{verifier_script_path}'. Executing...")
    try:
        process = subprocess.run(
            ["python", "run_verification.py"],
            cwd=build_dir,
            check=True,
            capture_output=True,
            text=True,
            encoding='utf-8',
            errors='ignore'
        )
        print("--- Verifier Script Output ---")
        print(process.stdout)
        print("----------------------------")

        with open(build_dir / "test_result.json", "r") as f:
            test_output = json.load(f)
        if test_output["status"] == "PASS":
            print("--- [VERIFICATION NODE] VERIFICATION SUCCESS ---")
            return {"feedback": "PASS: All hardware-in-the-loop tests passed."}
        else:
            details = json.dumps(test_output['details'])
            print(f"--- [VERIFICATION NODE] VERIFICATION FAILED. Details: {details} ---")
            return {"feedback": f"FAIL: Verification failed. Details: {details}"}

    except subprocess.CalledProcessError as e:
        details = f"Verification script exited with error code {e.returncode}."
        print(f"--- [VERIFICATION NODE] VERIFICATION FAILED. {details} ---")
        print("--- Verifier Script Error Output ---")
        print(e.stdout)
        print("----------------------------------")
        return {"feedback": f"FAIL: {details}\n{e.stdout}"}
# 【路由修正】check_unit_test_result 保持不变，但它的调用位置和上下文变了
def check_unit_test_result(state: AgentState) -> str:
    """决策函数：检查编译或验证结果，决定是继续还是修复。"""
    if "FAIL" in state.get('feedback', ''):
        print(f"--- [ROUTING] Feedback indicates FAILURE. Routing to REPAIR. ---")
        return "REPAIR"
    print(f"--- [ROUTING] Feedback indicates PASS. Routing to next step. ---")
    return "PASS"

# 【路由修正】deploy_and_verify_node 之后的路由
def route_after_verification(state: AgentState) -> str:
    """
    一个专门用于验证节点之后的新路由函数。
    它将区分可修复的编译失败和不可修复的验证失败。
    """
    feedback = state.get('feedback', '')
    if "FAIL: Verification failed" in feedback:
        print(
            "--- [ROUTING] Verification failed. This is a non-recoverable runtime error for the current device. Ending this device's workflow.")
        return "FINISH_DEVICE"  # 新的路由目标
    elif "FAIL" in feedback:
        # 其他类型的失败（理论上不应该在这里发生，但作为保障）
        print(f"--- [ROUTING] An unexpected failure occurred. Routing to REPAIR.")
        return "REPAIR"

    print(f"--- [ROUTING] Verification successful. Routing to DP Extractor.")
    return "PASS"


# 文件: app/langgraph_def/graph_builder.py

def dp_extractor_node(state: AgentState) -> Dict:
    """
    LLM reads the functional code of the current device and extracts Data Point (DP) information.
    [V5.2 Final Fix]: Corrects the state key to 'dp_info_list' to match the AgentState definition.
    """
    print("\\n--- Entering DP Extractor Node (V5.2 with correct state key) ---")

    current_device_task = state.get("current_device_task")
    if not current_device_task:
        return {"dp_info_list": []}

    device_id = current_device_task.get("internal_device_id")
    print(f"  -> Extracting Tuya DPs for device '{device_id}'...")

    all_project_files = state.get("project_files", {})
    actual_project_files = all_project_files.get(device_id, {})

    all_code_content = ""
    for file_name, file_content in actual_project_files.items():
        if isinstance(file_content, str):
            all_code_content += f"// --- Start of {file_name} ---\\n{file_content}\\n// --- End of {file_name} ---\\n\\n"

    if not all_code_content.strip():
        return {"dp_info_list": []}

    prompt_template = ChatPromptTemplate.from_messages([
        SystemMessagePromptTemplate.from_template(textwrap.dedent("""
            你是一个经验丰富的嵌入式系统工程师，擅长分析C/C++代码并提取设备的功能点信息。
            你的任务是根据提供的功能代码，识别其中实现的功能点（Data Point，简称DP），并严格按照指定的JSON格式输出这些功能点的信息列表。

            **！！！最重要的规则！！！**
            1.  **只看涂鸦**: 你必须只分析和涂鸦功能相关的代码。具体来说，就是寻找对 `tuya_publish_data()` 函数的调用（用于数据上报），以及在 `handle_tuya_app_commands()` 回调函数中的逻辑（用于处理指令下发）。
            2.  **必须忽略其他**: 你必须完全忽略所有与 `localMqttClient`、`PubSubClient` 的通用 `publish`/`subscribe` 方法、`logger.println` 或其他非涂鸦的通信代码。如果一个功能是通过 `localMqttClient` 或 `logger` 实现的，那它就**不是**涂鸦功能点。
            3.  **提取关键信息**: 从涂鸦相关的代码中，找到JSON负载中的`key`作为功能点的`code`(标识符)，并判断其`name`(中文名)、`type`(数据类型)和`mode`(传输方向)。

            功能点信息dp_info_list的格式是一个JSON列表，每个元素都是一个字典，代表一个功能点。
            请参考以下示例结构：
            ```json
            [
                {{
                    "id": 104,
                    "name": "亮度",
                    "code": "bright_value",
                    "mode": "rw",
                    "type": "value",
                    "define": "",
                    "remark": "",
                    "range_min": "10",
                    "range_max": "1000",
                    "step": "1",
                    "multiple": "0",
                    "unit": ""
                }}
            ]
            ```

            请严格遵循以下功能点信息规则：
            1. id：功能点ID，必填，整数，范围在101-499之间。从101开始递增生成，并避免重复。
            2. name：功能点名称，必填，根据功能代码具体实现的功能生成，支持中文。
            3. code：标识符，必填，支持英文，通常是变量名或功能函数名的小写下划线形式。
            4. mode：数据传输类型，必填。 "rw" (可上报可下发), "ro" (只上报), "wr" (只下发)。
            5. type：数据类型，必填。 "value", "string", "data", "bool", "enum"。
            6. define：数据定义。字符型填写最大长度；枚举型填写枚举值并用 "," 隔开；其他类型留空。
            7. remark：备注，默认留空。
            8. range_min/range_max/step/multiple：仅数值型必填，若无则给合理默认值。
            9. unit：单位，一般留空。

            你的输出必须是一个只包含JSON列表的字符串，不需要任何额外的解释或文本。如果代码中没有找到任何明确的**涂鸦**功能点，请返回一个空的JSON列表 `[]`。
            """)),
        HumanMessagePromptTemplate.from_template("请根据以下项目代码分析并生成功能点信息列表：\\n\\n{code_content}")
    ])

    chain = prompt_template | dp_extractor_model | JsonOutputParser()

    try:
        dp_info_list_for_device = chain.invoke({"code_content": all_code_content})
        final_list = []
        next_id = 101
        if isinstance(dp_info_list_for_device, list):
            for i, dp in enumerate(dp_info_list_for_device):
                if isinstance(dp, dict) and "code" in dp and "name" in dp:
                    dp['id'] = next_id + i
                    for key in ["mode", "type", "define", "remark", "range_min", "range_max", "step", "multiple", "unit"]:
                        if key not in dp:
                            dp[key] = ""
                    final_list.append(dp)

        print(f"  -> Successfully extracted and validated {len(final_list)} Tuya DP(s):")
        print(json.dumps(final_list, indent=2, ensure_ascii=False))
        # 核心修正：使用 AgentState 中定义的 "dp_info_list" 作为键名
        return {"dp_info_list": final_list}
    except Exception as e:
        print(f"  -> ERROR: Failed to extract or parse DPs: {e}")
        # 核心修正：即使失败也要使用正确的键名返回空列表
        return {"dp_info_list": []}


def device_artifact_generator_node(state: AgentState) -> Dict:
    """
    在单个设备处理流程结束后，为其生成专属的产出物（如 .xlsx 文件）。
    [V1.1 修正版]: 修正了读取状态的键名。
    """
    print("\\n--- [DEVICE ARTIFACT GENERATOR]: Generating artifacts for current device ---")

    workspace_path = Path(state['workspace_path'])
    current_device = state.get('current_device_task', {})
    device_role = current_device.get('device_role', 'unknown_device')

    # 核心修正：从 AgentState 中定义的 "dp_info_list" 读取数据
    dp_list = state.get('dp_info_list', [])

    if not dp_list:
        print(f"  -> No data points extracted for device '{device_role}'. Skipping Excel file generation.")
        return {}

    safe_device_role = "".join(c for c in device_role if c.isalnum() or c in (' ', '_')).rstrip()
    filename = workspace_path / f"{safe_device_role}_dps.xlsx"
    print(f"  -> Generating Tuya DP template for '{device_role}' at: {filename}")

    try:
        wb = Workbook()
        ws = wb.active
        ws.title = "功能点 (DP)"

        headers = [
            "DP ID", "功能点名称", "标识符", "数据传输类型", "数据类型",
            "数据定义", "备注", "数据范围-最小值", "数据范围-最大值",
            "间距", "倍数", "单位"
        ]
        ws.append(headers)

        column_widths = [10, 20, 20, 15, 12, 30, 20, 15, 15, 10, 10, 10]
        for i, column_width in enumerate(column_widths, 1):
            ws.column_dimensions[get_column_letter(i)].width = column_width

        for dp in dp_list:
            row_data = [
                dp.get("id"), dp.get("name"), dp.get("code"),
                dp.get("mode"), dp.get("type"), dp.get("define"),
                dp.get("remark"), dp.get("range_min"), dp.get("range_max"),
                dp.get("step"), dp.get("multiple"), dp.get("unit")
            ]
            ws.append(row_data)

        wb.save(filename)
        print(f"  -> Successfully saved Excel file for '{device_role}' with {len(dp_list)} data points.")

    except Exception as e:
        print(f"  -> ERROR: Failed to generate Excel file for '{device_role}': {e}")

    # 核心修正：清空状态时也使用正确的键名
    return {"dp_info_list": []}

# =================================================================================
# 5. Graph Definition & Logic
# =================================================================================

def check_device_queue(state: AgentState) -> str:
    """【修正】决策函数：检查是否还有待处理的设备任务。"""
    # 在开始处理一个新设备前，清理上个设备可能留下的旧状态
    state['feedback'] = ""
    state['user_action'] = None
    state['deployment_choice'] = None
    if state.get("current_device_task"):
        return "continue_to_development"
    return "finish_all_devices"

def check_module_queue(state: AgentState) -> str:
    """决策函数：检查是否还有待处理的模块任务。"""
    if state.get("current_module_task"):
        return "continue_development"
    return "finish_development"

def check_unit_test_result(state: AgentState) -> str:
    """决策函数：检查编译或验证结果，决定是继续还是修复。"""
    if "FAIL" in state.get('feedback', ''):
        print(f"--- [ROUTING] Feedback indicates FAILURE. Routing to REPAIR. ---")
        return "REPAIR"
    print(f"--- [ROUTING] Feedback indicates PASS. Routing to next step. ---")
    return "PASS"

def master_router_node(state: AgentState) -> dict:
    """【修正】图的总入口节点，仅作为正式的节点存在，返回空字典。"""
    print("--- [MASTER ROUTER] Evaluating entry point... ---")
    return {}

def master_router_logic(state: AgentState) -> str:
    """【修正】用于总入口节点的路由决策函数。"""
    if state.get("user_action"):
        print("--- [ROUTING LOGIC] User action found. Resuming from pause. ---")
        return "resume_from_pause"
    else:
        print("--- [ROUTING LOGIC] No user action. Starting from beginning. ---")
        return "start_from_beginning"

# 【新增】一个合格的、用于恢复流程的 “工作” 节点
def resume_router_node(state: AgentState) -> dict:
    """
    这是一个合格的图节点。它的工作很简单，就是打印一条日志。
    它将在 master_router 决定恢复流程后被调用。
    """
    print("--- [RESUME NODE] Workflow is resuming. Preparing to route deployment action... ---")
    return {}  # 作为一个合格的节点，它返回一个字典


# 【新增】一个合格的、用于恢复流程的 “决策” 函数
def route_deployment_logic(state: AgentState) -> str:
    """
    这是一个合格的条件边函数。它检查用户的操作并返回一个字符串决策。
    """
    user_action = state.get("user_action")
    if user_action == 'DEPLOY_USB':
        print("--- [ROUTING LOGIC] User chose USB. Routing to usb_upload_node. ---")
        return "REAL_USB_DEPLOY"
    elif user_action == 'DEPLOY_OTA':
        print("--- [ROUTING LOGIC] User chose OTA. Routing to ota_deployment_node. ---")
        return "REAL_OTA_DEPLOY"

    # 异常情况，理论上不应发生，但作为保护
    print("--- [ROUTING LOGIC] No user action found in a resumed state. Ending deployment phase. ---")
    return "END_DEPLOYMENT"

def build_graph():
    """
    【V3.2 架构修正】构建支持“暂停-恢复”生命周期的工作流图。
    """
    workflow = StateGraph(AgentState)

    # 添加所有节点
    workflow.add_node("master_router", master_router_node)
    workflow.add_node("plan_enrichment_node", plan_enrichment_node)
    workflow.add_node("device_dispatcher", device_dispatcher_node)
    workflow.add_node("module_architect", module_architect_node)
    workflow.add_node("module_dispatcher", module_dispatcher_node)
    workflow.add_node("api_designer", api_designer_node)
    workflow.add_node("developer", developer_node)
    workflow.add_node("integrator", integrator_node)
    workflow.add_node("test_plan_designer", test_plan_designer_node)
    workflow.add_node("deployment_and_verification", deployment_and_verification_node)
    workflow.add_node("compile_node", compile_node)
    workflow.add_node("pre_deployment_pause", pre_deployment_pause_node)
    workflow.add_node("usb_upload_node", usb_upload_node)
    workflow.add_node("ota_deployment_node", ota_deployment_node)
    workflow.add_node("deploy_and_verify_node", deploy_and_verify_node)
    workflow.add_node("dp_extractor", dp_extractor_node)
    workflow.add_node("device_artifact_generator", device_artifact_generator_node) # <-- 添加新节点

    # 【新增】添加我们新的、用于恢复的节点
    workflow.add_node("resume_router", resume_router_node)

    # 设定图的唯一入口
    workflow.set_entry_point("master_router")

    # --- 核心路由逻辑 ---

    # 1. 从总入口 master_router 开始决策
    workflow.add_conditional_edges(
        "master_router",
        master_router_logic,
        {
            # 【核心修改】如果是新开始，先走需求细化，再走设备分发
            "start_from_beginning": "plan_enrichment_node",
            "resume_from_pause": "resume_router"
        }
    )

    workflow.add_edge("plan_enrichment_node", "device_dispatcher")

    # 2. 从 resume_router 节点出发，进行部署方式的决策
    workflow.add_conditional_edges(
        "resume_router",
        route_deployment_logic,  # 使用我们新的、合格的决策函数
        {
            "REAL_USB_DEPLOY": "usb_upload_node",
            "REAL_OTA_DEPLOY": "ota_deployment_node",
            "END_DEPLOYMENT": END  # 异常情况则结束
        }
    )

    # --- 其余的图结构保持不变 ---

    # 正常的设备处理循环
    # [最终修正] 调整设备处理循环和结束逻辑
    workflow.add_conditional_edges(
        "device_dispatcher",
        check_device_queue,
        {
            "continue_to_development": "module_architect",
            "finish_all_devices": END  # <-- 当设备队列为空时，直接结束工作流
        }
    )

    # 模块开发循环
    workflow.add_edge("module_architect", "module_dispatcher")
    workflow.add_conditional_edges(
        "module_dispatcher",
        check_module_queue,
        {"continue_development": "api_designer", "finish_development": "integrator"}
    )
    workflow.add_edge("api_designer", "developer")
    workflow.add_edge("developer", "module_dispatcher")

    # 集成、测试、编译
    workflow.add_edge("integrator", "test_plan_designer")
    workflow.add_edge("test_plan_designer", "deployment_and_verification")
    workflow.add_edge("deployment_and_verification", "compile_node")

    # 编译后的路由
    workflow.add_conditional_edges(
        "compile_node",
        check_unit_test_result,
        {
            "PASS": "pre_deployment_pause",
            "REPAIR": "developer"
        }
    )

    # 暂停节点是此阶段的终点
    workflow.add_edge("pre_deployment_pause", END)

    # 部署后的流程
    workflow.add_edge("usb_upload_node", "deploy_and_verify_node")
    workflow.add_edge("ota_deployment_node", "deploy_and_verify_node")

    # --- 【架构核心修正】验证后的路由逻辑 ---
    workflow.add_conditional_edges(
        "deploy_and_verify_node",
        route_after_verification,  # 使用新的、更智能的路由函数
        {
            "PASS": "dp_extractor",  # 验证成功，继续
            "REPAIR": "developer",  # 其他失败，尝试修复
            "FINISH_DEVICE": "device_dispatcher"  # 验证失败，处理下一个设备
        }
    )

    # [最终修正] 最后的流程：提取DP -> 生成文件 -> 返回分发器
    workflow.add_edge("dp_extractor", "device_artifact_generator")
    workflow.add_edge("device_artifact_generator", "device_dispatcher")

    # 编译并返回图
    compiled_graph = workflow.compile()
    return compiled_graph\n--- FILE: app/templates/index.html ---\n<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zygo AI IDE v6.2</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.45.0/min/vs/loader.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <style>
        /* [保留所有您之前的 :root, *, html/body, button, input 等基础样式] */
        :root {
            --font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            --font-mono: 'JetBrains Mono', 'Fira Code', monospace;
            --bg-base: #12121c;
            --bg-surface: #1a1a28;
            --bg-surface-hover: #242435;
            --bg-glass: rgba(26, 26, 40, 0.6);
            --border-color: rgba(128, 128, 160, 0.2);
            --text-primary: #e0e0ff;
            --text-secondary: #9090b0;
            --accent-primary: #6a5acd;
            --accent-primary-glow: rgba(106, 90, 205, 0.5);
            --accent-success: #28a745;
            --accent-error: #dc3545;
            --accent-warn: #ffc107;
            --scrollbar-thumb: #3a3a5a;
            --scrollbar-thumb-hover: #4a4a6a;
        }

        .status-actions-container {
            background-color: var(--bg-surface);
            border: 1px solid var(--accent-primary);
            border-radius: 8px;
            padding: 20px;
            margin: 15px 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
            box-shadow: 0 0 20px -5px var(--accent-primary-glow);
        }
        .status-actions-container p {
            font-weight: 500;
            font-size: 1.1em;
        }
        .status-actions-container .actions {
            display: flex;
            gap: 15px;
        }

        html[data-theme='light'] {
            --bg-base: #f4f5fa;
            --bg-surface: #ffffff;
            --bg-surface-hover: #eef0f6;
            --bg-glass: rgba(255, 255, 255, 0.6);
            --border-color: rgba(0, 0, 0, 0.1);
            --text-primary: #12121c;
            --text-secondary: #5a5a72;
            --scrollbar-thumb: #c1c1c1;
            --scrollbar-thumb-hover: #a8a8a8;
        }
        * { box-sizing: border-box; margin: 0; padding: 0; }
        html, body {
            height: 100vh; width: 100vw; overflow: hidden;
            background-color: var(--bg-base); color: var(--text-primary);
            font-family: var(--font-family); font-size: 14px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        input[type=number] {
            -moz-appearance: textfield;
        }
        ::-webkit-scrollbar { width: 8px; height: 8px; }
        ::-webkit-scrollbar-track { background: transparent; }
        ::-webkit-scrollbar-thumb {
            background-color: var(--scrollbar-thumb);
            border-radius: 4px; border: 2px solid transparent;
            background-clip: content-box;
        }
        ::-webkit-scrollbar-thumb:hover { background-color: var(--scrollbar-thumb-hover); }
        button, input, select, textarea {
            font-family: inherit; color: inherit; background-color: var(--bg-surface);
            border: 1px solid var(--border-color); border-radius: 6px;
            padding: 8px 12px; font-size: 1em; transition: all 0.2s ease;
        }
        button {
            cursor: pointer; background-color: var(--accent-primary);
            border-color: var(--accent-primary); color: white; font-weight: 500;
            box-shadow: 0 0 15px 0 rgba(0,0,0,0.2);
        }
        button:hover:not(:disabled) {
            background-color: #7b68ee;
            box-shadow: 0 0 20px -5px var(--accent-primary-glow);
        }
        button:disabled { background-color: var(--text-secondary); cursor: not-allowed; opacity: 0.7; }
        input:focus, textarea:focus, select:focus {
            outline: none; border-color: var(--accent-primary);
            box-shadow: 0 0 15px -5px var(--accent-primary-glow);
        }
        button.secondary { background-color: var(--bg-surface-hover); border-color: var(--border-color); color: var(--text-primary); }
        .ide-container { display: flex; height: 100vh; }
        #activity-bar {
            width: 55px; background-color: var(--bg-base);
            border-right: 1px solid var(--border-color); padding: 10px 0;
            display: flex; flex-direction: column; align-items: center;
            justify-content: space-between; flex-shrink: 0;
        }
        .activity-group { display: flex; flex-direction: column; align-items: center; gap: 15px; }
        .activity-btn {
            width: 40px; height: 40px; display: flex; justify-content: center; align-items: center;
            border-radius: 8px; cursor: pointer; transition: background-color 0.2s ease;
            border: none; background: none; padding: 0;
        }
        .activity-btn svg { width: 24px; height: 24px; stroke: var(--text-secondary); transition: all 0.2s ease; }
        .activity-btn:hover { background-color: var(--bg-surface-hover); }
        .activity-btn.active { background-color: var(--accent-primary); }
        .activity-btn.active svg { stroke: white; }
        .content-container {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        /* 修改主视图以适应问题面板 */
        #main-view {
            flex-grow: 1;
            position: relative;
            display: flex;
            flex-direction: column;
            min-height: 0;
            overflow: hidden; /* 防止内容溢出 */
        }

        /* [新增] 优化问题面板布局的样式 (增强版 v2) */
        #problems-panel-content {
            padding: 5px 10px; /* 减小面板的整体内边距 */
        }
        #problems-panel-content h4 {
            margin: 2px 0 4px; /* 进一步减小标题的垂直外边距 */
            font-size: 0.9em;
            padding-bottom: 3px;
            font-family: var(--font-family);
            font-weight: 500;
            border-bottom: 1px solid var(--border-color);
        }
        #problems-panel-content ul {
            list-style: none;
            padding: 0;
            margin: 0; /* 移除列表的上边距 */
        }
        #problems-panel-content li {
            padding: 2px 4px; /* 维持列表项的最小垂直内边距 */
            border-radius: 4px;
            cursor: pointer;
            display: flex; /* 核心修改：使用 Flex 布局 */
            align-items: baseline; /* 基线对齐，文本看起来更整齐 */
            gap: 8px; /* 在项目之间创建间隙 */
            white-space: nowrap; /* 防止子元素内部换行 */
        }
        #problems-panel-content li > span:nth-child(3) {
            white-space: normal; /* 允许错误消息本身换行 */
            word-break: break-all;
        }

        .view {
            display: none;
            flex-grow: 1;
            flex-direction: column; /* 确保视图内部也是flex列布局 */
        }
        .view.active {
            display: flex;
        }
        #status-bar {
            height: 32px; background-color: var(--bg-surface);
            border-top: 1px solid var(--border-color); display: flex;
            align-items: center; padding: 0 15px; gap: 20px;
            font-size: 0.9em; color: var(--text-secondary); flex-shrink: 0;
        }
        .status-item { display: flex; align-items: center; gap: 6px; }
        .status-item svg { width: 14px; height: 14px; stroke: var(--text-secondary); }
        #status-user-actions { margin-left: auto; display: flex; align-items: center; gap: 15px; }
        /* [最终修正] 默认状态：保持内容水平垂直居中 */
        #view-ai-workflow {
            justify-content: center;
            align-items: center;
            transition: background-color 0.4s ease, backdrop-filter 0.4s ease;
        }
        /* [最终修正] 新增状态：当工作流激活时，切换为从上到下、拉伸布局的日志模式 */
        #view-ai-workflow.workflow-active {
            flex-direction: column;
            justify-content: flex-start;
            align-items: stretch;
        }
        #status-problems .status-item {
            opacity: 0.7;
            transition: opacity 0.2s ease;
        }

        #status-problems .status-item:hover {
            opacity: 1;
        }

        #status-problems .status-item.active {
            opacity: 1;
            text-decoration: underline;
        }
        #initial-prompt-container {
            width: 100%;
            height: 100%;
            max-width: 900px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            gap: 20px;
            position: relative;
            /* 新增下面这一行 */
            transition: height 0.4s ease;
        }
        #initial-prompt-container h1 { font-size: 2em; font-weight: 500; color: var(--text-primary); }
        #initial-prompt-container p { color: var(--text-secondary); text-align: center; }
        #raw-text-input { width: 100%; padding: 15px; font-size: 1.1em; background-color: var(--bg-surface); }
        #initial-submit-button { padding: 12px 25px; font-size: 1.1em; }
        #workflow-stream-container {
            display: none; width: 100%; height: 100%; padding: 20px;
            overflow-y: auto; font-family: var(--font-mono); font-size: 15px; line-height: 1.7;
        }
        .stream-entry { margin-bottom: 8px; }
        .stream-entry .timestamp { color: var(--text-secondary); margin-right: 15px; }
        .stream-entry .status-running { color: var(--accent-primary); font-weight: bold; }
        .stream-entry .status-completed { color: var(--accent-success); font-weight: bold; }
        .stream-entry .status-failed { color: var(--accent-error); font-weight: bold; }
        .stream-entry .log-line { white-space: pre-wrap; word-break: break-all; }
        .output-block {
            border: 1px solid var(--border-color); border-radius: 8px;
            margin-top: 10px; margin-bottom: 15px;
            background-color: var(--bg-surface);
            overflow: hidden;
        }
        .output-block-header {
            font-weight: 500; color: var(--text-secondary);
            padding: 8px 15px;
            border-bottom: 1px solid var(--border-color);
            background-color: rgba(0,0,0,0.1);
        }
        .output-block-content {
            padding: 15px;
            white-space: pre-wrap;
            word-break: break-all;
            color: var(--text-primary);
            max-height: 400px;
            overflow-y: auto;
            overflow-wrap: break-word;
        }
        .output-block-content pre, .output-block-content code {
            margin: 0; padding: 0 !important; background: transparent !important;
        }
        #view-file-explorer { flex-direction: row; }

        #editor-area-container {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            min-height: 0; /* 允许收缩 */
            overflow: hidden;
        }
        /* 【新增】问题面板样式 */
        #problems-panel {
            flex-shrink: 0;
            border-top: 1px solid var(--border-color);
            background-color: var(--bg-surface);
            display: none;
            flex-direction: column;
            width: 100%;
            overflow: hidden;
            min-height: 100px; /* 添加最小高度 */
            height: 200px; /* 设置默认高度 */
        }

        /* 确保调节器可见且易于拖拽 */
        #panel-resizer {
            height: 1px;
            background-color: var(--border-color);
            cursor: ns-resize;
            flex-shrink: 0;
            display: none;
            transition: background-color 0.2s ease;
        }

        #panel-resizer:hover {
            background-color: var(--accent-primary);
        }

        #problems-panel-header {
            padding: 5px 15px;
            border-bottom: 1px solid var(--border-color);
            font-weight: 500;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-shrink: 0;
        }
        /* 修改内容区域样式 */
        #problems-panel-content {
            overflow: auto;
            flex-grow: 1;
            padding: 10px;
            font-family: var(--font-mono);
            font-size: 0.9em;
            white-space: pre-wrap;
            word-wrap: break-word;
            overflow-wrap: break-word;
            min-height: 0; /* 允许内容区域收缩 */
        }

        #status-problems .icon-error { stroke: var(--accent-error); }
        #status-problems .icon-warning { stroke: var(--accent-warn); }
        #status-problems .icon-info { stroke: var(--accent-primary); }
        #file-tree-panel {
            width: 280px; padding: 15px; border-right: 1px solid var(--border-color);
            overflow-y: auto; flex-shrink: 0; display: flex; flex-direction: column;
        }
        #file-tree-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        #file-tree-header h3 { margin: 0; }
        #file-tree-container { flex-grow: 1; overflow-y: auto; }
        #code-editor-panel {
            flex-grow: 1; /* 这是关键，让编辑器占据所有可用空间 */
            display: flex;
            flex-direction: column;
        }
        #code-editor-header { padding: 10px 15px; border-bottom: 1px solid var(--border-color); display: flex; justify-content: space-between; align-items: center; }
        #code-editor-textarea {
            flex-grow: 1; background-color: var(--bg-base); border: none; padding: 15px;
            resize: none; font-family: var(--font-mono); font-size: 15px; line-height: 1.7;
        }
        #file-tree-container ul { list-style-type: none; padding-left: 15px; }
        .tree-item { cursor: pointer; display: flex; align-items: center; padding: 4px 5px; border-radius: 4px; }
        .tree-item:hover { background-color: var(--bg-surface-hover); }
        .tree-item.active { background-color: var(--accent-primary); color: white; }
        .tree-item .icon { margin-right: 8px; width: 16px; text-align: center; }
        .folder .icon::before { content: '▶'; display: inline-block; transition: transform 0.1s; }
        .folder.open > .tree-item .icon::before { transform: rotate(90deg); }
        .file .icon::before { content: '📄'; }
        .nested { display: none; }
        .folder.open > .nested { display: block; }
        #view-device-manager { padding: 20px; overflow-y: auto; }
        .device-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); gap: 20px; }
        .device-card {
            background-color: var(--bg-surface); border: 1px solid var(--border-color); border-radius: 8px;
            padding: 15px; display: flex; flex-direction: column; gap: 10px; transition: all 0.2s ease;
        }
        .device-card:hover { border-color: var(--accent-primary); box-shadow: 0 0 15px -5px var(--accent-primary-glow); }
        .device-card-header { display: flex; justify-content: space-between; align-items: center; }
        .device-card-header h3 { font-size: 1.1em; font-weight: 500; }
        .device-card-body p { font-size: 0.9em; color: var(--text-secondary); }
        .device-card-actions { display: flex; gap: 10px; margin-top: auto; }
        .device-card-actions button { flex-grow: 1; padding: 8px; font-size: 0.9em; }
        .device-card-actions .delete-btn { background-color: var(--accent-error); }
        dialog {
            background: var(--bg-glass); backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px);
            border: 1px solid var(--border-color); border-radius: 12px; color: var(--text-primary);
            width: 90%; box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
            position: fixed; top: 50%; left: 50%;
            transform: translate(-50%, -50%); margin: 0;
        }
        dialog#confirmation-dialog, dialog#device-dialog { max-width: 800px; }
        dialog#settings-dialog, dialog#project-loader-dialog { max-width: 500px; }
        dialog::backdrop { background: rgba(0, 0, 0, 0.4); }
        .dialog-content {
            padding: 25px; display: flex; flex-direction: column; gap: 15px;
            max-height: 80vh; overflow-y: auto;
        }
        .dialog-content h2 { font-weight: 500; margin-bottom: 10px; }
        .dialog-actions { display: flex; justify-content: flex-end; gap: 10px; margin-top: 20px; }
        #project-list { list-style: none; max-height: 300px; overflow-y: auto; }
        #project-list li {
            padding: 10px 15px;
            border-radius: 6px;
            border: 1px solid var(--border-color);
            margin-bottom: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        #project-list .project-name {
            cursor: pointer;
            flex-grow: 1;
        }
        #project-list .project-name:hover {
            color: var(--accent-primary);
        }
        #project-list .delete-project-btn {
            background-color: transparent;
            border: none;
            color: var(--text-secondary);
            width: 28px;
            height: 28px;
            border-radius: 50%;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: all 0.2s ease;
            flex-shrink: 0;
            box-shadow: none;
            margin-left: 15px;
        }
        #project-list .delete-project-btn:hover {
            background-color: var(--bg-surface-hover);
            color: var(--accent-error);
        }
        #project-list .delete-project-btn svg {
            width: 16px;
            height: 16px;
        }
        #project-list li:hover { background-color: var(--bg-surface-hover); }
        #project-list .status-badge {
            font-size: 0.8em; padding: 3px 8px; border-radius: 10px;
            color: white;
        }
        .status-badge.completed { background-color: var(--accent-success); }
        .status-badge.failed { background-color: var(--accent-error); }
        .status-badge.running { background-color: var(--accent-primary); }
        .device-task-card {
            background-color: var(--bg-surface);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 15px;
        }
        .device-card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        .device-card-header h5 {
            font-size: 1.1em;
            font-weight: 500;
            margin-bottom: 0;
            display: flex;
            align-items: center;
            gap: 10px;
            flex-grow: 1;
        }
        .device-card-header h5 input {
            font-size: 1em;
            font-weight: 500;
            flex-grow: 1;
        }
        .remove-task-btn {
            background-color: transparent;
            border: none;
            color: var(--text-secondary);
            width: 32px; height: 32px;
            border-radius: 50%;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: all 0.2s ease;
            flex-shrink: 0;
            box-shadow: none;
        }
        .remove-task-btn:hover {
            background-color: var(--bg-surface-hover);
            color: var(--accent-error);
        }
        .remove-task-btn svg {
            width: 18px;
            height: 18px;
        }
        .device-card-content {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 15px 25px;
            align-items: start;
        }
        .peripheral-wrapper {
            grid-column: 1 / -1;
            margin-top: 10px;
            padding-top: 15px;
            border-top: 1px solid var(--border-color);
        }
        .device-card-content > div {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        .device-description {
            flex-grow: 1;
            resize: vertical;
            min-height: 80px;
        }
        .remove-peripheral-btn {
            background-color: transparent;
            border: none;
            color: var(--text-secondary);
            width: 28px;
            height: 28px;
            border-radius: 50%;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: all 0.2s ease;
            flex-shrink: 0;
            box-shadow: none;
        }
        .remove-peripheral-btn:hover {
            background-color: var(--accent-error);
            color: white;
        }
        .remove-peripheral-btn svg {
            width: 14px;
            height: 14px;
        }
        .data-flow-line {
            display: flex;
            align-items: center;
            margin: 25px 5px;
        }
        .flow-node {
            background-color: var(--bg-surface-hover);
            padding: 8px 15px;
            border-radius: 6px;
            border: 1px solid var(--border-color);
            font-weight: 500;
            white-space: nowrap;
        }
        .flow-path {
            flex-grow: 1;
            height: 2px;
            background-color: var(--border-color);
            position: relative;
            margin: 0 15px;
        }
        .flow-arrow {
            position: absolute;
            width: 8px;
            height: 8px;
            background-color: var(--accent-primary);
            border-radius: 50%;
            box-shadow: 0 0 10px var(--accent-primary-glow);
            animation: flow-animation 2.5s linear infinite;
        }
        .flow-label {
            position: absolute;
            top: -22px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 0.85em;
            color: var(--text-secondary);
            background-color: var(--bg-base);
            padding: 0 8px;
            white-space: nowrap;
        }
        @keyframes flow-animation {
            from { left: 0; }
            to { left: 100%; }
        }
        #login-view { width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; }
        .form-container {
            display: flex; flex-direction: column; gap: 15px; width: 340px;
        }
        .form-container h2 { text-align: center; margin-bottom: 10px; font-weight: 500; }
        .form-container input { width: 100%; height: 44px; }
        .password-wrapper { position: relative; display: flex; align-items: center; }
        .password-wrapper input { padding-right: 40px; }
        .password-toggle-btn {
            position: absolute; right: 1px; top: 1px; bottom: 1px;
            height: auto; width: 40px; background: none; border: none;
            cursor: pointer; box-shadow: none; padding: 0;
            display: flex; justify-content: center; align-items: center;
        }
        .password-toggle-btn svg { stroke: var(--text-secondary); width: 20px; height: 20px; }
        .form-toggle { color: var(--accent-primary); cursor: pointer; text-align: center; font-size: 0.9em; margin-top: 10px; }
        .form-message { text-align: center; min-height: 20px; }
        .error { color: var(--accent-error); }
        .success { color: var(--accent-success); }

            /* 【核心新增】部署操作按钮的样式 */
        .deploy-action-btn {
            padding: 12px 25px;
            font-size: 1.1em;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .deploy-action-btn svg {
            width: 20px;
            height: 20px;
        }

        /* --- 文件管理器侧边栏拉伸条 --- */
        #sidebar-resizer {
            width: 3px;
            background-color: var(--border-color);
            cursor: ew-resize; /* 东西向拉伸光标 */
            flex-shrink: 0;
            transition: background-color 0.2s ease;
        }
        #sidebar-resizer:hover {
            background-color: var(--accent-primary);
        }

        /* --- 主界面 Gemini 风格动画和布局 --- */
        #initial-prompt-container {
            width: 100%;
            height: 100%;
            max-width: 900px; /* 增加最大宽度以适应新布局 */
            padding: 20px;
            display: flex;
            flex-direction: column;
            justify-content: flex-end; /* 内容置于底部 */
            gap: 20px;
            position: relative;
        }
        #welcome-greeting-wrapper {
            position: absolute;
            top: 25%;
            left: 50%;
            transform: translateX(-50%);
            text-align: center;
        }
        #welcome-greeting {
            display: inline-block;
            overflow: hidden;
            white-space: nowrap;
            border-right: .15em solid var(--accent-primary);
            /* 移除初始 opacity: 0 */
        }
        @keyframes typing {
            from { width: 0 }
            to {
                width: 100%;
                border-color: transparent; /* <-- 新增此行 */
            }
        }
        @keyframes blink-caret {
            from, to { border-color: transparent }
            50% { border-color: var(--accent-primary); }
        }

        #prompt-input-wrapper {
            display: flex;
            align-items: center;
            gap: 10px;
            background-color: var(--bg-surface);
            border: 1px solid var(--border-color);
            border-radius: 28px;
            padding: 8px 8px 8px 20px;
            width: 100%;
            position: relative;
            opacity: 0;
            transform: translateY(20px);
            /* 新增下面这一行，让所有变化的属性都动起来 */
            transition: all 0.4s ease-in-out;
        }
        /* --- 动画播放阶段 --- */
        #prompt-input-wrapper:focus-within {
             border-color: var(--accent-primary);
             box-shadow: 0 0 15px -5px var(--accent-primary-glow);
        }
        #raw-text-input {
            flex-grow: 1;
            border: none;
            background: transparent;
            padding: 8px 0;
            resize: none; /* 禁用右下角拉伸抓手 */
            overflow-y: auto; /* 开始时隐藏滚动条 */
            transition: all 0.4s ease-in-out;
            line-height: 1.5;
            max-height: 200px; /* 限制自动增高的高度 */
        }
        #raw-text-input:focus {
            outline: none;
            box-shadow: none;
        }
        #send-prompt-btn {
             background-color: transparent; /* <-- 修改这里 */
             color: var(--text-secondary); /* 默认颜色也需要改回普通状态 */
             opacity: 1;
             transition: all 0.4s ease-in-out;
        }
        #send-prompt-btn:not(:disabled) {
             opacity: 1;
        }
        /* --- 基础样式和过渡定义 --- */
        /* 为所有参与动画的元素添加平滑过渡 */
        #prompt-input-wrapper,
        #raw-text-input,
        #expand-input-btn,
        #send-prompt-btn {
            transition: all 0.4s cubic-bezier(0.65, 0, 0.35, 1); /* 一个更优雅的缓动函数 */
        }

        /* 初始加载动画：只在首次加载时播放 */
        #view-ai-workflow:not(.animation-finished) #welcome-greeting {
            animation:
                typing 1.5s steps(40, end) forwards,
                blink-caret 0.75s step-end 2;
        }
        #view-ai-workflow:not(.animation-finished) #prompt-input-wrapper {
            animation: slide-up 0.5s 1.5s forwards;
        }

        /* 动画播放完毕后的静态状态 */
        #view-ai-workflow.animation-finished #welcome-greeting {
            opacity: 1;
            border-color: transparent;
        }
        #view-ai-workflow.animation-finished #prompt-input-wrapper {
            opacity: 1;
            transform: translateY(0);
        }


        /* --- 全屏模式 --- */
        /* 全屏时的背景遮罩 */
        #view-ai-workflow.fullscreen-active {
            background: rgba(18, 18, 28, 0.8);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            z-index: 1000;
        }

        /* 全屏时，让内容容器撑满 */
        #view-ai-workflow.fullscreen-active #initial-prompt-container {
             height: 100%;
        }

        /* 核心：输入框wrapper的“变身”效果 */
        #view-ai-workflow.fullscreen-active #prompt-input-wrapper {
            height: 100%;
            border-radius: 12px; /* 全屏时可以带一点小圆角，更精致 */
            flex-direction: column;
            align-items: stretch;
            padding: 24px;
        }

        /* 全屏时，文本域撑满 */
        #view-ai-workflow.fullscreen-active #raw-text-input {
            height: 100%;
            max-height: none; /* 取消最大高度限制 */
            font-size: 1.2em; /* 字号也可以稍大一些 */
        }

        /* 全屏时，按钮的位置和图标切换 */
        #view-ai-workflow.fullscreen-active #expand-input-btn {
            position: absolute;
            top: 24px;
            right: 24px;
            z-index: 10;
        }

        #view-ai-workflow.fullscreen-active .icon-expand { display: none; }
        #view-ai-workflow.fullscreen-active .icon-collapse { display: block; }

        /* 全屏时，发送按钮移动到右下角 */
        #view-ai-workflow.fullscreen-active #send-prompt-btn {
            position: absolute;
            bottom: 24px;
            right: 24px;
        }

        @keyframes slide-up {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        /* 思考中的指示器 */
        #thinking-indicator {
            display: none;
            align-items: center;
            gap: 15px;
            padding: 10px;
            position: absolute;
            top: 25%;
            left: 50%;
            transform: translateX(-50%);
        }
        #thinking-indicator .spinner-icon {
            animation: spin 1.5s linear infinite;
        }
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        /* 需求发送气泡动画 */
        #prompt-animation-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none; /* 让鼠标事件穿透 */
        }
        .prompt-bubble {
            position: absolute;
            bottom: 100px; /* 从输入框附近开始 */
            left: 50%;
            transform: translateX(-50%);
            padding: 12px 20px;
            background-color: var(--bg-surface);
            border-radius: 20px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            animation: bubble-up 1s ease-out forwards;
            max-width: 800px;
            white-space: pre-wrap;
            word-break: break-all;
        }
        @keyframes bubble-up {
            from {
                bottom: 100px;
                opacity: 1;
            }
            to {
                bottom: 75%;
                opacity: 0;
            }
        }
        /* --- 全屏按钮的核心改造 --- */
        #expand-input-btn {
            /* 为按钮自身也添加过渡效果 */
            transition: all 0.4s ease-in-out;
        }

        #view-ai-workflow.fullscreen-active #expand-input-btn {
            /* 全屏时，将按钮定位到右上角 */
            position: absolute;
            top: 24px;
            right: 24px;
            z-index: 1010; /* 确保在最上层 */
        }

        /* 全屏时，切换图标的显示/隐藏 */
        #view-ai-workflow.fullscreen-active .icon-expand {
            display: none;
        }
        #view-ai-workflow.fullscreen-active .icon-collapse {
            display: block;
        }

        /* 新增：默认只显示“展开”图标，隐藏“收起”图标 */
        .icon-collapse {
            display: none;
        }
        .icon-expand {
            display: block;
        }
        #prompt-input-wrapper > #expand-input-btn,
        #prompt-input-wrapper > #send-prompt-btn {
            background: transparent !important;
            border: none !important;
            box-shadow: none !important;
            color: var(--text-secondary);
        }

        /* 2. 统一并美化按钮里的SVG图标 */
        #prompt-input-wrapper > button svg {
            stroke: currentColor; /* 让图标颜色继承按钮的color属性 */
            stroke-width: 2.5;    /* 让线条稍粗一点，更清晰 */
            transition: transform 0.2s ease;
        }

        /* 3. 优化鼠标悬停/聚焦效果 */
        #prompt-input-wrapper > button:hover svg {<button id="expand-input-btn" title="展开/收起">
            color: var(--text-primary);
            transform: scale(1.1); /* 轻微放大，增加动感 */
        }

        /* 4. 修复全屏时“收起”按钮被遮挡的问题 */
        #view-ai-workflow.fullscreen-active #expand-input-btn {
            z-index: 10; /* 确保它在最上层，不会被文本框遮挡 */
        }
    </style>
</head>
<body>
    <!-- Login View -->
    <div id="login-view">
        <div id="login-form-container" class="form-container">
            <h2>登录 Zygo IDE</h2>
            <input type="text" id="login-username" placeholder="用户名" value="testuser">
            <div class="password-wrapper">
                <input type="password" id="login-password" placeholder="密码" value="password123">
                <button type="button" class="password-toggle-btn" onclick="togglePasswordVisibility('login-password', this)">
                    <svg class="eye-open" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/><circle cx="12" cy="12" r="3"/></svg>
                    <svg class="eye-closed" style="display: none;" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9.88 9.88a3 3 0 1 0 4.24 4.24"/><path d="M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68"/><path d="M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61"/><line x1="2" y1="2" x2="22" y2="22"/></svg>
                </button>
            </div>
            <button id="login-button">登录</button>
            <p id="login-error" class="form-message error"></p>
            <p class="form-toggle" onclick="toggleForms()">没有账户？注册一个</p>
        </div>
        <div id="register-form-container" class="form-container" style="display: none;">
            <h2>注册新用户</h2>
            <input type="text" id="register-username" placeholder="设置用户名">
            <div class="password-wrapper">
                <input type="password" id="register-password" placeholder="设置密码">
                <button type="button" class="password-toggle-btn" onclick="togglePasswordVisibility('register-password', this)">
                    <svg class="eye-open" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/><circle cx="12" cy="12" r="3"/></svg>
                    <svg class="eye-closed" style="display: none;" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9.88 9.88a3 3 0 1 0 4.24 4.24"/><path d="M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68"/><path d="M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61"/><line x1="2" y1="2" x2="22" y2="22"/></svg>
                </button>
            </div>
            <button id="register-button">注册</button>
            <p id="register-message" class="form-message"></p>
            <p class="form-toggle" onclick="toggleForms()">已有账户？去登录</p>
        </div>
    </div>

    <!-- Main IDE View -->
    <div id="ide-view" class="ide-container" style="display: none;">
        <div id="activity-bar">
            <div class="activity-group">
                <button id="btn-activity-ai" class="activity-btn active" title="AI 工作流"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z"/><path d="M5 3v4"/><path d="M19 17v4"/><path d="M3 5h4"/><path d="M17 19h4"/></svg></button>
                <button id="btn-activity-files" class="activity-btn" title="文件浏览器"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><line x1="16" y1="13" x2="8" y2="13"/><line x1="16" y1="17" x2="8" y2="17"/><line x1="10" y1="9" x2="8" y2="9"/></svg></button>
                <button id="btn-activity-devices" class="activity-btn" title="设备管理器"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="4" width="20" height="16" rx="2"/><path d="M6 12h4"/><path d="M14 12h4"/><path d="M6 16h12"/></svg></button>
            </div>
            <div class="activity-group">
                <button id="btn-theme-toggle" class="activity-btn" title="切换主题"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="theme-icon-sun"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="theme-icon-moon" style="display: none;"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg></button>
                <button id="btn-settings" class="activity-btn" title="用户设置"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 0 2l-.15.08a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.38a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1 0-2l.15.08a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"></path><circle cx="12" cy="12" r="3"></circle></svg></button>
            </div>
        </div>

        <div class="content-container">
            <div id="main-view">
                <div id="view-ai-workflow" class="view active">
                    <div id="prompt-animation-container"></div>

                    <div id="initial-prompt-container">
                        <div id="welcome-greeting-wrapper">
                            <h1 id="welcome-greeting"></h1>
                        </div>

                        <div id="thinking-indicator" style="display: none;">
                            <svg class="logo-icon" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="var(--accent-primary)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z"/><path d="M5 3v4"/><path d="M19 17v4"/><path d="M3 5h4"/><path d="M17 19h4"/></svg>
                            <svg class="spinner-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="2" x2="12" y2="6"></line><line x1="12" y1="18" x2="12" y2="22"></line><line x1="4.93" y1="4.93" x2="7.76" y2="7.76"></line><line x1="16.24" y1="16.24" x2="19.07" y2="19.07"></line><line x1="2" y1="12" x2="6" y2="12"></line><line x1="18" y1="12" x2="22" y2="12"></line><line x1="4.93" y1="19.07" x2="7.76" y2="16.24"></line><line x1="16.24" y1="7.76" x2="19.07" y2="4.93"></line></svg>
                        </div>

                        <div id="prompt-input-wrapper">
                             <textarea id="raw-text-input" rows="1" placeholder="描述您的项目想法..."></textarea>
                            <button id="expand-input-btn" title="展开/收起">
                                <svg class="icon-expand" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"/></svg>
                                <svg class="icon-collapse" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"/></svg>
                            </button>
                             <button id="send-prompt-btn" title="发送" disabled>
                                 <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="19" x2="12" y2="5"></line><polyline points="5 12 12 5 19 12"></polyline></svg>
                             </button>
                        </div>
                    </div>
                    <div id="workflow-stream-container"></div>
                    <div id="deployment-actions-container" style="padding: 20px; display: none; justify-content: center; gap: 20px;"></div>
                </div>

                <div id="view-file-explorer" class="view">
                    <div id="file-tree-panel">
                        <div id="file-tree-header">
                            <h3>文件浏览器</h3>
                            <div style="display: flex; gap: 8px;">
                                <button id="load-cloud-project-btn" class="secondary" title="加载云端项目">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="17 8 12 3 7 8"/><line x1="12" y1="3" x2="12" y2="15"/></svg>
                                </button>
                                <button id="open-local-folder-btn" class="secondary" title="打开本地文件夹">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"></path></svg>
                                </button>
                            </div>
                        </div>
                        <div id="file-tree-container"></div>
                    </div>
                    <div id="sidebar-resizer"></div>
                    <div id="editor-area-container" style="flex-grow: 1; display: flex; flex-direction: column;">
                        <div id="editor-welcome-message" style="display: flex; flex-grow: 1; justify-content: center; align-items: center; text-align: center; color: var(--text-secondary);">
                            <div>
                                <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" style="stroke: var(--border-color);"><path d="m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z"/><path d="M5 3v4"/><path d="M19 17v4"/><path d="M3 5h4"/><path d="M17 19h4"/></svg>
                                <h2 style="color: var(--text-primary); margin: 15px 0 5px;">Zygo AI IDE</h2>
                                <p>请从左侧选择一个文件进行查看和编辑</p>
                            </div>
                        </div>
                        <div id="code-editor-panel" style="display: none; flex-grow: 1; flex-direction: column;">
                            <div id="code-editor-header">
                                <span id="editing-file-name"></span>
                                <button id="save-file-btn">保存</button>
                            </div>
                            <div id="monaco-editor-container" style="flex-grow: 1;"></div>
                        </div>
                    </div>
                </div>

                <div id="view-device-manager" class="view">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h2>设备管理器</h2>
                        <button id="add-device-btn">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" style="vertical-align: middle; margin-right: 5px;"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
                            注册新设备
                        </button>
                    </div>
                    <div id="device-grid" class="device-grid"></div>
                </div>
            </div>

            <div id="panel-resizer"></div>

            <div id="problems-panel">
                <div id="problems-panel-header">
                    <span>问题</span>
                    <button onclick="closeProblemsPanel()" style="background: none; border: none; cursor: pointer; color: var(--text-secondary); padding: 4px; box-shadow: none; border-radius: 4px; transition: all 0.2s ease;"
                            onmouseover="this.style.backgroundColor='var(--bg-surface-hover)'; this.style.color='var(--text-primary)';"
                            onmouseout="this.style.backgroundColor='transparent'; this.style.color='var(--text-secondary)';">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                    </button>
                </div>
                <div id="problems-panel-content">
                </div>
            </div>

            <div id="status-bar">
                <div id="status-workflow" class="status-item">
                     <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 10c0-4.4-3.6-8-8-8S5 5.6 5 10c0 4.4 3.6 8 8 8"/><path d="M12 2v4"/><path d="m6.4 7.4-3 3"/><path d="M2 12h4"/><path d="m6.4 16.6-3-3"/><path d="M12 18v4"/><path d="m17.6 16.6 3-3"/><path d="M22 12h-4"/><path d="m17.6 7.4 3 3"/></svg>
                    <span>未开始</span>
                </div>
                 <div id="status-device" class="status-item">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="4" width="20" height="16" rx="2"/><path d="M6 12h4"/></svg>
                    <span>无设备</span>
                </div>
                <div id="status-problems"
                     class="status-item"
                     style="display:none;cursor:pointer;"
                     title="切换问题面板"
                     onclick="toggleProblemsPanel()">
                </div>
                <div id="status-user-actions">
                    <div id="status-user" class="status-item">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>
                        <span id="username-display"></span>
                    </div>
                    <button id="logout-button" class="activity-btn" style="width: auto; height: auto;" title="登出">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/><polyline points="16 17 21 12 16 7"/><line x1="21" y1="12" x2="9" y2="12"/></svg>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Dialogs -->
    <dialog id="confirmation-dialog">
        <div class="dialog-content">
            <h2>请确认项目信息</h2>
            <p>AI已为您解析需求，请检查并补全信息后开始构建。</p>
            <form id="confirmation-form" style="display: flex; flex-direction: column; gap: 15px;"></form>
            <!-- 【核心修改】调整了对话框按钮 -->
            <div class="dialog-actions">
                <button type="button" id="save-template-btn" class="secondary">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="vertical-align: middle; margin-right: 5px;"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>
                    另存为模板
                </button>
                <button type="button" class="secondary" onclick="document.getElementById('confirmation-dialog').close()">取消</button>
                <button type="submit" form="confirmation-form">确认并开始构建</button>
            </div>
        </div>
    </dialog>

    <dialog id="device-dialog">
        <div class="dialog-content">
            <h2 id="device-dialog-title">注册新设备</h2>
            <form id="device-form" style="display: flex; flex-direction: column; gap: 15px;">
                <input type="hidden" id="device-internal-id">
                <input type="text" id="device-nickname" placeholder="设备昵称 (例如: 客厅的温湿度计)" required>
                <input type="text" id="device-board" placeholder="开发板型号 (例如: esp32dev)" required>
                <select id="cloud-platform">
                    <option value="tuya" selected>涂鸦智能 (Tuya)</option>
                    <option value="other">其他</option>
                </select>
                <input type="text" id="cloud-product-id" placeholder="产品ID (Product ID)">
                <input type="text" id="cloud-device-id" placeholder="设备ID (Device ID)">
                <input type="password" id="cloud-device-secret" placeholder="设备密钥 (Device Secret)">
                <div id="device-peripherals-container" style="margin-top: 10px; border-top: 1px solid var(--border-color); padding-top: 15px;"></div>
                <button type="button" class="secondary" onclick="addDevicePeripheralRow()">+ 添加外设</button>
                <p id="device-form-error" class="form-message error"></p>
            </form>
             <div class="dialog-actions">
                <button type="button" class="secondary" onclick="document.getElementById('device-dialog').close()">取消</button>
                <button type="submit" id="device-form-submit-btn" form="device-form">注册</button>
            </div>
        </div>
    </dialog>

    <dialog id="settings-dialog">
        <div class="dialog-content">
            <h2>用户设置</h2>
            <p>在这里配置您的个人偏好，例如Wi-Fi凭证，用于自动写入设备代码。</p>
            <form id="settings-form" style="display: flex; flex-direction: column; gap: 15px;">
                 <input type="text" id="wifi-ssid" placeholder="Wi-Fi 名称 (SSID)">
                 <input type="password" id="wifi-password" placeholder="Wi-Fi 密码">
                 <p id="settings-message" class="form-message"></p>
            </form>
             <div class="dialog-actions">
                <button type="button" class="secondary" onclick="document.getElementById('settings-dialog').close()">取消</button>
                <button type="submit" id="settings-form-submit-btn" form="settings-form">保存设置</button>
            </div>
        </div>
    </dialog>

    <dialog id="project-loader-dialog">
        <div class="dialog-content">
            <h2>加载云端项目</h2>
            <p>您可以加载历史构建记录以查看文件，或使用项目模板开始一次新的构建。</p>
            <ul id="project-list"></ul>
        </div>
         <div class="dialog-actions">
            <button type="button" class="secondary" onclick="document.getElementById('project-loader-dialog').close()">关闭</button>
        </div>
    </dialog>

<script>
    document.addEventListener('DOMContentLoaded', () => {
    // --- State Management & Globals (unchanged) ---
    let currentWorkflowId = null;
    let accessToken = null;
    let userDevices = [];
    let statusInterval = null;
    let currentEditingPath = null;
    let lastRenderedStepState = {};
    const API_BASE_URL = '/api/v1';
    let isLocalProject = false;
    let syncedLocalProjectId = null;
    // 新增变量
    let localFileHandles = new Map();
    // 移到外部声明，并移除初始的 null 赋值
    let monacoEditor;
    let problemsFilter = 'all';
    // --- DOM Elements ---
    let loginView, ideView, workflowStreamContainer, initialPromptContainer, deviceGrid;

    // ===================================================================
    // Utility Functions (unchanged)
    // ===================================================================

    // ===================================================================
    // Utility Functions
    // ===================================================================

    function setupSidebarResizer() {
        const resizer = document.getElementById('sidebar-resizer');
        const sidebar = document.getElementById('file-tree-panel');

        function startResize(e) {
            e.preventDefault();
            const startX = e.clientX;
            const startWidth = sidebar.offsetWidth;

            function doResize(e) {
                const newWidth = startWidth + e.clientX - startX;
                if (newWidth > 200 && newWidth < window.innerWidth * 0.5) { // 设置最小/最大宽度
                    sidebar.style.width = newWidth + 'px';
                }
            }

            function stopResize() {
                window.removeEventListener('mousemove', doResize);
                window.removeEventListener('mouseup', stopResize);
                document.body.style.cursor = '';
            }

            window.addEventListener('mousemove', doResize);
            window.addEventListener('mouseup', stopResize);
            document.body.style.cursor = 'ew-resize';
        }

        resizer.addEventListener('mousedown', startResize);
    }

    function closeProblemsPanel() {
        const panel = document.getElementById('problems-panel');
        const resizer = document.getElementById('panel-resizer');

        // 直接设置为 none，不依赖其他逻辑
        panel.style.display = 'none';
        resizer.style.display = 'none';

        // 可选：重置过滤器状态
        problemsFilter = 'all';
    }

    function toggleProblemsPanel(forceShow = null) {
        const panel = document.getElementById('problems-panel');
        const resizer = document.getElementById('panel-resizer');

        // 如果有强制显示参数，直接使用
        if (forceShow !== null) {
            panel.style.display = forceShow ? 'flex' : 'none';
            resizer.style.display = forceShow ? 'block' : 'none';
            return;
        }

        // 否则切换显示状态
        // 使用 style.display 而不是 getComputedStyle，因为我们总是显式设置 display
        const isCurrentlyHidden = panel.style.display === 'none' || !panel.style.display;

        panel.style.display = isCurrentlyHidden ? 'flex' : 'none';
        resizer.style.display = isCurrentlyHidden ? 'block' : 'none';
    }

    // 【核心新增】用于处理部署按钮点击的函数
    async function postDeploymentAction(action) {
        if (!currentWorkflowId) return;

        const container = document.getElementById('deployment-actions-container');
        container.innerHTML = `<span style="color: var(--text-secondary);">正在恢复: ${action}...</span>`;

        try {
            await fetchApi(`/workflows/${currentWorkflowId}/actions`, 'POST', { action: action }, 202);
            // API调用成功后，轮询将自动接管后续的状态更新
        } catch (error) {
            alert(`执行操作失败: ${error.message}`);
            // 如果失败，可能需要重新渲染按钮
            checkStatus();
        }
    }

    function escapeHtml(unsafe) {
        if (typeof unsafe !== 'string') return unsafe;
        return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
    function updateMessage(elementId, text, isError = false) {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = text;
            element.className = 'form-message ' + (isError ? 'error' : 'success');
        }
    }
    function toggleForms() {
        const loginForm = document.getElementById('login-form-container');
        const registerForm = document.getElementById('register-form-container');
        const isLoginVisible = loginForm.style.display !== 'none';
        loginForm.style.display = isLoginVisible ? 'none' : 'flex';
        registerForm.style.display = isLoginVisible ? 'flex' : 'none';
    }
    function togglePasswordVisibility(inputId, button) {
        const input = document.getElementById(inputId);
        const eyeOpen = button.querySelector('.eye-open');
        const eyeClosed = button.querySelector('.eye-closed');
        if (input.type === 'password') {
            input.type = 'text';
            eyeOpen.style.display = 'none'; eyeClosed.style.display = 'block';
        } else {
            input.type = 'password';
            eyeOpen.style.display = 'block'; eyeClosed.style.display = 'none';
        }
    }

    function defineAndSetMonacoTheme() {
        // 读取CSS变量来定义主题颜色
        const styles = getComputedStyle(document.documentElement);
        const isDark = !document.documentElement.hasAttribute('data-theme');

        const themeData = {
            base: isDark ? 'vs-dark' : 'vs',
            inherit: true,
            rules: [
                // 你可以在这里添加更精细的规则
            ],
            colors: {
                'editor.background': styles.getPropertyValue('--bg-surface').trim(),
                'editor.foreground': styles.getPropertyValue('--text-primary').trim(),
                'editorCursor.foreground': styles.getPropertyValue('--accent-primary').trim(),
                'editor.lineHighlightBackground': styles.getPropertyValue('--bg-surface-hover').trim(),
                'editor.selectionBackground': styles.getPropertyValue('--scrollbar-thumb').trim(),
                'editorWidget.background': styles.getPropertyValue('--bg-surface').trim(),
                'editorWidget.border': styles.getPropertyValue('--border-color').trim()
            }
        };

        monaco.editor.defineTheme('custom-theme', themeData);
        monaco.editor.setTheme('custom-theme');
    }

    async function fetchApi(endpoint, method = 'GET', body = null, expectedStatus) {
        const options = { method, headers: { 'Authorization': `Bearer ${accessToken}` } };
        if (body) {
            options.headers['Content-Type'] = 'application/json';
            options.body = JSON.stringify(body);
        }
        const response = await fetch(API_BASE_URL + endpoint, options);
        const responseText = await response.text();
        const isSuccess = expectedStatus ? response.status === expectedStatus : response.ok;
        if (!isSuccess) {
            let errorMsg = `请求失败，状态码: ${response.status}`;
            try { errorMsg = JSON.parse(responseText).error || errorMsg; } catch (e) {}
            throw new Error(errorMsg);
        }
        try { return JSON.parse(responseText); } catch (e) { return {}; }
    }

    // ===================================================================
    // Project Confirmation Dialog Logic (Refactored for Template Management)
    // ===================================================================
    function buildConfirmationFormHtml(data) {
        // This function remains the same as the previous version
        let formHtml = `
            <label>项目名称:</label>
            <input type="text" id="final-project-name" value="${escapeHtml(data.project_name || '')}" required>
            <label>项目总描述:</label>
            <textarea id="final-project-description" rows="3">${escapeHtml(data.project_description || '')}</textarea>
            <h4 style="margin-top: 15px; margin-bottom: 5px; border-top: 1px solid var(--border-color); padding-top: 15px;">设备任务列表</h4>
            <div id="device-tasks-container">
        `;
        (data.device_tasks || []).forEach((task, index) => {
            formHtml += createPopulatedDeviceCardHtml(task, index);
        });
        formHtml += `</div>
            <button type="button" id="add-device-task-btn" class="secondary" style="margin-top: 15px; width: 100%;">+ 添加一个新设备任务</button>
            <div style="display: flex; align-items: center; gap: 15px; margin-top: 15px; border-top: 1px solid var(--border-color); padding-top: 15px;">
                <h4>设备间通信计划</h4>
                <button type="button" class="secondary" onclick="refreshCommunicationPlan()" title="根据上方修改重新分析通信" style="padding: 5px 10px; font-size: 0.8em;">
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 2v6h6"/><path d="M21 12A9 9 0 0 0 6 5.3L3 8"/><path d="M21 22v-6h-6"/><path d="M3 12a9 9 0 0 0 15 6.7l3-2.7"/></svg>
                    刷新
                </button>
            </div>
            <div id="communication-plan-container" style="padding: 10px 0;">`;

        if (data.inter_device_communication && data.inter_device_communication.length > 0) {
             formHtml += data.inter_device_communication.map(comm => `
                <div class="data-flow-line">
                    <div class="flow-node source">${escapeHtml(comm.source_device_role)}</div>
                    <div class="flow-path">
                        <div class="flow-arrow"></div>
                        <div class="flow-label">[${escapeHtml(comm.protocol)}] ${escapeHtml(comm.data_description)}</div>
                    </div>
                    <div class="flow-node target">${escapeHtml(comm.target_device_role)}</div>
                </div>
             `).join('');
        } else {
            formHtml += `<p style="color: var(--text-secondary);">AI未检测到设备间通信。</p>`;
        }
        formHtml += `</div>`;
        return formHtml;
    }

    function createPopulatedDeviceCardHtml(task, index) {
        // This function remains the same as the previous version
        return `
        <div class="device-task-card">
            <div class="device-card-header">
                <h5>设备角色: <input type="text" class="device-role" value="${escapeHtml(task.device_role || '')}"></h5>
                <button type="button" class="remove-task-btn" onclick="this.closest('.device-task-card').remove()" title="删除此设备任务">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 6h18"/><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/><line x1="10" y1="11" x2="10" y2="17"/><line x1="14" y1="11" x2="14" y2="17"/></svg>
                </button>
            </div>
            <div class="device-card-content">
                <div>
                    <label>目标硬件:</label>
                    <select class="internal-device-id" required>
                        <option value="">-- 请选择已注册的设备 --</option>
                        ${userDevices.map(d => `<option value="${d.internal_device_id}" ${d.internal_device_id === task.internal_device_id ? 'selected' : ''}>${d.nickname} (${d.board_model})</option>`).join('')}
                    </select>
                </div>
                <div>
                    <label>设备职责描述:</label>
                    <textarea class="device-description" rows="3">${escapeHtml(task.description || '')}</textarea>
                </div>
                <div class="peripheral-wrapper">
                    <div class="peripheral-container" data-task-index="${index}">
                        <label>外设配置:</label>
                        <div style="display: grid; grid-template-columns: 2fr 2fr 1fr auto; gap: 10px; color: var(--text-secondary); font-size: 0.9em; margin-bottom: 5px;">
                            <span>名称</span><span>型号</span><span>引脚</span><span></span>
                        </div>
                        ${(task.peripherals || []).map(p => `
                            <div class="peripheral-item" style="display: grid; grid-template-columns: 2fr 2fr 1fr auto; gap: 10px; align-items: center; margin-bottom: 10px;">
                                <input type="text" class="peripheral-name" value="${escapeHtml(p.name)}" required>
                                <input type="text" class="peripheral-model" value="${escapeHtml(p.model || '')}">
                                <input type="number" class="peripheral-pin" placeholder="引脚" ${p.pin === 'USER_INPUT_REQUIRED' ? 'required' : `value="${p.pin}"`}>
                                <button type="button" class="remove-peripheral-btn" onclick="this.parentElement.remove()" title="删除外设">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                                </button>
                            </div>
                        `).join('')}
                    </div>
                    <button type="button" class="secondary" onclick="addPeripheralToTask(${index})" style="margin-top:10px;">+ 添加外设</button>
                </div>
            </div>
        </div>
        `;
    }

    function createNewDeviceCardHtml(index) {
        // This function remains the same as the previous version
        return `
        <div class="device-task-card">
            <div class="device-card-header">
                <h5>设备角色: <input type="text" class="device-role" value="新设备 ${index + 1}"></h5>
                <button type="button" class="remove-task-btn" onclick="this.closest('.device-task-card').remove()" title="删除此设备任务">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 6h18"/><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/><line x1="10" y1="11" x2="10" y2="17"/><line x1="14" y1="11" x2="14" y2="17"/></svg>
                </button>
            </div>
            <div class="device-card-content">
                <div>
                    <label>目标硬件:</label>
                    <select class="internal-device-id" required>
                        <option value="">-- 请选择已注册的设备 --</option>
                        ${userDevices.map(d => `<option value="${d.internal_device_id}">${d.nickname} (${d.board_model})</option>`).join('')}
                    </select>
                </div>
                <div>
                    <label>设备职责描述:</label>
                    <textarea class="device-description" rows="3" placeholder="描述这个新设备需要做什么"></textarea>
                </div>
                <div class="peripheral-wrapper">
                    <div class="peripheral-container" data-task-index="${index}">
                        <label>外设配置:</label>
                    </div>
                    <button type="button" class="secondary" onclick="addPeripheralToTask(${index})" style="margin-top:10px;">+ 添加外设</button>
                </div>
            </div>
        </div>
        `;
    }

    function collectPayloadFromForm() {
        // This function remains the same as the previous version
        const finalPayload = {
            project_name: document.getElementById('final-project-name').value,
            project_description: document.getElementById('final-project-description').value,
            device_tasks: [],
            inter_device_communication: []
        };

        document.querySelectorAll('.device-task-card').forEach(card => {
            const task = {
                device_role: card.querySelector('.device-role').value,
                internal_device_id: card.querySelector('.internal-device-id').value,
                description: card.querySelector('.device-description').value,
                peripherals: []
            };
            card.querySelectorAll('.peripheral-item').forEach(p_item => {
                task.peripherals.push({
                    name: p_item.querySelector('.peripheral-name').value,
                    model: p_item.querySelector('.peripheral-model').value,
                    pin: parseInt(p_item.querySelector('.peripheral-pin').value, 10)
                });
            });
            finalPayload.device_tasks.push(task);
        });

        document.querySelectorAll('.data-flow-line').forEach(line => {
            const source = line.querySelector('.flow-node.source').textContent;
            const target = line.querySelector('.flow-node.target').textContent;
            const label = line.querySelector('.flow-label').textContent;
            const protocolMatch = label.match(/\[(.*?)\]/);
            const protocol = protocolMatch ? protocolMatch[1] : 'MQTT';
            const data_description = label.replace(/\[.*?\]\s*/, '');
            finalPayload.inter_device_communication.push({
                source_device_role: source,
                target_device_role: target,
                data_description: data_description,
                protocol: protocol
            });
        });

        return finalPayload;
    }

    function renderCommunicationPlan(plan) {
        // This function remains the same as the previous version
        const container = document.getElementById('communication-plan-container');
        if (!container) return;
        let html = '';
        const comms = plan.inter_device_communication || [];
        if (comms.length > 0) {
            html = comms.map(comm => `
                <div class="data-flow-line">
                    <div class="flow-node source">${escapeHtml(comm.source_device_role)}</div>
                    <div class="flow-path"><div class="flow-arrow"></div><div class="flow-label">[${escapeHtml(comm.protocol)}] ${escapeHtml(comm.data_description)}</div></div>
                    <div class="flow-node target">${escapeHtml(comm.target_device_role)}</div>
                </div>
            `).join('');
        } else {
            html = `<p style="color: var(--text-secondary);">AI未检测到设备间通信。</p>`;
        }
        container.innerHTML = html;
    }

    async function refreshCommunicationPlan() {
        // This function remains the same as the previous version
        const deviceTasks = [];
        document.querySelectorAll('.device-task-card').forEach(card => {
            const selectElement = card.querySelector('.internal-device-id');
            const selectedOption = selectElement.options[selectElement.selectedIndex];
            const nickname = selectedOption.text.split(' (')[0];
            deviceTasks.push({
                device_role: card.querySelector('.device-role').value,
                nickname: nickname,
                description: card.querySelector('.device-description').value,
            });
        });
        const container = document.getElementById('communication-plan-container');
        container.innerHTML = '<p style="color: var(--text-secondary);">正在重新分析...</p>';
        try {
            const newPlan = await fetchApi('/projects/analyze-communication', 'POST', { device_tasks: deviceTasks });
            renderCommunicationPlan(newPlan);
        } catch (error) {
            container.innerHTML = `<p style="color: var(--accent-error);">分析失败: ${error.message}</p>`;
        }
    }

    function addPeripheralToTask(taskIndex) {
        // This function remains the same as the previous version
        const container = document.querySelector(`.peripheral-container[data-task-index='${taskIndex}']`);
        const newPeripheralHtml = `
            <div class="peripheral-item" style="display: grid; grid-template-columns: 2fr 2fr 1fr auto; gap: 10px; align-items: center; margin-bottom: 10px;">
                <input type="text" class="peripheral-name" placeholder="新外设名称" required>
                <input type="text" class="peripheral-model" placeholder="型号/驱动类型">
                <input type="number" class="peripheral-pin" placeholder="引脚号" required>
                <button type="button" class="remove-peripheral-btn" onclick="this.parentElement.remove()" title="删除外设">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                </button>
            </div>`;
        container.insertAdjacentHTML('beforeend', newPeripheralHtml);
    }

    // ===================================================================
    // Main Application Flow
    // ===================================================================

    async function handleInitialSubmit() {
        if (userDevices.length === 0) {
            alert('请先注册一个设备才能开始构建项目。');
            return;
        }
        const rawTextInput = document.getElementById('raw-text-input');
        const rawText = rawTextInput.value;
        if (!rawText.trim()) {
            return;
        }

        // --- 新的交互逻辑 ---
        const promptContainer = document.getElementById('initial-prompt-container');
        const inputWrapper = document.getElementById('prompt-input-wrapper');
        const thinkingIndicator = document.getElementById('thinking-indicator');
        const animationContainer = document.getElementById('prompt-animation-container');

        // 1. 创建并播放气泡动画
        const bubble = document.createElement('div');
        bubble.className = 'prompt-bubble';
        bubble.textContent = rawText;
        animationContainer.appendChild(bubble);
        setTimeout(() => bubble.remove(), 1000); // 动画结束后移除

        // 2. 切换UI状态
        inputWrapper.style.display = 'none';
        thinkingIndicator.style.display = 'flex';
        rawTextInput.value = ''; // 清空输入框
        document.getElementById('send-prompt-btn').disabled = true;


        isLocalProject = false;
        localFileHandles.clear();
        lastRenderedStepState = {};
        workflowStreamContainer.innerHTML = '';
        document.getElementById('file-tree-container').innerHTML = '';
        currentEditingPath = null;
        if(monacoEditor) monacoEditor.setValue('');
        document.getElementById('editing-file-name').textContent = '';

        try {
            const analyzeResponse = await fetchApi('/projects/analyze', 'POST', { raw_text: rawText });

            // 成功后，隐藏思考指示器并显示确认对话框
            thinkingIndicator.style.display = 'none';
            populateConfirmationDialog(analyzeResponse);
        } catch (error) {
            alert(`AI分析失败: ${error.message}`);
            // 失败后恢复输入状态
            inputWrapper.style.display = 'flex';
            thinkingIndicator.style.display = 'none';
        }
    }

    function populateConfirmationDialog(config) {
        stopPolling();
        currentWorkflowId = null;
        isLocalProject = false;

        const confirmationDialog = document.getElementById('confirmation-dialog');

        // 新增：监听关闭事件
        const closeHandler = () => {
            // 恢复主界面输入框
            document.getElementById('prompt-input-wrapper').style.display = 'flex';
            confirmationDialog.removeEventListener('close', closeHandler); // 清理监听器
        };
        confirmationDialog.addEventListener('close', closeHandler);

        const confirmationForm = document.getElementById('confirmation-form');
        confirmationForm.innerHTML = buildConfirmationFormHtml(config);
        confirmationDialog.showModal();

        document.getElementById('add-device-task-btn').addEventListener('click', () => {
            const container = document.getElementById('device-tasks-container');
            const newIndex = container.children.length;
            container.insertAdjacentHTML('beforeend', createNewDeviceCardHtml(newIndex));
        });


        // --- 【核心修改】为“另存为模板”按钮添加事件监听 ---
        document.getElementById('save-template-btn').addEventListener('click', async () => {
            const payload = collectPayloadFromForm();
            const btn = document.getElementById('save-template-btn');
            btn.disabled = true;
            try {
                await fetchApi('/projects', 'POST', {
                    name: payload.project_name,
                    config_json: payload
                }, 201);
                btn.innerHTML = '<span>已保存!</span>';
                setTimeout(() => {
                    btn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="vertical-align: middle; margin-right: 5px;"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg> 另存为模板';
                    btn.disabled = false;
                }, 2000);
            } catch (error) {
                alert(`保存模板失败: ${error.message}`);
                btn.disabled = false;
            }
        });

        // --- 【核心修改】从 onsubmit 中移除自动保存逻辑 ---
        confirmationForm.onsubmit = async (event) => {
            event.preventDefault();
            confirmationDialog.close();
            const finalPayload = collectPayloadFromForm();
            const workflowView = document.getElementById('view-ai-workflow'); // 获取父容器

            try {
                document.getElementById('btn-activity-ai').click();
                initialPromptContainer.style.display = 'none';
                workflowStreamContainer.style.display = 'block';

                // [最终修正] 在启动工作流时，为容器添加新样式类以改变布局
                workflowView.classList.add('workflow-active');

                workflowStreamContainer.innerHTML = `<div class="stream-entry"><span class="timestamp">${formatTimestamp()}</span><span class="status-running">[INFO]</span> <span>开始构建新项目: ${finalPayload.project_name}...</span></div>`;
                const startResponse = await fetchApi('/workflows', 'POST', finalPayload, 202);
                startPolling(startResponse.workflow_id);
            } catch (error) {
                // [最终修正] 如果启动失败，恢复布局
                workflowView.classList.remove('workflow-active');
                alert(`操作失败: ${error.message}`);
                // 恢复初始界面
                initialPromptContainer.style.display = 'flex';
                workflowStreamContainer.style.display = 'none';
            }
        };
    }

    // ===================================================================
    // Authentication and User Management (unchanged)
    // ===================================================================
    // ... (login, register, showIde functions are unchanged)
    async function login() {
        try {
            const data = await fetchApi('/auth/login', 'POST', {
                username: document.getElementById('login-username').value,
                password: document.getElementById('login-password').value
            });
            accessToken = data.access_token;
            localStorage.setItem('accessToken', accessToken);
            localStorage.setItem('username', data.user_info.username);
            showIde(data.user_info.username);
        } catch (error) { updateMessage('login-error', error.message, true); }
    }

    async function register() {
        try {
            await fetchApi('/auth/register', 'POST', {
                username: document.getElementById('register-username').value,
                password: document.getElementById('register-password').value
            }, 201);
            updateMessage('register-message', '注册成功！请登录。', false);
            setTimeout(toggleForms, 2000);
        } catch (error) { updateMessage('register-message', error.message, true); }
    }

    function showIde(username) {
        loginView.style.display = 'none';
        ideView.style.display = 'flex';
        document.getElementById('username-display').textContent = username;

        const greetingEl = document.getElementById('welcome-greeting');
        greetingEl.textContent = `Hi! ${username}`;

        // 在所有动画（欢迎语1.5s + 输入框0.5s）结束后，
        // 为父容器添加一个 "animation-finished" 类作为“已完成”的标记。
        setTimeout(() => {
            document.getElementById('view-ai-workflow').classList.add('animation-finished');
        }, 2000); // 1500ms(延迟) + 500ms(动画) = 2000ms

        loadUserDevices();
    }

    // ===================================================================
    // Device Management (unchanged)
    // ===================================================================
    // ... (loadUserDevices, openEditDeviceDialog, handleDeviceFormSubmit, etc. are unchanged)
    async function loadUserDevices() {
        try {
            userDevices = await fetchApi('/devices');
            deviceGrid.innerHTML = '';
            if (userDevices.length === 0) {
                deviceGrid.innerHTML = '<p>您还没有注册任何设备。</p>';
                return;
            }
            userDevices.forEach(dev => {
                const peripheralsText = (dev.peripherals && dev.peripherals.length > 0)
                    ? dev.peripherals.map(p => p.name).join(', ')
                    : '无';
                deviceGrid.innerHTML += `
                    <div class="device-card">
                        <div class="device-card-header"><h3>${dev.nickname}</h3><span>${dev.board_model}</span></div>
                        <div class="device-card-body">
                           <p><strong>ID:</strong> ${dev.internal_device_id}</p>
                           <p><strong>外设:</strong> ${peripheralsText}</p>
                        </div>
                        <div class="device-card-actions">
                            <button onclick="openEditDeviceDialog('${dev.internal_device_id}')">编辑</button>
                            <button class="delete-btn" onclick="deleteDevice('${dev.internal_device_id}')">删除</button>
                        </div>
                    </div>`;
            });
        } catch (error) {
            deviceGrid.innerHTML = `<p style="color: var(--accent-error);">加载设备失败: ${error.message}</p>`;
        }
    }

    function openEditDeviceDialog(deviceId) {
        const device = userDevices.find(d => d.internal_device_id === deviceId);
        if (!device) return;
        document.getElementById('device-dialog').showModal();
        document.getElementById('device-dialog-title').textContent = '编辑设备';
        document.getElementById('device-form-submit-btn').textContent = '更新';
        document.getElementById('device-internal-id').value = device.internal_device_id || '';
        document.getElementById('device-nickname').value = device.nickname || '';
        document.getElementById('device-board').value = device.board_model || '';
        document.getElementById('cloud-platform').value = device.cloud_platform || 'tuya';
        document.getElementById('cloud-product-id').value = device.cloud_product_id || '';
        document.getElementById('cloud-device-id').value = device.cloud_device_id || '';
        document.getElementById('cloud-device-secret').value = device.cloud_device_secret || '';
        renderDevicePeripherals(device.peripherals);
    }

    async function handleDeviceFormSubmit(event) {
        event.preventDefault();
        const internalId = document.getElementById('device-internal-id').value;
        const isEditing = !!internalId;
        const payload = {
            nickname: document.getElementById('device-nickname').value,
            board_model: document.getElementById('device-board').value,
            cloud_platform: document.getElementById('cloud-platform').value,
            cloud_product_id: document.getElementById('cloud-product-id').value,
            cloud_device_id: document.getElementById('cloud-device-id').value,
            cloud_device_secret: document.getElementById('cloud-device-secret').value
        };
        const peripherals = [];
        document.querySelectorAll('#device-peripherals-container .peripheral-item').forEach(item => {
            const nameInput = item.querySelector('.peripheral-name');
            const modelInput = item.querySelector('.peripheral-model');
            const pinInput = item.querySelector('.peripheral-pin');
            if (nameInput && modelInput && pinInput && nameInput.value.trim()) {
                peripherals.push({
                    name: nameInput.value.trim(),
                    model: modelInput.value.trim() || 'Generic',
                    pin: pinInput.value ? parseInt(pinInput.value, 10) : null
                });
            }
        });
        payload.peripherals = peripherals;
        const url = isEditing ? `/devices/${internalId}` : '/devices';
        const method = isEditing ? 'PUT' : 'POST';
        try {
            await fetchApi(url, method, payload, isEditing ? 200 : 201);
            document.getElementById('device-dialog').close();
            await loadUserDevices();
        } catch (error) {
            updateMessage('device-form-error', error.message, true);
        }
    }

    function renderDevicePeripherals(peripherals = []) {
        const container = document.getElementById('device-peripherals-container');
        container.innerHTML = '<h4>外设配置</h4>';
        container.innerHTML += `
             <div style="display: grid; grid-template-columns: 2fr 2fr 1fr auto; gap: 10px; color: var(--text-secondary); font-size: 0.9em; margin-bottom: 5px; padding: 0 5px;">
                <span>名称</span><span>型号</span><span>引脚</span><span></span>
            </div>
        `;
        if (!peripherals || peripherals.length === 0) {
            container.innerHTML += '<p class="text-secondary" style="font-size: 0.9em; text-align: center; margin: 10px 0;">该设备暂未配置外设</p>';
        } else {
            peripherals.forEach((p, index) => {
                const peripheralHtml = `
                    <div class="peripheral-item" style="display: grid; grid-template-columns: 2fr 2fr 1fr auto; gap: 10px; align-items: center; margin-bottom: 10px;">
                         <input type="text" class="peripheral-name" value="${escapeHtml(p.name || '')}" placeholder="外设名称" required>
                        <input type="text" class="peripheral-model" value="${escapeHtml(p.model || '')}" placeholder="型号/驱动类型">
                        <input type="number" class="peripheral-pin" value="${p.pin || ''}" placeholder="引脚号" required>

                        <button type="button" class="remove-peripheral-btn" onclick="this.parentElement.remove()" title="删除外设">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                        </button>
                    </div>`;
                container.insertAdjacentHTML('beforeend', peripheralHtml);
            });
        }
    }

    function addDevicePeripheralRow() {
        const container = document.getElementById('device-peripherals-container');
        const placeholder = container.querySelector('p');
        if (placeholder) placeholder.remove();
        const newPeripheralHtml = `
            <div class="peripheral-item" style="display: grid; grid-template-columns: 2fr 2fr 1fr auto; gap: 10px; align-items: center; margin-bottom: 10px;">
                <input type="text" class="peripheral-name" placeholder="新外设名称" required>
                <input type="text" class="peripheral-model" placeholder="型号/驱动类型">
                <input type="number" class="peripheral-pin" placeholder="引脚号" required>

                <button type="button" class="remove-peripheral-btn" onclick="this.parentElement.remove()" title="删除外设">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                </button>
            </div>`;
        container.insertAdjacentHTML('beforeend', newPeripheralHtml);
    }

    async function deleteDevice(deviceId) {
        if (!confirm('确定要删除这个设备吗？')) return;
        try {
            await fetchApi(`/devices/${deviceId}`, 'DELETE');
            await loadUserDevices();
        } catch (error) { alert(`删除失败: ${error.message}`); }
    }

    // ===================================================================
    // File System (Local & Remote) (unchanged)
    // ===================================================================
    // ... (openLocalFolder, processDirectory, buildTreeHtml, etc. are unchanged)
    async function openLocalFolder() {
        if (!window.showDirectoryPicker) {
            alert('您的浏览器不支持此功能。请使用最新版本的Chrome或Edge浏览器。');
            return;
        }
        try {
            const dirHandle = await window.showDirectoryPicker();
            stopPolling();
            isLocalProject = true;
            currentWorkflowId = null; // 重置云端项目ID
            syncedLocalProjectId = null; // 重置已同步的项目ID
            localFileHandles.clear();

            const treeContainer = document.getElementById('file-tree-container');
            treeContainer.innerHTML = '<p style="padding: 10px; color: var(--text-secondary);">正在读取文件夹...</p>';

            const treeData = await processDirectory(dirHandle);

            if (treeData.length > 0) {
                treeContainer.innerHTML = '';
                treeContainer.appendChild(buildTreeHtml(treeData, ''));
            } else {
                treeContainer.innerHTML = '<p style="padding: 10px; color: var(--text-secondary);">文件夹为空。</p>';
            }

            document.querySelector('#status-workflow span').textContent = dirHandle.name;
            document.querySelector('#status-device span').textContent = '本地项目';

        } catch (error) {
            if (error.name !== 'AbortError') {
                console.error('打开文件夹失败:', error);
                alert(`打开文件夹失败: ${error.message}`);
            }
        }
    }

    async function syncLocalProject() {
        if (!isLocalProject || localFileHandles.size === 0) {
            alert("没有可同步的本地项目。");
            return;
        }

        const syncButton = document.getElementById('sync-local-project-btn');
        syncButton.disabled = true;
        syncButton.textContent = '同步中...';

        try {
            const zip = new JSZip();
            // 递归地将文件句柄添加到zip中
            for (const [path, handle] of localFileHandles.entries()) {
                if (handle.kind === 'file') {
                    const file = await handle.getFile();
                    zip.file(path, file);
                }
            }

            const zipBlob = await zip.generateAsync({ type: "blob" });

            const formData = new FormData();
            formData.append('project_zip', zipBlob, 'project.zip');

            // 使用原生的 fetch 发送 FormData
            const response = await fetch(`${API_BASE_URL}/projects/sync-local`, {
                method: 'POST',
                headers: { 'Authorization': `Bearer ${accessToken}` },
                body: formData
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `同步失败，状态码: ${response.status}`);
            }

            const result = await response.json();
            syncedLocalProjectId = result.localProjectId; // 保存返回的ID

            syncButton.textContent = '同步成功!';
            syncButton.onclick = null; // 禁用按钮的再次点击

        } catch (error) {
            alert(`项目同步失败: ${error.message}`);
            syncButton.textContent = '同步失败';
            setTimeout(() => {
                syncButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12a9 9 0 1 1-6.219-8.56"/></svg>`;
                syncButton.disabled = false;
            }, 3000);
        }
    }

    async function processDirectory(dirHandle, path = '') {
        const entries = [];
        localFileHandles.set(path || dirHandle.name, dirHandle);
        for await (const entry of dirHandle.values()) {
            const currentPath = path ? `${path}/${entry.name}` : entry.name;
            localFileHandles.set(currentPath, entry);
            if (entry.kind === 'directory') {
                entries.push({
                    name: entry.name,
                    type: 'folder',
                    children: await processDirectory(entry, currentPath)
                });
            } else {
                entries.push({ name: entry.name, type: 'file' });
            }
        }
        entries.sort((a, b) => {
            if (a.type === 'folder' && b.type !== 'folder') return -1;
            if (a.type !== 'folder' && b.type === 'folder') return 1;
            return a.name.localeCompare(b.name);
        });
        return entries;
    }

    function buildTreeHtml(nodes, path = '', pathToReveal = null) {
        const ul = document.createElement('ul');
        nodes.forEach(node => {
            const li = document.createElement('li');
            const currentPath = path ? `${path}/${node.name}` : node.name;
            li.dataset.path = currentPath;
            if (node.type === 'folder') {
                li.className = 'folder';
                if (pathToReveal && pathToReveal.startsWith(currentPath + '/')) {
                    li.classList.add('open');
                }
                li.innerHTML = `<div class="tree-item"><span class="icon"></span>${node.name}</div>`;
                if (node.children && node.children.length > 0) {
                    const nestedUl = buildTreeHtml(node.children, currentPath, pathToReveal);
                    nestedUl.className = 'nested';
                    li.appendChild(nestedUl);
                }
                li.querySelector('.tree-item').onclick = (e) => { e.stopPropagation(); li.classList.toggle('open'); };
            } else {
                li.className = 'file';
                li.innerHTML = `<div class="tree-item"><span class="icon"></span>${node.name}</div>`;
                if (pathToReveal && pathToReveal === currentPath) {
                     setTimeout(() => {
                        document.querySelectorAll('.tree-item.active').forEach(el => el.classList.remove('active'));
                        li.querySelector('.tree-item').classList.add('active');
                     }, 0);
                }
                li.querySelector('.tree-item').onclick = (e) => {
                    e.stopPropagation();
                    document.querySelectorAll('.tree-item.active').forEach(el => el.classList.remove('active'));
                    e.currentTarget.classList.add('active');
                    viewFileContent(currentPath);
                };
            }
            ul.appendChild(li);
        });
        return ul;
    }

    async function loadAndRenderFileTree(workflowId, pathToReveal = null) {
        if (!workflowId) {
            console.warn("loadAndRenderFileTree called without a workflowId.");
            return;
        }
        currentWorkflowId = workflowId;
        isLocalProject = false;

        const treeContainer = document.getElementById('file-tree-container');
        treeContainer.innerHTML = '<p style="padding: 10px; color: var(--text-secondary);">加载文件中...</p>';
        try {
            const treeData = await fetchApi(`/workflows/${currentWorkflowId}/files`);
            if (treeData?.length > 0) {
                treeContainer.innerHTML = '';
                treeContainer.appendChild(buildTreeHtml(treeData, '', pathToReveal));
            } else {
                treeContainer.innerHTML = '<p style="padding: 10px; color: var(--text-secondary);">工作区为空。</p>';
            }
        } catch (error) {
            treeContainer.innerHTML = `<p style="padding: 10px; color: var(--accent-error);">加载文件树失败: ${error.message}</p>`;
        }
    }

    async function viewFileContent(filePath) {
        if (!monacoEditor) { return; }

        // 新增：打开新文件时，立即清空上一个文件的错误标记
        monaco.editor.setModelMarkers(monacoEditor.getModel(), 'syntax-checker', []);
        renderProblemsPanel([]); // 同时隐藏并清空问题面板

        // 显示编辑器，隐藏欢迎页
        document.getElementById('editor-welcome-message').style.display = 'none';
        document.getElementById('code-editor-panel').style.display = 'flex';

        monacoEditor.updateOptions({ readOnly: true });
        monacoEditor.setValue('// 正在加载文件...\n// ' + filePath);
        document.getElementById('editing-file-name').textContent = filePath;
        currentEditingPath = filePath;

        try {
            let content = '';
            if (isLocalProject) {
                const handle = localFileHandles.get(filePath);
                if (handle && handle.kind === 'file') {
                    const file = await handle.getFile();
                    content = await file.text();
                } else { throw new Error('找不到文件句柄'); }
            } else {
                const data = await fetchApi(`/workflows/${currentWorkflowId}/files?path=${encodeURIComponent(filePath)}`);
                content = data.content;
            }

            const extension = filePath.split('.').pop();
            const langMap = {
                'js': 'javascript', 'html': 'html', 'css': 'css',
                'py': 'python', 'json': 'json', 'md': 'markdown',
                'cpp': 'cpp', 'h': 'cpp', 'ino': 'cpp',
                'c': 'c', 'hpp': 'cpp'
            };
            const language = langMap[extension] || 'plaintext';

            monacoEditor.setValue(content);
            monaco.editor.setModelLanguage(monacoEditor.getModel(), language);
            monacoEditor.updateOptions({ readOnly: false });

        } catch (error) {
            monacoEditor.setValue(`// 加载文件失败: ${error.message}`);
        }
    }

    function renderProblemsPanel(markers) {
        const panel          = document.getElementById('problems-panel');
        const content        = document.getElementById('problems-panel-content');
        const problemsToggle = document.getElementById('status-problems');

        /* 0. 无问题时隐藏 */
        if (!markers || markers.length === 0) {
            toggleProblemsPanel(false);
            problemsToggle.style.display = 'none';
            return;
        }

        /* 1. 统计并自动选择过滤级别 */
        const errorCount   = markers.filter(m => m.severity === monaco.MarkerSeverity.Error  ).length;
        const warningCount = markers.filter(m => m.severity === monaco.MarkerSeverity.Warning).length;
        const infoCount    = markers.filter(m => m.severity === monaco.MarkerSeverity.Info   ).length;
        if (problemsFilter === 'all') {
            if      (errorCount)   problemsFilter = 'errors';
            else if (warningCount) problemsFilter = 'warnings';
            else if (infoCount)    problemsFilter = 'info';
        }

        /* 2. 右下角图标 */
        const activeClass = t => (problemsFilter === t ? 'active' : '');
        let statusHtml = '';

        if (errorCount) {
            statusHtml += `
              <div class="status-item ${activeClass('errors')}"
                   onclick="filterProblems('errors')" style="cursor:pointer;">
                <svg class="icon-error" xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                     viewBox="0 0 16 16" fill="none" stroke="currentColor" stroke-width="1.5"
                     stroke-linecap="round" stroke-linejoin="round">
                  <path d="M8,15 C4.134,15 1,11.866 1,8
                           C1,4.134 4.134,1 8,1
                           C11.866,1 15,4.134 15,8
                           C15,11.866 11.866,15 8,15 Z
                           M8,9.5 L8,5 M8,12.5 L8,12.501"/>
                </svg><span>${errorCount}</span>
              </div>`;
        }
        if (warningCount) {
            statusHtml += `
              <div class="status-item ${activeClass('warnings')}"
                   onclick="filterProblems('warnings')" style="cursor:pointer;">
                <svg class="icon-warning" xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                     viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                     stroke-linecap="round" stroke-linejoin="round">
                  <path d="m21.73 18-8-14a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16 a2 2 0 0 0 1.73-3Z"/>
                  <line x1="12" y1="9"  x2="12"    y2="13"/>
                  <line x1="12" y1="17" x2="12.01" y2="17"/>
                </svg><span>${warningCount}</span>
              </div>`;
        }
        if (infoCount) {
            statusHtml += `
              <div class="status-item ${activeClass('info')}"
                   onclick="filterProblems('info')" style="cursor:pointer;">
                <svg class="icon-info" xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                     viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                     stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="12" cy="12" r="10"/>
                  <line x1="12" y1="16" x2="12"   y2="12"/>
                  <line x1="12" y1="8"  x2="12.01"y2="8"/>
                </svg><span>${infoCount}</span>
              </div>`;
        }
        problemsToggle.innerHTML     = statusHtml;
        problemsToggle.style.display = 'flex';  // 反正有 marker 就展示

        /* 3. 面板详细列表 */
        const sevColor = {
            [monaco.MarkerSeverity.Error]  : 'var(--accent-error)',
            [monaco.MarkerSeverity.Warning]: 'var(--accent-warn)',
            [monaco.MarkerSeverity.Info]   : 'var(--accent-primary)'
        };
        const sevText = {
            [monaco.MarkerSeverity.Error]  : 'Error',
            [monaco.MarkerSeverity.Warning]: 'Warning',
            [monaco.MarkerSeverity.Info]   : 'Info'
        };

        const makeSection = (sev, title) => {
            const list = markers.filter(m => m.severity === sev);
            if (!list.length) return '';
            let html = `<h4 style="margin:10px 0 5px;font-weight:500;font-family:var(--font-family);
                                  border-bottom:1px solid var(--border-color);">
                          ${title} <span style="font-size:.85em;color:var(--text-secondary)">(${list.length})</span>
                        </h4><ul style="list-style:none;padding-left:5px;">`;
            list.forEach(m=>{
                const jump = `monacoEditor.revealLineInCenter(${m.startLineNumber});
                              monacoEditor.setPosition({lineNumber:${m.startLineNumber},column:${m.startColumn}});
                              monacoEditor.focus();`;
                html += `<li style="padding:4px;border-radius:4px;cursor:pointer;"
                             onmouseover="this.style.backgroundColor='var(--bg-surface-hover)'"
                             onmouseout ="this.style.backgroundColor='transparent'"
                             onclick="${jump}">
                           <span style="display:inline-block;width:65px;font-weight:500;color:${sevColor[sev]};">
                             ${sevText[sev]}
                           </span>
                           <span style="color:var(--text-secondary);">[L${m.startLineNumber},C${m.startColumn}]</span>:
                           <span>${escapeHtml(m.message)}</span>
                         </li>`;
            });
            return html + '</ul>';
        };

        let contentHtml = '';
        if (problemsFilter === 'all') {
            contentHtml += makeSection(monaco.MarkerSeverity.Error  ,'错误');
            contentHtml += makeSection(monaco.MarkerSeverity.Warning,'警告');
            contentHtml += makeSection(monaco.MarkerSeverity.Info   ,'信息');
        } else if (problemsFilter === 'errors')   contentHtml = makeSection(monaco.MarkerSeverity.Error  ,'错误');
        else if (problemsFilter === 'warnings')   contentHtml = makeSection(monaco.MarkerSeverity.Warning,'警告');
        else if (problemsFilter === 'info')       contentHtml = makeSection(monaco.MarkerSeverity.Info   ,'信息');

        if (!contentHtml)
            contentHtml = '<p style="text-align:center;color:var(--text-secondary);margin-top:20px;">没有符合当前过滤器的问题。</p>';

        content.innerHTML = contentHtml;

        /* 4. 确保面板展开 */
        toggleProblemsPanel(true);
    }

    function filterProblems(type) {
        if (problemsFilter === type) {
            // 再次点击同一个按钮时，隐藏问题面板
            problemsFilter = 'all';
            toggleProblemsPanel(false); // 关闭问题栏
            return;
        } else {
            problemsFilter = type;
        }

        // 重新渲染当前的markers
        if (monacoEditor) {
            const model = monacoEditor.getModel();
            const markers = monaco.editor.getModelMarkers({ resource: model.uri });
            renderProblemsPanel(markers);
        }
    }

    async function analyzeCurrentFileSyntax() {
        if (!monacoEditor || !currentEditingPath) return;
        const ext = currentEditingPath.split('.').pop().toLowerCase();
        let language = null;

        if (['cpp', 'h', 'hpp', 'ino', 'c'].includes(ext)) {
            language = 'cpp';
        } else if (ext === 'py') {
            language = 'python';
        }

        if (!language) {
            monaco.editor.setModelMarkers(monacoEditor.getModel(), 'syntax-checker', []);
            renderProblemsPanel([]);
            return;
        }

        const code = monacoEditor.getValue();
        try {
            const payload = {
                code: code,
                language: language,
                filePath: currentEditingPath,
                workflowId: currentWorkflowId,
                localProjectId: syncedLocalProjectId
            };
            const result = await fetchApi('/projects/analyze-syntax', 'POST', payload);

            if (result && result.errors) {
                const model = monacoEditor.getModel();
                const modelLineCount = model.getLineCount();

                // 在映射前，先过滤掉无效和越界的错误
                const markers = result.errors
                    .filter(err => err && typeof err.line === 'number' && err.line > 0 && err.line <= modelLineCount)
                    .map(err => ({
                        message: err.message,
                        severity: err.severity === 'info' ? monaco.MarkerSeverity.Info : (err.severity === 'warning' ? monaco.MarkerSeverity.Warning : monaco.MarkerSeverity.Error),
                        startLineNumber: err.line,
                        startColumn: err.column || 1,
                        endLineNumber: err.line,
                        endColumn: model.getLineLength(err.line) + 1
                    }));

                monaco.editor.setModelMarkers(model, 'syntax-checker', markers);
                renderProblemsPanel(markers);
            }
        } catch (error) {
            console.error("Syntax analysis request failed:", error);
            renderProblemsPanel([{
                message: `语法分析服务请求失败: ${error.message}`,
                startLineNumber: 1,
                startColumn: 1,
                severity: monaco.MarkerSeverity.Warning,
            }]);
        }
    }

    async function saveFileContent() {
        if (!currentEditingPath || !monacoEditor) return;
        const saveBtn = document.getElementById('save-file-btn');

        saveBtn.textContent = '保存中...';
        saveBtn.disabled = true;

        try {
            const newContent = monacoEditor.getValue(); // 从Monaco Editor获取内容
            if (isLocalProject) {
                const handle = localFileHandles.get(currentEditingPath);
                if (handle && handle.kind === 'file') {
                    const writable = await handle.createWritable();
                    await writable.write(newContent);
                    await writable.close();
                } else { throw new Error('找不到文件句柄'); }
            } else {
                await fetchApi(`/workflows/${currentWorkflowId}/files?path=${encodeURIComponent(currentEditingPath)}`, 'PUT', { content: newContent });
            }

            saveBtn.textContent = '已保存!';
            setTimeout(() => { saveBtn.textContent = '保存'; saveBtn.disabled = false; }, 2000);
        } catch (error) {
            alert(`保存失败: ${error.message}`);
            saveBtn.textContent = '保存';
            saveBtn.disabled = false;
        }
    }


    // ===================================================================
    // Workflow Polling & Rendering (unchanged)
    // ===================================================================
    // ... (checkStatus, startPolling, stopPolling, etc. are unchanged)

    async function performWorkflowAction(workflowId, action) {
    // 【核心新增】一个专门用于发送操作的函数
    try {
        const actionButtonContainer = document.querySelector('#workflow-actions-container .actions');
        if(actionButtonContainer) actionButtonContainer.innerHTML = `<p>正在执行 ${action}...</p>`;

        await fetchApi(`/workflows/${workflowId}/actions`, 'POST', { action: action }, 202);
        // Action is accepted, the polling will pick up the RUNNING state.
    } catch (error) {
        appendToWorkflowStream(`<div class="stream-entry status-failed">[ERROR] 执行操作失败: ${error.message}</div>`);
    }
    }

    async function checkStatus() {
        if (!currentWorkflowId || isLocalProject) return;
        try {
            const state = await fetchApi(`/workflows/${currentWorkflowId}`);
            renderWorkflowUpdate(state);
            if (['COMPLETED', 'FAILED'].includes(state.status)) {
                stopPolling();
                if (state.status === 'COMPLETED') {
                    document.getElementById('btn-activity-files').click();
                    const mainFile = 'src/app_main.ino';
                    await loadAndRenderFileTree(currentWorkflowId, mainFile);
                    await viewFileContent(mainFile);
                }
            }
        } catch (error) {
            stopPolling();
            appendToWorkflowStream(`<div class="stream-entry status-failed">[ERROR] 无法获取工作流状态: ${error.message}。轮询已停止。</div>`);
        }
    }

    function startPolling(workflowId) {
        stopPolling();
        currentWorkflowId = workflowId;
        checkStatus();
        statusInterval = setInterval(checkStatus, 1000);
    }

    function stopPolling() {
        if (statusInterval) clearInterval(statusInterval);
        statusInterval = null;
    }

    function formatTimestamp(date = new Date()) { return date.toLocaleTimeString('en-GB'); }

    function appendToWorkflowStream(htmlContent) {
        const container = document.getElementById('workflow-stream-container');
        container.insertAdjacentHTML('beforeend', htmlContent);
        container.scrollTop = container.scrollHeight;
    }

    // 在 <script> 标签内，用这个新函数完整替换旧的 renderWorkflowUpdate 函数
function renderWorkflowUpdate(state) {
    document.querySelector('#status-workflow span').textContent = state.status || 'N/A';
    const currentTask = state.current_device_task;
    document.querySelector('#status-device span').textContent = currentTask ? currentTask.device_role : '无设备';

    const actionsContainer = document.getElementById('deployment-actions-container');

    // 1. 处理部署按钮的显示/隐藏
    if (state.status === 'PAUSED' && state.available_actions?.length > 0) {
        let buttonsHtml = '';
        if (state.available_actions.includes('DEPLOY_USB')) {
            buttonsHtml += `
                <button class="deploy-action-btn secondary" onclick="postDeploymentAction('DEPLOY_USB')">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 20v-4"/><path d="M12 10V4"/><path d="M8 16H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h4"/><path d="m16 4 h4a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-4"/><path d="M8 12h8"/></svg>
                    USB 部署
                </button>`;
        }
        if (state.available_actions.includes('DEPLOY_OTA')) {
            buttonsHtml += `
                <button class="deploy-action-btn secondary" onclick="postDeploymentAction('DEPLOY_OTA')">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12a7 7 0 1 1 14 0"/><path d="M8.5 12.5a4 4 0 1 1 7 0"/><path d="M12 17.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"/></svg>
                    OTA 部署
                </button>`;
        }
        actionsContainer.innerHTML = buttonsHtml;
        actionsContainer.style.display = 'flex';
    } else {
        actionsContainer.style.display = 'none';
    }

    const existingActionsContainer = document.getElementById('workflow-actions-container');
    if (existingActionsContainer) {
        existingActionsContainer.remove();
    }

    if (state.status === 'PAUSED' && state.available_actions && state.available_actions.length > 0) {
        let actionsHtml = '<div id="workflow-actions-container" class="status-actions-container">';
        actionsHtml += '<p>等待操作：编译完成，请选择部署方式</p><div class="actions">';

        state.available_actions.forEach(action => {
            const actionText = action === 'DEPLOY_USB' ? 'USB 部署' : (action === 'DEPLOY_OTA' ? 'OTA 部署' : action);
            actionsHtml += `<button onclick="performWorkflowAction('${state.workflow_id}', '${action}')">${actionText}</button>`;
        });
        actionsHtml += '</div></div>';
        appendToWorkflowStream(actionsHtml);
    }

    if (!state.workflow_steps) return;

    // 2. 处理工作流步骤的日志渲染
    if (!state.workflow_steps) return;
    state.workflow_steps.forEach(step => {
        const stepStateKey = `${step.id}-${step.status}`;
        if (lastRenderedStepState[stepStateKey] && ['completed', 'failed'].includes(step.status)) {
            return;
        }

        // 【核心修正】在编译成功时，自动跳转到文件浏览器
        if (step.id === 'compile_node' && step.status === 'completed' && !lastRenderedStepState[stepStateKey]) {
            const hasSwitched = document.body.dataset.switchedToFileView === currentWorkflowId;
            if (!hasSwitched) {
                console.log("Compilation successful. Switching to file explorer view.");
                document.getElementById('btn-activity-files').click();
                loadAndRenderFileTree(currentWorkflowId, 'src/app_main.ino').then(() => {
                    viewFileContent('src/app_main.ino');
                });
                document.body.dataset.switchedToFileView = currentWorkflowId;
            }
        }

        let entryHtml = '';
        const timestamp = formatTimestamp();
        const statusClassMap = {
            'running': 'status-running', 'completed': 'status-completed',
            'failed': 'status-failed', 'paused': 'status-warn'
        };
        const statusText = (step.status || 'pending').toUpperCase();
        const statusClass = statusClassMap[step.status] || '';

        if (step.status !== 'pending' && !lastRenderedStepState[stepStateKey]) {
             entryHtml = `<div class="stream-entry"><span class="timestamp">${timestamp}</span><span class="${statusClass}">[${statusText}]</span> <span>${step.name}...</span></div>`;
             if (step.status === 'completed' || step.status === 'failed') {
                if (step.output) {
                    const formattedOutput = escapeHtml(step.output);
                    entryHtml += `<div class="output-block"><div class="output-block-header">产出物: ${step.name}</div><div class="output-block-content"><pre><code>${formattedOutput}</code></pre></div></div>`;
                }
                if (step.status === 'failed' && step.log) {
                    entryHtml += `<div class="output-block"><div class="output-block-header">错误日志:</div><div class="output-block-content"><pre><code>${escapeHtml(step.log)}</code></pre></div></div>`;
                }
             }
             appendToWorkflowStream(entryHtml);
             lastRenderedStepState[stepStateKey] = true;
        }
    });
}
    // ===================================================================
    // Initial Setup
    // ===================================================================

    function setupActivityBar() {
        // This function remains the same as the previous version
        const buttons = document.querySelectorAll('#activity-bar .activity-group:first-child .activity-btn');
        const views = document.querySelectorAll('#main-view .view');
        const buttonToViewMap = {
            'btn-activity-ai': 'view-ai-workflow',
            'btn-activity-files': 'view-file-explorer',
            'btn-activity-devices': 'view-device-manager'
        };

        const viewActivationLogic = {
            'view-ai-workflow': () => {
                const hasActiveWorkflow = !!currentWorkflowId && !isLocalProject;
                initialPromptContainer.style.display = hasActiveWorkflow ? 'none' : 'flex';
                workflowStreamContainer.style.display = hasActiveWorkflow ? 'block' : 'none';
                if (hasActiveWorkflow) checkStatus();
                renderProblemsPanel([]);

                // --- 从这里开始添加 ---
                // 如果动画已经播放过，就切换到静态显示样式
                if (welcomeAnimationPlayed) {
                    const greetingEl = document.getElementById('welcome-greeting');
                    greetingEl.classList.remove('typing-active');
                    greetingEl.classList.add('static-greeting');
                }
                // --- 到这里结束添加 ---
            },
            'view-file-explorer': () => {
                const treeContainer = document.getElementById('file-tree-container');
                if (!currentWorkflowId && !isLocalProject) {
                     treeContainer.innerHTML = '<p style="padding: 10px; color: var(--text-secondary);">没有活动的构建任务。请先开始一个新项目或打开/加载一个项目。</p>';
                }
                if (!currentEditingPath) {
                    renderProblemsPanel([]);
                }
            },
            'view-device-manager': () => {
                loadUserDevices();
                // 新增：切换到此视图时，隐藏问题面板
                renderProblemsPanel([]);
            }
        };

        buttons.forEach(button => {
            button.addEventListener('click', () => {
                const targetViewId = buttonToViewMap[button.id];
                if (!targetViewId) return;

                buttons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');

                views.forEach(view => view.classList.toggle('active', view.id === targetViewId));

                if (viewActivationLogic[targetViewId]) {
                    try { viewActivationLogic[targetViewId](); }
                    catch (e) { console.error(`Error activating view ${targetViewId}:`, e); }
                }
            });
        });
    }

    function setupThemeToggle() {
        // This function remains the same as the previous version
        const toggleButton = document.getElementById('btn-theme-toggle');
        const sunIcon = document.querySelector('.theme-icon-sun');
        const moonIcon = document.querySelector('.theme-icon-moon');
        const applyTheme = (theme) => {
            if (theme === 'light') {
                document.documentElement.setAttribute('data-theme', 'light');
                sunIcon.style.display = 'none'; moonIcon.style.display = 'block';
            } else {
                document.documentElement.removeAttribute('data-theme');
                sunIcon.style.display = 'block'; moonIcon.style.display = 'none';
            }
            // 联动更新Monaco主题
            if (monacoEditor) {
                defineAndSetMonacoTheme();
            }
        };
        toggleButton.addEventListener('click', () => {
            const newTheme = document.documentElement.hasAttribute('data-theme') ? 'dark' : 'light';
            localStorage.setItem('theme', newTheme);
            applyTheme(newTheme);
        });
        applyTheme(localStorage.getItem('theme') || 'dark');
    }

    function setupSettings() {
        // This function remains the same as the previous version
        const settingsButton = document.getElementById('btn-settings');
        const settingsDialog = document.getElementById('settings-dialog');
        const settingsForm = document.getElementById('settings-form');
        settingsButton.addEventListener('click', async () => {
            settingsForm.reset();
            updateMessage('settings-message', '', false);
            try {
                const config = await fetchApi('/user/config');
                document.getElementById('wifi-ssid').value = config.wifi_ssid || '';
                document.getElementById('wifi-password').value = config.wifi_password || '';
            } catch (error) { updateMessage('settings-message', '无法加载配置', true); }
            settingsDialog.showModal();
        });
        settingsForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            const payload = {
                wifi_ssid: document.getElementById('wifi-ssid').value,
                wifi_password: document.getElementById('wifi-password').value
            };
            try {
                await fetchApi('/user/config', 'PUT', payload);
                updateMessage('settings-message', '设置已保存', false);
                setTimeout(() => settingsDialog.close(), 1500);
            } catch (error) { updateMessage('settings-message', error.message, true); }
        });
    }


        function setupPanelResizer() {
            const resizer = document.getElementById('panel-resizer');
            const panel = document.getElementById('problems-panel');
            const mainView = document.getElementById('main-view');

            let startY, startHeight;

            function startResize(e) {
                startY = e.clientY;
                startHeight = parseInt(document.defaultView.getComputedStyle(panel).height, 10);
                window.addEventListener('mousemove', doResize);
                window.addEventListener('mouseup', stopResize);
                document.body.style.userSelect = 'none';
                document.body.style.cursor = 'ns-resize'; // 添加全局鼠标样式
            }

            function doResize(e) {
                const newHeight = startHeight - (e.clientY - startY);
                // 设置合理的最小/最大高度
                if (newHeight > 100 && newHeight < window.innerHeight * 0.5) {
                    panel.style.height = newHeight + 'px';
                }
            }

            function stopResize() {
                window.removeEventListener('mousemove', doResize);
                window.removeEventListener('mouseup', stopResize);
                document.body.style.userSelect = '';
                document.body.style.cursor = ''; // 恢复鼠标样式
            }

            resizer.addEventListener('mousedown', startResize);
        }
        window.closeProblemsPanel  = closeProblemsPanel;
        window.toggleProblemsPanel = toggleProblemsPanel;
        window.filterProblems      = filterProblems;
        // --- Monaco Editor 初始化 ---
        require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.45.0/min/vs' }});
        require(['vs/editor/editor.main'], function() {
            // 直接赋值给外部声明的变量
            monacoEditor = monaco.editor.create(document.getElementById('monaco-editor-container'), {
                value: '',
                language: 'plaintext',
                automaticLayout: true,
                fontSize: 15,
                fontFamily: 'JetBrains Mono, Fira Code, monospace',
                lineHeight: 1.7,
                minimap: { enabled: false } // 默认关闭小地图以节省空间
            });

            // 初始化并应用自定义主题
            defineAndSetMonacoTheme();
            // --- 新增：实时语法检查的防抖触发器 ---
            let debounceTimer;
            monacoEditor.onDidChangeModelContent(() => {
                // 清除上一个计时器
                clearTimeout(debounceTimer);

                // 设置一个新的计时器，在用户停止输入1500毫秒（1.5秒）后触发
                debounceTimer = setTimeout(() => {
                    analyzeCurrentFileSyntax();
                }, 1500);
            });
        });
        // Cache DOM elements
        loginView = document.getElementById('login-view');
        ideView = document.getElementById('ide-view');
        workflowStreamContainer = document.getElementById('workflow-stream-container');
        initialPromptContainer = document.getElementById('initial-prompt-container');
        deviceGrid = document.getElementById('device-grid');

        // Setup UI handlers
        setupActivityBar();
        setupThemeToggle();
        setupSettings();
        setupPanelResizer();
        setupSidebarResizer();

        window.togglePasswordVisibility = togglePasswordVisibility;
        window.toggleForms = toggleForms;
        window.openEditDeviceDialog = openEditDeviceDialog;
        window.deleteDevice = deleteDevice;
        window.addDevicePeripheralRow = addDevicePeripheralRow;
        window.addPeripheralToTask = addPeripheralToTask;
        window.refreshCommunicationPlan = refreshCommunicationPlan;
        window.closeProblemsPanel = closeProblemsPanel;
        window.toggleProblemsPanel = toggleProblemsPanel;
        window.filterProblems = filterProblems;
        window.postDeploymentAction = postDeploymentAction;
        window.performWorkflowAction = performWorkflowAction; // 确保这个函数也暴露出去


        const rawTextInput = document.getElementById('raw-text-input');
        const sendPromptBtn = document.getElementById('send-prompt-btn');
        const expandInputBtn = document.getElementById('expand-input-btn');
        const promptContainer = document.getElementById('initial-prompt-container');

        rawTextInput.addEventListener('input', () => {
            // 自动增高
            rawTextInput.style.height = 'auto';
            rawTextInput.style.height = rawTextInput.scrollHeight + 'px';
            // 启用/禁用发送按钮
            sendPromptBtn.disabled = !rawTextInput.value.trim();
        });

        rawTextInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                if (!sendPromptBtn.disabled) {
                    sendPromptBtn.click();
                }
            }
        });

        sendPromptBtn.addEventListener('click', handleInitialSubmit);
        expandInputBtn.addEventListener('click', () => {
            // 【核心修正】将 fullscreen-active class 切换到主视图容器上
            document.getElementById('view-ai-workflow').classList.toggle('fullscreen-active');
        });
        document.getElementById('login-button').addEventListener('click', login);
        document.getElementById('register-button').addEventListener('click', register);
        document.getElementById('logout-button').addEventListener('click', () => {
            localStorage.clear();
            location.reload();
        });
        document.getElementById('add-device-btn').addEventListener('click', () => {
            document.getElementById('device-form').reset();
            document.getElementById('device-dialog-title').textContent = '注册新设备';
            document.getElementById('device-form-submit-btn').textContent = '注册';
            document.getElementById('device-internal-id').value = '';
            renderDevicePeripherals([]);
            document.getElementById('device-dialog').showModal();
        });
        document.getElementById('device-form').addEventListener('submit', handleDeviceFormSubmit);
        document.getElementById('save-file-btn').addEventListener('click', saveFileContent);
        document.getElementById('open-local-folder-btn').addEventListener('click', openLocalFolder);

        // --- 【核心修改】项目加载和模板删除逻辑 ---
        document.getElementById('load-cloud-project-btn').addEventListener('click', async () => {
            const projectLoaderDialog = document.getElementById('project-loader-dialog');
            const projectList = document.getElementById('project-list');
            projectList.innerHTML = '<li>加载中...</li>';
            projectLoaderDialog.showModal();
            try {
                const [history, savedProjects] = await Promise.all([
                    fetchApi('/workflows/history').catch(() => []),
                    fetchApi('/projects').catch(() => [])
                ]);

                projectList.innerHTML = '';

                if (history.length > 0) {
                    projectList.innerHTML += '<li style="color: var(--text-secondary); pointer-events: none; font-weight: bold;">构建历史 (可查看文件/删除)</li>';
                    history.forEach(wf => {
                        const li = document.createElement('li');
                        li.innerHTML = `
                            <span class="project-name" title="点击加载文件">${escapeHtml(wf.project_name)}</span>
                            <div>
                               <span class="status-badge ${wf.status.toLowerCase()}">${escapeHtml(wf.status)}</span>
                               <button class="delete-project-btn" title="删除此项目及文件">
                                   <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 6h18"/><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/></svg>
                               </button>
                            </div>`;

                        li.querySelector('.project-name').onclick = () => {
                            document.getElementById('btn-activity-files').click();
                            startPolling(wf.workflow_id);
                            loadAndRenderFileTree(wf.workflow_id);
                            projectLoaderDialog.close();
                        };

                        li.querySelector('.delete-project-btn').onclick = async (e) => {
                            e.stopPropagation();
                            try {
                                const deleteBtn = e.currentTarget;
                                deleteBtn.innerHTML = '...';
                                deleteBtn.disabled = true;
                                await fetchApi(`/workflows/${wf.workflow_id}`, 'DELETE', null, 200);
                                li.remove();
                            } catch (error) {
                                alert(`删除失败: ${error.message}`);
                            }
                        };
                        projectList.appendChild(li);
                    });
                }

                if (savedProjects.length > 0) {
                    projectList.innerHTML += '<li style="color: var(--text-secondary); pointer-events: none; font-weight: bold; margin-top: 15px;">项目模板 (可使用/删除)</li>';
                    savedProjects.forEach(p => {
                        const li = document.createElement('li');
                        li.innerHTML = `
                            <span class="project-name" title="点击使用此模板开始新构建">${escapeHtml(p.name)}</span>
                            <button class="delete-project-btn" title="删除此模板">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 6h18"/><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/></svg>
                            </button>`;

                        li.querySelector('.project-name').onclick = async () => {
                            try {
                                const projectData = await fetchApi(`/projects/${p.id}`);
                                populateConfirmationDialog(projectData.config_json);
                                projectLoaderDialog.close();
                            } catch (error) {
                                alert(`加载项目模板失败: ${error.message}`);
                            }
                        };

                        li.querySelector('.delete-project-btn').onclick = async (e) => {
                            e.stopPropagation();
                            try {
                                const deleteBtn = e.currentTarget;
                                deleteBtn.innerHTML = '...';
                                deleteBtn.disabled = true;
                                await fetchApi(`/projects/${p.id}`, 'DELETE', null, 200);
                                li.remove();
                            } catch (error) {
                                alert(`删除模板失败: ${error.message}`);
                            }
                        };
                        projectList.appendChild(li);
                    });
                }

                if (projectList.innerHTML === '') {
                    projectList.innerHTML = '<li>没有找到任何项目或历史记录。</li>';
                }
            } catch (error) {
                projectList.innerHTML = `<li>加载失败: ${error.message}</li>`;
            }
        });

        // Check for stored token on load
        const storedToken = localStorage.getItem('accessToken');
        const storedUsername = localStorage.getItem('username');
        if (storedToken && storedUsername) {
            accessToken = storedToken;
            showIde(storedUsername);
        }
    });
    </script>
</body>
</html>
